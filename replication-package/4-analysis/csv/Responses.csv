ResponseId,StartDate,EndDate,Progress,Duration (in seconds),Finished,RecordedDate,Consent,Years of industry experience,Years of Java or C# Experience,Last ten years of Java or C# Experience,IDEs used,Q9_10_TEXT,Java Proficiency,C# Proficiency,Current Title,Q30_12_TEXT,Education,Age,Gender,USEFUL-TOOLS,Simple Refactoring,Complex Refactoring,Version Control System,Compiler,Textual search,navigation,Test suite,Copy/cut and paste,Debugging,Number of Tools selected,Necessary-Simple Refactoring tools,Necessary-Complex Refactoring tools,"Necessary-Version Control Systems ""diffs""",Necessary-Compiler output,Necessary-Textual search,Necessary-Structural navigation,Necessary-Copy/cut and paste code,Necessary-Test suites,Necessary-Debugging tools,Inline-Task,Inline-Strategy,Q40_10_TEXT,Inline-Tool,ToolInline_6_TEXT,Inline-Why,Q83_6_TEXT,Inline-Factor,Q86_12_TEXT,Move-Task,Move-Strategy,Q95_10_TEXT,Move-Tool,ToolMove_6_TEXT,Move-Why,Q89_8_TEXT,Move-Factor,Q88_3_TEXT,Change Signature Task,Change-Signature-Strategy,Q108_10_TEXT,Change-Signature-Tool,ToolChangeSignature_6_TEXT,Change-Signature-Why,Q90_8_TEXT,Change-Signature-Factor,Q92_3_TEXT,Q91,Q18_1,Q18_2,Q18_3,Q18_4,Q18_19,Q18_21,Q18_22,Q18_23,Q18_10,Q18_10_TEXT,Q103,Q103_12_TEXT,Q93_1,Q104,Q104_12_TEXT,Q102,Q102_12_TEXT,Q82_1,Q105_1,Q101,Q93,Q94,Q96,Q98,Q99,Q100,Q42,Q43
R_3j2wEQERo6rW2Gc,1/5/21 3:38,1/6/21 8:03,100,102311,TRUE,1/6/21 8:03,TRUE,12,5,2,JetBrains IntelliJ,-99,4,1,Technical Lead / Team Leader,-99,Master's degree,35 - 44,Female,"Simple Refactoring tools (e.g. Rename, Extract Constant, Inline Method),Complex Refactoring tools (e.g. Move Method, Extract Class, Introduce Parameter),Version Control Systems ""diffs"" (e.g. git diff, et.c.),Compiler output (e.g. compiler errors),Textual search (e.g. grep, find and replace),Structural navigation (e.g. find references, go to declaration),Copy/cut and paste code,Test suites (e.g. JUnit, test errors),Debugging tools",Simple Refactoring,Complex Refactoring,Version Control System,Compiler,Textual search,navigation,Test suite,Copy/cut and paste,Debugging,9,"The tool is effective,The tool is satisfying to use,The tool is predictable","The tool saves time or effort,The tool is satisfying to use","The tool saves time or effort,The tool is satisfying to use,The tool is predictable","The tool saves time or effort,The tool is satisfying to use,The tool is predictable","The tool is satisfying to use,The tool is predictable","The tool is effective,The tool is satisfying to use","The tool is satisfying to use,The tool is predictable","The tool is effective,The tool is satisfying to use",The tool is satisfying to use,"I would: 
 

  Start by moving the implementation of isAnyNotEmpty into isAllEmpty.
  Validate this change by running testIsAllEmpty.
  If the test pass, I will remove testIsAnyNotEmpty and isAnyNotEmpty (e.g. by deleting or commenting out).
  Finally, I validate the changes by running tests.",Structure,,"Compiler output (e.g. compiler errors),Test suite (e.g. test failures)",,"This approach lets me rely on the compiler to show me the steps.,This approach lets me keep the tests running so I can validate changes.",,The tool does not saves time or effort (it is not reasonable in terms of time and effort required to use),,"I would: 
 

  Start with extracting the code I want and any necessary additional code from one of the files into a new class.
  Then I would extract the code I want and any necessary additional code from the other file into the new class. 
  Then I would validate the change.",Structure,,"Rename,Move Method,Extract Class,Compiler output (e.g. compiler errors)",,"This approach lets me keep the tests running so I can validate changes.,This approach lets me automate as much as possible.,This approach lets me make the change stepwise.",,,,"I would: 
 

  Start by assigning the default value of false to all forceAccess parameters inside all the special-case methods, so the class only performs the default functionality.
  Then I would run the tests to locate the ones that break and fix them (e.g. by deleting the ones that are no longer necessary).
  Once all tests pass, I would remove the forceAccess functionality (that is now unused) from all 8 methods. 
  Then I validate the change using tests.
  Finally, I move all implementations into the default methods' bodies.
  Then I validate the change using tests.",Execute,,"Inline Method,Safe Delete,Test suite (e.g. test failures),Structural navigation (e.g. find references, go to declaration),Copy/cut and paste code",,"This approach lets me keep the tests running so I can validate changes.,This approach lets me automate as much as possible.,This approach lets me make the change stepwise.",,"Other, please specify...","I didn't think of it because this is not a ""real"" situation - I have do think of what I ""would"" do instead of being in the IDE and actually doing it.",,5,,,,,,,,,,"Version Control Systems ""diffs"" (e.g. git diff, et.c.),Compiler output (e.g. compiler errors),Structural navigation (e.g. find references, go to declaration),Test suites (e.g. JUnit, test errors)",,35,,,"Version Control Systems ""diffs"" (e.g. git diff, et.c.),Compiler output (e.g. compiler errors),Textual search (e.g. grep, find and replace),Structural navigation (e.g. find references, go to declaration),Copy/cut and paste code",,"The tool is effective,The tool is satisfying to use,The tool is predictable",The tool saves time or effort,,no more or less,no more or less,no more or less,Because it makes small enough steps that I can keep them in my head,"This is called ""git diff""",This already exists!,,"This survey feels very much like it's not like my day to day job. I have code in front of me in a code editor, I don't have to get code presented on a web page and asked ""what would you do"". What I tell you I ""would do"" is not necessarily the same as what I would do in practice. To get this kind of data, I think you have to watch people refactoring, tbh. That would of course be qualitative, not quantitative data, but I'm not convinced that your data from this survey will be good enough."
R_3NQhsqqkbgAv7CO,1/17/21 10:56,1/17/21 11:36,100,2386,TRUE,1/17/21 11:36,TRUE,5,5,5,"JetBrains IntelliJ,Visual Studio,VS Code,Other, please specify",Android Studio (based on IntelliJ),4,4,Programmer / Software Developer / Software Engineer,-99,Master's degree,25 - 34,Female,"Simple Refactoring tools (e.g. Rename, Extract Constant, Inline Method),Version Control Systems ""diffs"" (e.g. git diff, et.c.),Compiler output (e.g. compiler errors),Structural navigation (e.g. find references, go to declaration),Copy/cut and paste code,Test suites (e.g. JUnit, test errors),Debugging tools",Simple Refactoring,,Version Control System,Compiler,,navigation,Test suite,Copy/cut and paste,Debugging,7,"The tool is effective,The tool saves time or effort,The tool is satisfying to use",,"The tool is trustworthy,The tool is predictable","The tool is effective,The tool is trustworthy",,"The tool is effective,The tool saves time or effort,The tool is satisfying to use,The tool is trustworthy","The tool is effective,The tool saves time or effort,The tool is predictable","The tool is effective,The tool saves time or effort,The tool is satisfying to use,The tool is trustworthy,The tool is predictable","The tool is effective,The tool is satisfying to use,The tool is trustworthy,The tool is predictable","I would: 
 

  Start by moving the implementation of isAnyNotEmpty into isAllEmpty.
  Validate this change by running testIsAllEmpty.
  If the test pass, I will remove testIsAnyNotEmpty and isAnyNotEmpty (e.g. by deleting or commenting out).
  Finally, I validate the changes by running tests.",Structure,,"Compiler output (e.g. compiler errors),Structural navigation (e.g. find references, go to declaration),Copy/cut and paste code,Test suite (e.g. test failures)",,"This approach lets me keep the tests running so I can validate changes.,This approach lets me make the change stepwise.",,The tool does not saves time or effort (it is not reasonable in terms of time and effort required to use),,"I would: 
 

  Start with creating a new empty class.
  Then I would move all the methods into the new class.
  I would fix any compiler errors (e.g. from any additional code).
  Then I would validate the change.",Local,,"Compiler output (e.g. compiler errors),Textual search (e.g. grep, find and replace),Test suite (e.g. test failures),Structural navigation (e.g. find references, go to declaration),Copy/cut and paste code",,"This approach lets me rely on the compiler to show me the steps.,This approach lets me make the change stepwise.",,"The tool is not effective (it is not reasonable to locate and apply for a desired intent),The tool does not saves time or effort (it is not reasonable in terms of time and effort required to use),The tool is not trustworthy (it does not feel safe or reliable to use),The tool is not predictable (it does not behave consistently and predictably each time you use it)",,"None of the above, please specify","None of the above, please specify","1. Find all callers of the forceAccess method by looking at accessors of the method. 
 2. Change all to call the method without the forceAccess flag - make neccessary changes in methods accordingly in the accessing methods
 3. Verify all tests pass
 4. Move functionality from forceAccess-method into default method
 5. Verify with tests","Safe Delete,Compiler output (e.g. compiler errors),Other, please specify",Find Usages,"This approach lets me keep the tests running so I can validate changes.,This approach lets me make the change stepwise.",,"The tool does not saves time or effort (it is not reasonable in terms of time and effort required to use),The tool is not trustworthy (it does not feel safe or reliable to use),The tool is not predictable (it does not behave consistently and predictably each time you use it)",,control,3,,,3,2,,,,3,,"Version Control Systems ""diffs"" (e.g. git diff, et.c.),Compiler output (e.g. compiler errors),Structural navigation (e.g. find references, go to declaration),Test suites (e.g. JUnit, test errors)",,70,"The tool does not saves time or effort (it is not reasonable in terms of time and effort required to use),The tool is not trustworthy (it does not feel safe or reliable to use),The tool is not predictable (it does not behave consistently and predictably each time you use it)",,"Version Control Systems ""diffs"" (e.g. git diff, et.c.),Compiler output (e.g. compiler errors),Test suites (e.g. JUnit, test errors)",,"The tool is effective,The tool saves time or effort,The tool is satisfying to use",,"Common situation is when renaming methods, that sometimes not all usages get updated. Or sometimes too many variables get updated ie local variables in different class. Depends both on IDE and language used.",more,no more or less,less,"Gives more control of where the changes happen/do not happen, makes it easier to have control of neccessary changes afterward. Possibly also opens up the possibility of doing necessary changes at the same time.",This is solved by version control. And seems somewhat unnecessary,"Adds unnecessary complexity. also what if one does multiple refactorings, which would then complicate this to a large degree. If I want to revert the changes I would more likely use git.",,
R_10TJWah9kB7hmv9,1/18/21 2:50,1/18/21 6:14,100,12283,TRUE,1/18/21 6:14,TRUE,3,3,3,JetBrains IntelliJ,-99,3,2,Programmer / Software Developer / Software Engineer,-99,Bachelor's degree,25 - 34,Male,"Simple Refactoring tools (e.g. Rename, Extract Constant, Inline Method),Version Control Systems ""diffs"" (e.g. git diff, et.c.),Compiler output (e.g. compiler errors),Textual search (e.g. grep, find and replace),Structural navigation (e.g. find references, go to declaration),Copy/cut and paste code,Test suites (e.g. JUnit, test errors),Debugging tools",Simple Refactoring,,Version Control System,Compiler,Textual search,navigation,Test suite,Copy/cut and paste,Debugging,8,"The tool is effective,The tool saves time or effort,The tool is satisfying to use,The tool is trustworthy",The tool saves time or effort,"The tool is effective,The tool saves time or effort,The tool is trustworthy,The tool is predictable","The tool is effective,The tool saves time or effort,The tool is trustworthy","The tool is effective,The tool saves time or effort,The tool is trustworthy,The tool is predictable","The tool is effective,The tool saves time or effort,The tool is trustworthy,The tool is predictable",The tool saves time or effort,"The tool is effective,The tool saves time or effort,The tool is satisfying to use,The tool is trustworthy,The tool is predictable","The tool is effective,The tool saves time or effort,The tool is satisfying to use,The tool is trustworthy,The tool is predictable","I would: 
 

  Start by moving the implementation of isAnyNotEmpty into isAllEmpty.
  Validate this change by running testIsAllEmpty.
  If the test pass, I will remove testIsAnyNotEmpty and isAnyNotEmpty (e.g. by deleting or commenting out).
  Finally, I validate the changes by running tests.",Structure,,"Compiler output (e.g. compiler errors),Textual search (e.g. grep, find and replace),Structural navigation (e.g. find references, go to declaration),Copy/cut and paste code,Test suite (e.g. test failures)",,"This approach lets me rely on the compiler to show me the steps.,This approach lets me keep the tests running so I can validate changes.",,"The tool does not saves time or effort (it is not reasonable in terms of time and effort required to use),The tool is not satisfying to use (it does not add value to the development process),Other, please specify...","In this particular example, I feel that just straight copy-and-paste would be faster and more ergonomic, but that just might be a familiarity thing.","I would: 
 

  Start with creating a new empty class.
  Then I would move all the methods into the new class.
  I would fix any compiler errors (e.g. from any additional code).
  Then I would validate the change.",Local,,"Rename,Version Control Systems ""diffs"" (e.g. git diff, et.c.),Compiler output (e.g. compiler errors),Textual search (e.g. grep, find and replace),Test suite (e.g. test failures),Structural navigation (e.g. find references, go to declaration),Copy/cut and paste code",,"This approach lets me rely on the compiler to show me the steps.,This approach lets me keep the tests running so I can validate changes.,This approach lets me make the change stepwise.",,"The tool does not saves time or effort (it is not reasonable in terms of time and effort required to use),Other, please specify...","I think this is a familiarity thing, again, where copy-paste might feel more ergonomic and faster because I'm just more familiar with it","I would: 
 

  Start by exploring the code structure and get an overview of callers and parameter references.
  Change one method and its callers at a time, attempting to resolve any compiler errors that appear, (e.g. by removing tests, or delete the default method or update code that references forceAccess, or consolidate the overloaded methods) before moving to the next method.
  Repeat for each method until all 8 methods are updated. 
  Validate the change by running tests.",Structure,,"Test suite (e.g. test failures),Compiler output (e.g. compiler errors),Textual search (e.g. grep, find and replace),Structural navigation (e.g. find references, go to declaration),Copy/cut and paste code",,"This approach lets me rely on the compiler to show me the steps.,This approach lets me keep the tests running so I can validate changes.,This approach lets me make the change stepwise.",,The tool is not effective (it is not reasonable to locate and apply for a desired intent),,"control,validating",2,,,,,,,,,,"Version Control Systems ""diffs"" (e.g. git diff, et.c.),Compiler output (e.g. compiler errors),Structural navigation (e.g. find references, go to declaration),Test suites (e.g. JUnit, test errors)",,80,"The tool is not satisfying to use (it does not add value to the development process),Other, please specify...",Think it has to do with familiarity,"Version Control Systems ""diffs"" (e.g. git diff, et.c.),Compiler output (e.g. compiler errors),Test suites (e.g. JUnit, test errors),Debugging tools",,"The tool is effective,The tool saves time or effort",The tool saves time or effort,,no more or less,more,more,"This should probably be optional.
 It's a nice feature, but it probably takes some time to do each time, which might feel slower.","This would make the results of the refactoring more obvious, and the tool would probably feel a little bit more trustworthy.","Sometimes, you refactor in one way, but find out later that a nice way would be to do it some other way (but with some changes in-between).
 This would provide tooling-support for those situations.","I'm not really a person who uses the in-built refactoring tools in IntelliJ alot.
 It happens, but mostly I do things 'by hand'.
 

 I think this might be a familiarity / habit thing, where I haven't really internalized the usage of these tools - which I probably should try to remedy.
 I think some training in these tools (like a workshop or something) would help alot, atleast to get some familiarity with the tools.",
R_1jJRyfOS8buHRxZ,1/18/21 13:28,1/18/21 14:19,100,3020,TRUE,1/18/21 14:19,TRUE,3,3,3,JetBrains IntelliJ,-99,3,1,Programmer / Software Developer / Software Engineer,-99,Bachelor's degree,25 - 34,Male,"Simple Refactoring tools (e.g. Rename, Extract Constant, Inline Method),Complex Refactoring tools (e.g. Move Method, Extract Class, Introduce Parameter),Version Control Systems ""diffs"" (e.g. git diff, et.c.),Textual search (e.g. grep, find and replace),Structural navigation (e.g. find references, go to declaration),Copy/cut and paste code,Test suites (e.g. JUnit, test errors)",Simple Refactoring,Complex Refactoring,Version Control System,,Textual search,navigation,Test suite,Copy/cut and paste,,7,"The tool is effective,The tool saves time or effort,The tool is trustworthy,The tool is predictable","The tool is effective,The tool saves time or effort","The tool saves time or effort,The tool is satisfying to use,The tool is trustworthy",The tool is predictable,"The tool saves time or effort,The tool is trustworthy","The tool is effective,The tool saves time or effort,The tool is trustworthy,The tool is predictable","The tool is effective,The tool saves time or effort,The tool is predictable","The tool is effective,The tool saves time or effort,The tool is satisfying to use,The tool is trustworthy,The tool is predictable","The tool is trustworthy,The tool is predictable","I would: 
 

  Start by moving the implementation of isAnyNotEmpty into isAllEmpty.
  Validate this change by running testIsAllEmpty.
  If the test pass, I will remove testIsAnyNotEmpty and isAnyNotEmpty (e.g. by deleting or commenting out).
  Finally, I validate the changes by running tests.",Structure,,Inline Method,,This approach lets me automate as much as possible.,,,,"I would: 
 

  Start with extracting the code I want and any necessary additional code from one of the files into a new class.
  Then I would extract the code I want and any necessary additional code from the other file into the new class. 
  Then I would validate the change.",Structure,,"Rename,Safe Delete,Structural navigation (e.g. find references, go to declaration),Copy/cut and paste code",,This approach lets me make the change stepwise.,,The tool is not trustworthy (it does not feel safe or reliable to use),,"I would: 
 

  Start by exploring the code structure and get an overview of callers and parameter references.
  Change one method and its callers at a time, attempting to resolve any compiler errors that appear, (e.g. by removing tests, or delete the default method or update code that references forceAccess, or consolidate the overloaded methods) before moving to the next method.
  Repeat for each method until all 8 methods are updated. 
  Validate the change by running tests.",Structure,,"Safe Delete,Change Signature,Test suite (e.g. test failures),Compiler output (e.g. compiler errors),Structural navigation (e.g. find references, go to declaration)",,"This approach lets me rely on the compiler to show me the steps.,This approach lets me make the change stepwise.",,,,,4,,,,,,,,,,"Compiler output (e.g. compiler errors),Test suites (e.g. JUnit, test errors)",,10,"The tool does not saves time or effort (it is not reasonable in terms of time and effort required to use),The tool is not satisfying to use (it does not add value to the development process),The tool is not trustworthy (it does not feel safe or reliable to use)",,"Compiler output (e.g. compiler errors),Test suites (e.g. JUnit, test errors)",,"The tool is effective,The tool saves time or effort,The tool is trustworthy,The tool is predictable","The tool is effective,The tool saves time or effort",,less,no more or less,no more or less,It seems like unnecessary second-guessing of the IDE. I trust the IDE to do its job.,"I am very likely to be using these tools to begin with. A summary review would be a good balance between being useful and not adding an excessive amount of extra steps, so it would not deter me from wanting to use the tool.","Again, I am very likely to use these tools to begin with. This functionality sounds like a significant improvement, but I would use the tools regardless if this functionality was provided or not.",,
R_3FKJeLmgY8Mbiss,1/21/21 11:41,1/21/21 13:46,100,7492,TRUE,1/21/21 13:46,TRUE,3,4,3,"JetBrains IntelliJ,Eclipse,JetBrains Rider",-99,4,2,Programmer / Software Developer / Software Engineer,-99,Master's degree,25 - 34,Male,"Simple Refactoring tools (e.g. Rename, Extract Constant, Inline Method),Complex Refactoring tools (e.g. Move Method, Extract Class, Introduce Parameter),Version Control Systems ""diffs"" (e.g. git diff, et.c.),Compiler output (e.g. compiler errors),Textual search (e.g. grep, find and replace),Structural navigation (e.g. find references, go to declaration),Copy/cut and paste code,Test suites (e.g. JUnit, test errors),Debugging tools",Simple Refactoring,Complex Refactoring,Version Control System,Compiler,Textual search,navigation,Test suite,Copy/cut and paste,Debugging,9,"The tool is effective,The tool saves time or effort,The tool is satisfying to use,The tool is trustworthy,The tool is predictable","The tool is effective,The tool saves time or effort,The tool is satisfying to use,The tool is predictable","The tool is effective,The tool saves time or effort,The tool is satisfying to use,The tool is trustworthy,The tool is predictable","The tool is effective,The tool saves time or effort,The tool is satisfying to use,The tool is trustworthy,The tool is predictable","The tool is effective,The tool saves time or effort,The tool is satisfying to use,The tool is trustworthy,The tool is predictable","The tool is effective,The tool saves time or effort,The tool is satisfying to use,The tool is trustworthy,The tool is predictable","The tool is effective,The tool saves time or effort,The tool is satisfying to use,The tool is trustworthy,The tool is predictable","The tool is effective,The tool saves time or effort,The tool is satisfying to use,The tool is trustworthy,The tool is predictable","The tool is effective,The tool saves time or effort,The tool is satisfying to use,The tool is trustworthy,The tool is predictable","I would: 
 

  I would start by introducing a temporary new method that isAnyNotEmpty delegate to.
  I would validate this change by running tests.
  Then I would replace the call to isAnyNotEmpty to the temporary method. (e.g. return !isAnyNotEmpty(..) is replaced by return !tempMethod(..))
  I would validate this change by running tests.
  If the tests pass, I would remove testIsAnyNotEmpty and isAnyNotEmpty (e.g. by deleting or commenting out)
  Then I would validate the change by running tests.
  If the tests pass, I would inline the temporary method into isAllEmpty and remove it.",Execute,,"Inline Method,Safe Delete,Extract Method,Compiler output (e.g. compiler errors),Structural navigation (e.g. find references, go to declaration),Test suite (e.g. test failures)",,"This approach lets me rely on the compiler to show me the steps.,This approach lets me keep the tests running so I can validate changes.,This approach lets me automate as much as possible.,This approach lets me make the change stepwise.",,,,"I would: 
 

  Start with creating a new empty class.
  Then I would move all the methods into the new class.
  I would fix any compiler errors (e.g. from any additional code).
  Then I would validate the change.",Local,,"Rename,Safe Delete,Compiler output (e.g. compiler errors),Textual search (e.g. grep, find and replace),Test suite (e.g. test failures),Structural navigation (e.g. find references, go to declaration),Copy/cut and paste code",,"This approach lets me rely on the compiler to show me the steps.,This approach lets me make the change stepwise.",,The tool is not trustworthy (it does not feel safe or reliable to use),,"I would: 
 

  Start by assigning the default value of false to all forceAccess parameters inside all the special-case methods, so the class only performs the default functionality.
  Then I would run the tests to locate the ones that break and fix them (e.g. by deleting the ones that are no longer necessary).
  Once all tests pass, I would remove the forceAccess functionality (that is now unused) from all 8 methods. 
  Then I validate the change using tests.
  Finally, I move all implementations into the default methods' bodies.
  Then I validate the change using tests.",Execute,,"Inline Method,Safe Delete,Change Signature,Remove Parameter,Test suite (e.g. test failures),Compiler output (e.g. compiler errors),Textual search (e.g. grep, find and replace),Structural navigation (e.g. find references, go to declaration)",,"This approach lets me keep the tests running so I can validate changes.,This approach lets me automate as much as possible.,This approach lets me make the change stepwise.",,,,step,3,1,,,,2,,,,,"Version Control Systems ""diffs"" (e.g. git diff, et.c.),Compiler output (e.g. compiler errors),Textual search (e.g. grep, find and replace),Structural navigation (e.g. find references, go to declaration)",,50,"Other, please specify...",The manual task is so small/easy that using a refactoring tool isn't something I think about,"Version Control Systems ""diffs"" (e.g. git diff, et.c.),Compiler output (e.g. compiler errors),Structural navigation (e.g. find references, go to declaration),Copy/cut and paste code",,"The tool is effective,The tool saves time or effort,The tool is satisfying to use,The tool is trustworthy,The tool is predictable","The tool is effective,The tool saves time or effort,The tool is satisfying to use,The tool is predictable",,more,more,more,,,,,
R_2dz3xnROOlNCuBG,1/26/21 0:01,1/26/21 0:41,100,2389,TRUE,1/26/21 0:41,TRUE,8,5,5,"JetBrains IntelliJ,Visual Studio",-99,5,3,Technical Lead / Team Leader,-99,Bachelor's degree,25 - 34,Other,"Simple Refactoring tools (e.g. Rename, Extract Constant, Inline Method),Complex Refactoring tools (e.g. Move Method, Extract Class, Introduce Parameter),Version Control Systems ""diffs"" (e.g. git diff, et.c.),Compiler output (e.g. compiler errors),Textual search (e.g. grep, find and replace),Structural navigation (e.g. find references, go to declaration),Copy/cut and paste code,Test suites (e.g. JUnit, test errors),Debugging tools",Simple Refactoring,Complex Refactoring,Version Control System,Compiler,Textual search,navigation,Test suite,Copy/cut and paste,Debugging,9,"The tool is effective,The tool saves time or effort,The tool is trustworthy,The tool is predictable","The tool is effective,The tool saves time or effort,The tool is trustworthy,The tool is predictable",The tool is trustworthy,"The tool is trustworthy,The tool is predictable","The tool is effective,The tool saves time or effort","The tool saves time or effort,The tool is trustworthy,The tool is predictable","The tool is effective,The tool saves time or effort","The tool is effective,The tool is trustworthy,The tool is predictable","The tool is effective,The tool saves time or effort,The tool is satisfying to use,The tool is trustworthy,The tool is predictable","I would: 
 

  Start by removing isAnyNotEmpty (e.g. by deleting or commenting out) to make compiler errors appear.
  Use the compiler errors to navigate to the code that is impacted (i.e., testIsAnyNotEmpy and isAllEmpty). 
  Fix compiler errors (e.g. by removing testIsAnyNotEmpty and implementing isAllEmpty by undoing and moving code).
  Validate the changes by running tests.",Local,,"Compiler output (e.g. compiler errors),Copy/cut and paste code,Test suite (e.g. test failures)",,"This approach lets me rely on the compiler to show me the steps.,This approach lets me keep the tests running so I can validate changes.,This approach lets me automate as much as possible.",,The tool is not trustworthy (it does not feel safe or reliable to use),,"I would: 
 

  Start with creating a new empty class.
  Then I would move all the methods into the new class.
  I would fix any compiler errors (e.g. from any additional code).
  Then I would validate the change.",Local,,"Compiler output (e.g. compiler errors),Test suite (e.g. test failures),Structural navigation (e.g. find references, go to declaration),Copy/cut and paste code",,"This approach lets me rely on the compiler to show me the steps.,This approach lets me keep the tests running so I can validate changes.",,The tool is not satisfying to use (it does not add value to the development process),,"I would: 
 

  Start by exploring the code structure and get an overview of callers and parameter references.
  Change one method and its callers at a time, attempting to resolve any compiler errors that appear, (e.g. by removing tests, or delete the default method or update code that references forceAccess, or consolidate the overloaded methods) before moving to the next method.
  Repeat for each method until all 8 methods are updated. 
  Validate the change by running tests.",Structure,,"Safe Delete,Test suite (e.g. test failures),Compiler output (e.g. compiler errors),Textual search (e.g. grep, find and replace),Structural navigation (e.g. find references, go to declaration),Copy/cut and paste code",,"This approach lets me rely on the compiler to show me the steps.,This approach lets me keep the tests running so I can validate changes.,This approach lets me make the change stepwise.",,"The tool does not saves time or effort (it is not reasonable in terms of time and effort required to use),Other, please specify...",It would create conflicts in this case that would need manual resolution anyway.,control,4,,,2,,,,,,,"Version Control Systems ""diffs"" (e.g. git diff, et.c.),Compiler output (e.g. compiler errors),Test suites (e.g. JUnit, test errors)",,75,The tool does not saves time or effort (it is not reasonable in terms of time and effort required to use),,"Version Control Systems ""diffs"" (e.g. git diff, et.c.),Compiler output (e.g. compiler errors),Test suites (e.g. JUnit, test errors)",,"The tool is effective,The tool saves time or effort,The tool is trustworthy,The tool is predictable","The tool is effective,The tool saves time or effort,The tool is trustworthy,The tool is predictable",,less,no more or less,more,Wastes so much time.,Would probably prefer to do this via git.,This would be very useful eg if you discover something partway through a refactoring and want to revert changes easily.,,
R_tVDh7yUgUdu0Pux,1/26/21 4:21,1/26/21 4:33,100,713,TRUE,1/26/21 4:33,TRUE,4,4,4,"JetBrains IntelliJ,Visual Studio",-99,3,4,Researcher,-99,Master's degree,25 - 34,Male,"Simple Refactoring tools (e.g. Rename, Extract Constant, Inline Method),Version Control Systems ""diffs"" (e.g. git diff, et.c.),Compiler output (e.g. compiler errors),Textual search (e.g. grep, find and replace),Structural navigation (e.g. find references, go to declaration),Copy/cut and paste code,Test suites (e.g. JUnit, test errors),Debugging tools",Simple Refactoring,,Version Control System,Compiler,Textual search,navigation,Test suite,Copy/cut and paste,Debugging,8,"The tool is effective,The tool saves time or effort,The tool is satisfying to use,The tool is trustworthy,The tool is predictable",The tool is effective,"The tool is effective,The tool saves time or effort,The tool is trustworthy,The tool is predictable","The tool is effective,The tool saves time or effort,The tool is trustworthy,The tool is predictable","The tool is effective,The tool saves time or effort,The tool is predictable","The tool is effective,The tool saves time or effort,The tool is satisfying to use,The tool is trustworthy,The tool is predictable","The tool is effective,The tool is trustworthy,The tool is predictable","The tool is effective,The tool saves time or effort,The tool is trustworthy,The tool is predictable","The tool is effective,The tool saves time or effort,The tool is trustworthy,The tool is predictable","I would: 
 

  Start by moving the implementation of isAnyNotEmpty into isAllEmpty.
  Validate this change by running testIsAllEmpty.
  If the test pass, I will remove testIsAnyNotEmpty and isAnyNotEmpty (e.g. by deleting or commenting out).
  Finally, I validate the changes by running tests.",Structure,,"Structural navigation (e.g. find references, go to declaration),Copy/cut and paste code,Test suite (e.g. test failures)",,This approach lets me make the change stepwise.,,"The tool does not saves time or effort (it is not reasonable in terms of time and effort required to use),The tool is not satisfying to use (it does not add value to the development process)",,"I would: 
 

  Start with creating a new empty class.
  Then I would move all the methods into the new class.
  I would fix any compiler errors (e.g. from any additional code).
  Then I would validate the change.",Local,,"Compiler output (e.g. compiler errors),Test suite (e.g. test failures),Copy/cut and paste code",,This approach lets me make the change stepwise.,,The tool does not saves time or effort (it is not reasonable in terms of time and effort required to use),,"I would: 
 

  Go through the file top-down and move the implementation from each forceAccess-method into the default method (i.e. for all 8 methods before addressing compiler errors).
  Go through the file top-down again, and remove all usages of forceAccess in the method body (e.g. by locating compiler errors)
  Then I would update all callers and tests (e.g. by relying on compiler errors)
  Finally, I would validate the change by running the tests.",Local,,"Test suite (e.g. test failures),Compiler output (e.g. compiler errors),Textual search (e.g. grep, find and replace),Structural navigation (e.g. find references, go to declaration),Copy/cut and paste code",,This approach lets me make the change stepwise.,,The tool is not predictable (it does not behave consistently and predictably each time you use it),,control,2,,,2,,,,,,,"Compiler output (e.g. compiler errors),Test suites (e.g. JUnit, test errors)",,75,"The tool does not saves time or effort (it is not reasonable in terms of time and effort required to use),The tool is not satisfying to use (it does not add value to the development process),The tool is not trustworthy (it does not feel safe or reliable to use),The tool is not predictable (it does not behave consistently and predictably each time you use it)",,"Compiler output (e.g. compiler errors),Test suites (e.g. JUnit, test errors)",,"The tool is effective,The tool saves time or effort,The tool is trustworthy,The tool is predictable",The tool is effective,"IntelliJ in particular tends to ask a lot of questions with poor defaults, which makes its refactorings both not satisfying and time-consuming.",more,no more or less,more,"Double-check that (a) the tool does what I want, and (b) what I want makes sense. (i.e., the usual verification/validation duo)",I have doubts on the usefulness of such a summary.,Being able to cancel a refactoring even after doing other stuff would make it less risky.,,
R_2qlLyn5YNGeoMUy,1/29/21 4:00,1/29/21 4:25,100,1504,TRUE,1/29/21 4:25,TRUE,22,22,10,"Eclipse,Visual Studio,VS Code",-99,3,5,"Other, please specify",CTO,Master's degree,45 - 54,Male,"Simple Refactoring tools (e.g. Rename, Extract Constant, Inline Method),Complex Refactoring tools (e.g. Move Method, Extract Class, Introduce Parameter),Version Control Systems ""diffs"" (e.g. git diff, et.c.),Compiler output (e.g. compiler errors),Textual search (e.g. grep, find and replace),Structural navigation (e.g. find references, go to declaration),Copy/cut and paste code,Debugging tools",Simple Refactoring,Complex Refactoring,Version Control System,Compiler,Textual search,navigation,,Copy/cut and paste,Debugging,8,,"The tool is effective,The tool saves time or effort,The tool is satisfying to use","The tool is effective,The tool is trustworthy","The tool is effective,The tool saves time or effort,The tool is trustworthy,The tool is predictable","The tool is effective,The tool saves time or effort,The tool is trustworthy,The tool is predictable","The tool is effective,The tool saves time or effort,The tool is satisfying to use,The tool is trustworthy,The tool is predictable","The tool is effective,The tool saves time or effort,The tool is trustworthy,The tool is predictable",,"The tool is effective,The tool saves time or effort,The tool is satisfying to use,The tool is trustworthy","I would: 
 

  Start by moving the implementation of isAnyNotEmpty into isAllEmpty.
  Validate this change by running testIsAllEmpty.
  If the test pass, I will remove testIsAnyNotEmpty and isAnyNotEmpty (e.g. by deleting or commenting out).
  Finally, I validate the changes by running tests.",Structure,,Copy/cut and paste code,,"None of the above, please specify..",Habit,"Other, please specify...",Not used to it. Should learn to use.,"I would: 
 

  Start with creating a new empty class.
  Then I would move all the methods into the new class.
  I would fix any compiler errors (e.g. from any additional code).
  Then I would validate the change.",Local,,"Compiler output (e.g. compiler errors),Test suite (e.g. test failures),Structural navigation (e.g. find references, go to declaration),Copy/cut and paste code",,This approach lets me rely on the compiler to show me the steps.,,"Other, please specify...",Not used to this tool. It does not save enough work for the cognitive load.,"I would: 
 

  Start by exploring the code structure and get an overview of callers and parameter references.
  Change one method and its callers at a time, attempting to resolve any compiler errors that appear, (e.g. by removing tests, or delete the default method or update code that references forceAccess, or consolidate the overloaded methods) before moving to the next method.
  Repeat for each method until all 8 methods are updated. 
  Validate the change by running tests.",Structure,,"Compiler output (e.g. compiler errors),Structural navigation (e.g. find references, go to declaration)",,"This approach lets me rely on the compiler to show me the steps.,This approach lets me make the change stepwise.",,"Other, please specify...",Not used to it,control,,1,,3,2,,,,,,Compiler output (e.g. compiler errors),,71,"Other, please specify...",Lack of experience,"Compiler output (e.g. compiler errors),Debugging tools",,,"The tool is effective,The tool saves time or effort,The tool is satisfying to use",,more,more,more,Just the first few times to gain confidence,Just the first few times to gain confidence,Just the first few times to gain confidence,,
R_Qal96XSg1aTo4E1,1/29/21 2:19,1/29/21 7:42,100,19357,TRUE,1/29/21 7:42,TRUE,14,4,4,"VS Code,Vim,Other, please specify",Atom,3,4,Programmer / Software Developer / Software Engineer,-99,Bachelor's degree,35 - 44,Male,"Version Control Systems ""diffs"" (e.g. git diff, et.c.),Compiler output (e.g. compiler errors),Textual search (e.g. grep, find and replace),Structural navigation (e.g. find references, go to declaration),Copy/cut and paste code,Test suites (e.g. JUnit, test errors),Debugging tools",,,Version Control System,Compiler,Textual search,navigation,Test suite,Copy/cut and paste,Debugging,7,"The tool saves time or effort,The tool is satisfying to use",,"The tool is effective,The tool saves time or effort,The tool is trustworthy,The tool is predictable",The tool is effective,"The tool is effective,The tool saves time or effort,The tool is satisfying to use,The tool is trustworthy,The tool is predictable","The tool is effective,The tool saves time or effort","The tool is effective,The tool saves time or effort,The tool is satisfying to use,The tool is trustworthy,The tool is predictable","The tool is effective,The tool is trustworthy,The tool is predictable","The tool is effective,The tool saves time or effort,The tool is satisfying to use,The tool is trustworthy","None of the above, please specify","None of the above, please specify","1. Delete isAllEmpty
 2. Delete testIsAnyNotEmpty
 3. Rename isAnyNotEmpty to isAllEmpty
 4. Invert all return-values in isAllEmpty
 5. Validate changes by running tests","Compiler output (e.g. compiler errors),Structural navigation (e.g. find references, go to declaration),Test suite (e.g. test failures),Other, please specify",Plain old textual manipulation of the source code.,"None of the above, please specify..",This approach makes me confident in the end results.,"The tool is not effective (it is not reasonable to locate and apply for a desired intent),The tool is not trustworthy (it does not feel safe or reliable to use),The tool is not predictable (it does not behave consistently and predictably each time you use it)",,"I would: 
 

  Start with extracting the code I want and any necessary additional code from one of the files into a new class.
  Then I would extract the code I want and any necessary additional code from the other file into the new class. 
  Then I would validate the change.",Structure,,"Version Control Systems ""diffs"" (e.g. git diff, et.c.),Structural navigation (e.g. find references, go to declaration),Copy/cut and paste code",,"This approach lets me rely on the compiler to show me the steps.,This approach lets me make the change stepwise.",,"The tool does not saves time or effort (it is not reasonable in terms of time and effort required to use),The tool is not trustworthy (it does not feel safe or reliable to use),The tool is not predictable (it does not behave consistently and predictably each time you use it)",,"I would: 
 

  Start by assigning the default value of false to all forceAccess parameters inside all the special-case methods, so the class only performs the default functionality.
  Then I would run the tests to locate the ones that break and fix them (e.g. by deleting the ones that are no longer necessary).
  Once all tests pass, I would remove the forceAccess functionality (that is now unused) from all 8 methods. 
  Then I validate the change using tests.
  Finally, I move all implementations into the default methods' bodies.
  Then I validate the change using tests.",Execute,,"Test suite (e.g. test failures),Compiler output (e.g. compiler errors),Textual search (e.g. grep, find and replace)",,This approach lets me make the change stepwise.,,"Other, please specify...","That tool is not available in my editor of choice, as well as even though it might have been sufficient in this case I wouldn't trust it in more complex scenarios and thus I most likely would still have gone for my controlled step-wise refactoring.","control,validating",,,,,3,,1,,3,,"Version Control Systems ""diffs"" (e.g. git diff, et.c.),Compiler output (e.g. compiler errors),Test suites (e.g. JUnit, test errors)",,90,"The tool is not effective (it is not reasonable to locate and apply for a desired intent),The tool does not saves time or effort (it is not reasonable in terms of time and effort required to use),The tool is not satisfying to use (it does not add value to the development process),The tool is not trustworthy (it does not feel safe or reliable to use),The tool is not predictable (it does not behave consistently and predictably each time you use it)",,"Version Control Systems ""diffs"" (e.g. git diff, et.c.),Compiler output (e.g. compiler errors),Test suites (e.g. JUnit, test errors)",,The tool saves time or effort,,,more,more,more,It would possibly increase my trust in the strategies of the tool in cases where I don't already use it because of distrust.,I would currently rely on my versioning system to handle review (and possibly rollback) of such changes. This would save me the steps of cleaning up my working dir first. It would be even better if it would give a preview of what it _would_ do before it applied it.,I would currently rely on my versioning system to handle rollback of such changes. This would save me the steps of cleaning up my working dir first.,"I'm not a big advocate for such tools, as I'm sure is quite clear from my answers. I rather rely on language-features and a flexible text-editor to do such changes in a controlled and adaptive manner.",
R_25Yhohf9gwhx1eu,1/29/21 9:46,1/29/21 10:07,100,1261,TRUE,1/29/21 10:07,TRUE,7,7,7,JetBrains IntelliJ,-99,4,1,Programmer / Software Developer / Software Engineer,-99,Master's degree,25 - 34,Male,"Simple Refactoring tools (e.g. Rename, Extract Constant, Inline Method),Complex Refactoring tools (e.g. Move Method, Extract Class, Introduce Parameter),Version Control Systems ""diffs"" (e.g. git diff, et.c.),Textual search (e.g. grep, find and replace),Structural navigation (e.g. find references, go to declaration),Copy/cut and paste code,Test suites (e.g. JUnit, test errors),Debugging tools",Simple Refactoring,Complex Refactoring,Version Control System,,Textual search,navigation,Test suite,Copy/cut and paste,Debugging,8,"The tool is effective,The tool saves time or effort,The tool is trustworthy,The tool is predictable","The tool is effective,The tool saves time or effort,The tool is trustworthy,The tool is predictable","The tool is effective,The tool is trustworthy,The tool is predictable",,"The tool is effective,The tool saves time or effort,The tool is trustworthy","The tool is effective,The tool saves time or effort,The tool is trustworthy,The tool is predictable","The tool is effective,The tool saves time or effort,The tool is trustworthy,The tool is predictable","The tool is trustworthy,The tool is predictable","The tool is satisfying to use,The tool is trustworthy,The tool is predictable","I would: 
 

  Start by moving the implementation of isAnyNotEmpty into isAllEmpty.
  Validate this change by running testIsAllEmpty.
  If the test pass, I will remove testIsAnyNotEmpty and isAnyNotEmpty (e.g. by deleting or commenting out).
  Finally, I validate the changes by running tests.",Structure,,"Compiler output (e.g. compiler errors),Copy/cut and paste code,Test suite (e.g. test failures)",,This approach lets me rely on the compiler to show me the steps.,,"The tool is not effective (it is not reasonable to locate and apply for a desired intent),The tool does not saves time or effort (it is not reasonable in terms of time and effort required to use)",,"I would: 
 

  Start with creating a new empty class.
  Then I would move all the methods into the new class.
  I would fix any compiler errors (e.g. from any additional code).
  Then I would validate the change.",Local,,"Compiler output (e.g. compiler errors),Test suite (e.g. test failures),Copy/cut and paste code",,"This approach lets me rely on the compiler to show me the steps.,This approach lets me keep the tests running so I can validate changes.",,"The tool does not saves time or effort (it is not reasonable in terms of time and effort required to use),The tool is not predictable (it does not behave consistently and predictably each time you use it)",,"I would: 
 

  Go through the file top-down and move the implementation from each forceAccess-method into the default method (i.e. for all 8 methods before addressing compiler errors).
  Go through the file top-down again, and remove all usages of forceAccess in the method body (e.g. by locating compiler errors)
  Then I would update all callers and tests (e.g. by relying on compiler errors)
  Finally, I would validate the change by running the tests.",Local,,"Test suite (e.g. test failures),Compiler output (e.g. compiler errors),Copy/cut and paste code",,This approach lets me rely on the compiler to show me the steps.,,"The tool is not effective (it is not reasonable to locate and apply for a desired intent),The tool does not saves time or effort (it is not reasonable in terms of time and effort required to use)",,control,1,,,,,,,,,,"Compiler output (e.g. compiler errors),Test suites (e.g. JUnit, test errors)",,80,"The tool is not effective (it is not reasonable to locate and apply for a desired intent),The tool does not saves time or effort (it is not reasonable in terms of time and effort required to use),The tool is not predictable (it does not behave consistently and predictably each time you use it)",,"Version Control Systems ""diffs"" (e.g. git diff, et.c.),Compiler output (e.g. compiler errors),Test suites (e.g. JUnit, test errors),Debugging tools",,"The tool is effective,The tool saves time or effort,The tool is trustworthy","The tool is effective,The tool is trustworthy",,no more or less,more,more,Solved by a summary,Simple manual verification can be done,East to revert,,
R_3gXi1h0nu8DZ7AS,2/2/21 12:42,2/2/21 14:25,100,6191,TRUE,2/2/21 14:25,TRUE,13,6,3,"JetBrains IntelliJ,Eclipse,Vim",-99,4,2,Programmer / Software Developer / Software Engineer,-99,Master's degree,35 - 44,Male,"Simple Refactoring tools (e.g. Rename, Extract Constant, Inline Method),Complex Refactoring tools (e.g. Move Method, Extract Class, Introduce Parameter),Version Control Systems ""diffs"" (e.g. git diff, et.c.),Compiler output (e.g. compiler errors),Textual search (e.g. grep, find and replace),Structural navigation (e.g. find references, go to declaration),Copy/cut and paste code,Test suites (e.g. JUnit, test errors),Debugging tools",Simple Refactoring,Complex Refactoring,Version Control System,Compiler,Textual search,navigation,Test suite,Copy/cut and paste,Debugging,9,"The tool is effective,The tool saves time or effort,The tool is satisfying to use,The tool is trustworthy,The tool is predictable","The tool is effective,The tool saves time or effort,The tool is satisfying to use,The tool is trustworthy,The tool is predictable","The tool is effective,The tool saves time or effort,The tool is satisfying to use,The tool is trustworthy,The tool is predictable","The tool is effective,The tool saves time or effort,The tool is satisfying to use,The tool is trustworthy,The tool is predictable","The tool is effective,The tool saves time or effort,The tool is satisfying to use,The tool is trustworthy,The tool is predictable","The tool is effective,The tool saves time or effort,The tool is satisfying to use,The tool is trustworthy,The tool is predictable","The tool is effective,The tool saves time or effort,The tool is satisfying to use,The tool is trustworthy,The tool is predictable","The tool is effective,The tool saves time or effort,The tool is satisfying to use,The tool is trustworthy,The tool is predictable","The tool is effective,The tool saves time or effort,The tool is satisfying to use,The tool is trustworthy,The tool is predictable","None of the above, please specify","None of the above, please specify","I would
 1. copy the name of isAllEmpty and paste it over the name of isAnyNotEmpty
 2. remove old isAllEmpty
 3. change the body of the remaining isAllEmpty to have correct behaviour
 4. remove tests with compiler errors because if the removed method
 5. run tests","Version Control Systems ""diffs"" (e.g. git diff, et.c.),Compiler output (e.g. compiler errors),Copy/cut and paste code",,"None of the above, please specify..","It is straight forward, and does not require much planning.","Other, please specify...",I never remember that it is there,"I would: 
 

  Start with creating a new empty class.
  Then I would move all the methods into the new class.
  I would fix any compiler errors (e.g. from any additional code).
  Then I would validate the change.",Local,,"Version Control Systems ""diffs"" (e.g. git diff, et.c.),Test suite (e.g. test failures),Copy/cut and paste code",,"None of the above, please specify..",This approach is easy,"The tool does not saves time or effort (it is not reasonable in terms of time and effort required to use),The tool is not satisfying to use (it does not add value to the development process),Other, please specify...","Since it was tests, I expect there were no explicit callers, so using Move method would not add any value, as copy/paste is a better solutions for that","None of the above, please specify","None of the above, please specify","I would probably first try to copy one method body into the non-forceAccess version, and remove the fuctionality. Then I would see how many callers there are with help from the compiler. If there are few, I would manually change them, and then make any failing tests pass. If there are many, I would revert the changes, remove the functinality, and then start using some tool like change method signature of the forceAccess version to remove the parameter, and then check all tests still pass. Lastly I would look through the diff at surrounding code at the call sites if there are any strange looking things I should consider. Then I would repeat the chosen process for the other methods.","Change Signature,Remove Parameter,Test suite (e.g. test failures),Version Control Systems ""diffs"" (e.g. git diff, et.c.),Compiler output (e.g. compiler errors),Copy/cut and paste code",,"None of the above, please specify..",The approach lets me discover if using specific tools is actually going to help.,,,"control,step",3,3,,,,,1,,,,"Version Control Systems ""diffs"" (e.g. git diff, et.c.),Compiler output (e.g. compiler errors),Test suites (e.g. JUnit, test errors)",,75,"Other, please specify...",I conserve brain power by taking it easy with the tools,"Version Control Systems ""diffs"" (e.g. git diff, et.c.),Compiler output (e.g. compiler errors),Test suites (e.g. JUnit, test errors)",,"The tool is effective,The tool saves time or effort,The tool is satisfying to use,The tool is trustworthy,The tool is predictable","The tool is effective,The tool saves time or effort,The tool is satisfying to use,The tool is trustworthy,The tool is predictable",,more,no more or less,more,"It would presumably allow me to reject some changes which I might not want. This might make sense, e.g. if I want to change some callers of a method, but not all, and perhaps introduce some special cases some places.",I already use version control for this,"Regular edits can't be reverted easily, so that would be a benefit to using the refactoring tool.",,
R_veQNRcDS1tkrzsl,1/5/21 8:01,2/4/21 8:38,100,2594197,TRUE,2/4/21 8:38,TRUE,8,3,3,"JetBrains IntelliJ,Eclipse,Visual Studio,VS Code,JetBrains Rider",-99,2,3,Programmer / Software Developer / Software Engineer,-99,Master's degree,25 - 34,Male,"Simple Refactoring tools (e.g. Rename, Extract Constant, Inline Method),Complex Refactoring tools (e.g. Move Method, Extract Class, Introduce Parameter),Version Control Systems ""diffs"" (e.g. git diff, et.c.),Compiler output (e.g. compiler errors),Structural navigation (e.g. find references, go to declaration),Copy/cut and paste code,Test suites (e.g. JUnit, test errors),Debugging tools",Simple Refactoring,Complex Refactoring,Version Control System,Compiler,,navigation,Test suite,Copy/cut and paste,Debugging,8,"The tool saves time or effort,The tool is trustworthy,The tool is predictable","The tool saves time or effort,The tool is trustworthy,The tool is predictable","The tool is effective,The tool is trustworthy,The tool is predictable","The tool saves time or effort,The tool is trustworthy","The tool is effective,The tool saves time or effort","The tool is effective,The tool saves time or effort,The tool is trustworthy,The tool is predictable","The tool is effective,The tool saves time or effort,The tool is predictable","The tool is effective,The tool saves time or effort,The tool is predictable","The tool is effective,The tool saves time or effort,The tool is trustworthy","I would: 
 

  Start by moving the implementation of isAnyNotEmpty into isAllEmpty.
  Validate this change by running testIsAllEmpty.
  If the test pass, I will remove testIsAnyNotEmpty and isAnyNotEmpty (e.g. by deleting or commenting out).
  Finally, I validate the changes by running tests.",Structure,,"Structural navigation (e.g. find references, go to declaration),Copy/cut and paste code,Test suite (e.g. test failures)",,"This approach lets me rely on the compiler to show me the steps.,This approach lets me make the change stepwise.",,"The tool does not saves time or effort (it is not reasonable in terms of time and effort required to use),The tool is not trustworthy (it does not feel safe or reliable to use)",,"I would: 
 

  Start with creating a new empty class.
  Then I would move all the methods into the new class.
  I would fix any compiler errors (e.g. from any additional code).
  Then I would validate the change.",Local,,"Extract Class,Structural navigation (e.g. find references, go to declaration),Copy/cut and paste code",,This approach lets me make the change stepwise.,,The tool does not saves time or effort (it is not reasonable in terms of time and effort required to use),,"I would: 
 

  Start by exploring the code structure and get an overview of callers and parameter references.
  Change one method and its callers at a time, attempting to resolve any compiler errors that appear, (e.g. by removing tests, or delete the default method or update code that references forceAccess, or consolidate the overloaded methods) before moving to the next method.
  Repeat for each method until all 8 methods are updated. 
  Validate the change by running tests.",Structure,,"Remove Parameter,Test suite (e.g. test failures),Structural navigation (e.g. find references, go to declaration)",,"This approach lets me rely on the compiler to show me the steps.,This approach lets me make the change stepwise.",,,,control,0,2,,3,1,3,,,,,"Version Control Systems ""diffs"" (e.g. git diff, et.c.),Compiler output (e.g. compiler errors),Test suites (e.g. JUnit, test errors)",,82,"The tool does not saves time or effort (it is not reasonable in terms of time and effort required to use),The tool is not trustworthy (it does not feel safe or reliable to use)",,"Version Control Systems ""diffs"" (e.g. git diff, et.c.),Compiler output (e.g. compiler errors),Test suites (e.g. JUnit, test errors)",,"The tool saves time or effort,The tool is trustworthy,The tool is predictable",The tool saves time or effort,,no more or less,more,more,I am afraid stepping through each change could create a false sense of security in the changes if I don't expend alertness on the steps presented. It is hard this way to understand the whole change when the context constantly changes.,A review after change showing only the refactoring change would increase my trust in the tool.,Being able to go back to change parameters of a refactoring would save time when the tool does something unexpected. This extra time can add up to the tool not saving any time if the tool repeatedly behaves in an unexpected manner.,,
R_7VE75wKdt1zio3n,2/8/21 5:43,2/8/21 18:50,100,47202,TRUE,2/8/21 18:50,TRUE,10,7,7,"Eclipse,Netbeans,Visual Studio",-99,4,2,Programmer / Software Developer / Software Engineer,-99,Bachelor's degree,25 - 34,Male,"Simple Refactoring tools (e.g. Rename, Extract Constant, Inline Method),Version Control Systems ""diffs"" (e.g. git diff, et.c.),Textual search (e.g. grep, find and replace),Structural navigation (e.g. find references, go to declaration),Copy/cut and paste code,Debugging tools",Simple Refactoring,,Version Control System,,Textual search,navigation,,Copy/cut and paste,Debugging,6,The tool is satisfying to use,The tool is predictable,The tool is trustworthy,The tool is effective,The tool saves time or effort,The tool is effective,The tool saves time or effort,The tool is trustworthy,The tool is satisfying to use,"I would: 
 

  Start by removing isAnyNotEmpty (e.g. by deleting or commenting out) to make compiler errors appear.
  Use the compiler errors to navigate to the code that is impacted (i.e., testIsAnyNotEmpy and isAllEmpty). 
  Fix compiler errors (e.g. by removing testIsAnyNotEmpty and implementing isAllEmpty by undoing and moving code).
  Validate the changes by running tests.",Local,,"Compiler output (e.g. compiler errors),Textual search (e.g. grep, find and replace),Structural navigation (e.g. find references, go to declaration),Test suite (e.g. test failures)",,This approach lets me rely on the compiler to show me the steps.,,"Other, please specify...",I didn't use it before,"I would: 
 

  Start with creating a new empty class.
  Then I would move all the methods into the new class.
  I would fix any compiler errors (e.g. from any additional code).
  Then I would validate the change.",Local,,"Compiler output (e.g. compiler errors),Textual search (e.g. grep, find and replace),Test suite (e.g. test failures),Copy/cut and paste code",,"This approach lets me rely on the compiler to show me the steps.,This approach lets me make the change stepwise.",,"Other, please specify...",I didn't use it before,"I would: 
 

  Start by assigning the default value of false to all forceAccess parameters inside all the special-case methods, so the class only performs the default functionality.
  Then I would run the tests to locate the ones that break and fix them (e.g. by deleting the ones that are no longer necessary).
  Once all tests pass, I would remove the forceAccess functionality (that is now unused) from all 8 methods. 
  Then I validate the change using tests.
  Finally, I move all implementations into the default methods' bodies.
  Then I validate the change using tests.",Execute,,"Change Signature,Remove Parameter,Test suite (e.g. test failures),Compiler output (e.g. compiler errors),Textual search (e.g. grep, find and replace),Structural navigation (e.g. find references, go to declaration)",,"This approach lets me rely on the compiler to show me the steps.,This approach lets me keep the tests running so I can validate changes.",,The tool is not trustworthy (it does not feel safe or reliable to use),,"validating,step",,2,4,1,,,,,,,"Version Control Systems ""diffs"" (e.g. git diff, et.c.),Compiler output (e.g. compiler errors),Structural navigation (e.g. find references, go to declaration)",,60,"The tool does not saves time or effort (it is not reasonable in terms of time and effort required to use),Other, please specify...",I didn't use it before,"Version Control Systems ""diffs"" (e.g. git diff, et.c.),Compiler output (e.g. compiler errors),Structural navigation (e.g. find references, go to declaration)",,The tool is satisfying to use,None,,less,more,no more or less,"It sometimes confuse me, becase there are similar options or tools","Because if I use a control version tool like GitHub Desktop or the bundled git diff tool, it makes more clearly the code changes","It could be very sensitive, but it is a acceptable option using git","The use of tools provided by integration utilities, such as application servers (eg Java) was missing","It was a unique survey and new in its format. I would like to see the results.
 

 P.S. Sorry for my poor english"
R_3lyN19nKeR7jm7q,2/10/21 1:46,2/10/21 2:27,100,2482,TRUE,2/10/21 2:27,TRUE,7,5,5,"JetBrains IntelliJ,Visual Studio,VS Code",-99,4,4,Technical Lead / Team Leader,-99,Master's degree,25 - 34,Male,"Simple Refactoring tools (e.g. Rename, Extract Constant, Inline Method),Complex Refactoring tools (e.g. Move Method, Extract Class, Introduce Parameter),Version Control Systems ""diffs"" (e.g. git diff, et.c.),Compiler output (e.g. compiler errors),Textual search (e.g. grep, find and replace),Structural navigation (e.g. find references, go to declaration),Copy/cut and paste code,Test suites (e.g. JUnit, test errors),Debugging tools",Simple Refactoring,Complex Refactoring,Version Control System,Compiler,Textual search,navigation,Test suite,Copy/cut and paste,Debugging,9,The tool saves time or effort,The tool is trustworthy,The tool is satisfying to use,The tool is trustworthy,The tool is effective,The tool is predictable,The tool is predictable,The tool is trustworthy,The tool is trustworthy,"I would: 
 

  Start by removing isAnyNotEmpty (e.g. by deleting or commenting out) to make compiler errors appear.
  Use the compiler errors to navigate to the code that is impacted (i.e., testIsAnyNotEmpy and isAllEmpty). 
  Fix compiler errors (e.g. by removing testIsAnyNotEmpty and implementing isAllEmpty by undoing and moving code).
  Validate the changes by running tests.",Local,,"Safe Delete,Change Signature,Version Control Systems ""diffs"" (e.g. git diff, et.c.),Compiler output (e.g. compiler errors),Structural navigation (e.g. find references, go to declaration)",,"This approach lets me rely on the compiler to show me the steps.,This approach lets me keep the tests running so I can validate changes.,This approach lets me automate as much as possible.",,The tool is not trustworthy (it does not feel safe or reliable to use),,"I would: 
 

  Start with extracting the code I want and any necessary additional code from one of the files into a new class.
  Then I would extract the code I want and any necessary additional code from the other file into the new class. 
  Then I would validate the change.",Structure,,"Move Method,Extract Method,Compiler output (e.g. compiler errors),Structural navigation (e.g. find references, go to declaration)",,"This approach lets me rely on the compiler to show me the steps.,This approach lets me automate as much as possible.,This approach lets me make the change stepwise.",,,,"I would: 
 

  Start by exploring the code structure and get an overview of callers and parameter references.
  Change one method and its callers at a time, attempting to resolve any compiler errors that appear, (e.g. by removing tests, or delete the default method or update code that references forceAccess, or consolidate the overloaded methods) before moving to the next method.
  Repeat for each method until all 8 methods are updated. 
  Validate the change by running tests.",Structure,,"Change Signature,Remove Parameter,Test suite (e.g. test failures),Compiler output (e.g. compiler errors),Structural navigation (e.g. find references, go to declaration)",,"This approach lets me rely on the compiler to show me the steps.,This approach lets me make the change stepwise.",,,,control,3,,,4,4,,,,,,"Version Control Systems ""diffs"" (e.g. git diff, et.c.),Compiler output (e.g. compiler errors),Test suites (e.g. JUnit, test errors)",,50,The tool is not trustworthy (it does not feel safe or reliable to use),,"Version Control Systems ""diffs"" (e.g. git diff, et.c.),Compiler output (e.g. compiler errors),Structural navigation (e.g. find references, go to declaration),Test suites (e.g. JUnit, test errors)",,The tool saves time or effort,The tool is trustworthy,,more,no more or less,more,"keep control of what's going on and avoid black magic approach that some IDEs have. Usually successfully, but not always. To see the changes step by step would improve understanding and reduce risk for errors","can get the same from version control, wouldn't really add value to me",good to be able to revert refactorings at any point in time,,the length of the survey is a bit much for the casual responder. Maybe to keep it at 15/20 mins would increase the audience.
R_2ZR0CQ6WvK3ySBf,2/12/21 11:26,2/12/21 11:36,100,618,TRUE,2/12/21 11:36,TRUE,3,3,3,"Eclipse,Visual Studio,VS Code,Other, please specify",Visual Studio 2019,2,3,Programmer / Software Developer / Software Engineer,-99,Bachelor's degree,18 - 24,Female,"Version Control Systems ""diffs"" (e.g. git diff, et.c.),Compiler output (e.g. compiler errors),Textual search (e.g. grep, find and replace),Structural navigation (e.g. find references, go to declaration),Test suites (e.g. JUnit, test errors)",,,Version Control System,Compiler,Textual search,navigation,Test suite,,,5,The tool is satisfying to use,The tool is trustworthy,The tool saves time or effort,The tool is trustworthy,The tool is trustworthy,The tool is effective,The tool is predictable,The tool saves time or effort,The tool is satisfying to use,"I would: 
 

  Start by moving the implementation of isAnyNotEmpty into isAllEmpty.
  Validate this change by running testIsAllEmpty.
  If the test pass, I will remove testIsAnyNotEmpty and isAnyNotEmpty (e.g. by deleting or commenting out).
  Finally, I validate the changes by running tests.",Structure,,"Version Control Systems ""diffs"" (e.g. git diff, et.c.),Copy/cut and paste code",,,,The tool is not trustworthy (it does not feel safe or reliable to use),,"I would: 
 

  Start with creating a new empty class.
  Then I would move all the methods into the new class.
  I would fix any compiler errors (e.g. from any additional code).
  Then I would validate the change.",Local,,"Move Method,Version Control Systems ""diffs"" (e.g. git diff, et.c.),Compiler output (e.g. compiler errors)",,,,,,"I would: 
 

  Start by exploring the code structure and get an overview of callers and parameter references.
  Change one method and its callers at a time, attempting to resolve any compiler errors that appear, (e.g. by removing tests, or delete the default method or update code that references forceAccess, or consolidate the overloaded methods) before moving to the next method.
  Repeat for each method until all 8 methods are updated. 
  Validate the change by running tests.",Structure,,"Move Method,Structural navigation (e.g. find references, go to declaration)",,,,,,"control,validating",,1,,2,4,,,,4,,"Version Control Systems ""diffs"" (e.g. git diff, et.c.),Compiler output (e.g. compiler errors),Test suites (e.g. JUnit, test errors),Debugging tools",,51,The tool is not effective (it is not reasonable to locate and apply for a desired intent),,"Version Control Systems ""diffs"" (e.g. git diff, et.c.),Compiler output (e.g. compiler errors),Test suites (e.g. JUnit, test errors),Debugging tools",,None,The tool is trustworthy,,more,more,no more or less,- So I do not change code unattentionally,To see if all code changes make sense,,,
R_qJGfZWsSEjtdMDT,2/4/21 7:20,2/16/21 14:41,100,1063245,TRUE,2/16/21 14:41,TRUE,6,6,6,JetBrains IntelliJ,-99,4,5,Programmer / Software Developer / Software Engineer,-99,Doctoral degree,25 - 34,Male,"Simple Refactoring tools (e.g. Rename, Extract Constant, Inline Method),Complex Refactoring tools (e.g. Move Method, Extract Class, Introduce Parameter),Version Control Systems ""diffs"" (e.g. git diff, et.c.),Compiler output (e.g. compiler errors),Textual search (e.g. grep, find and replace),Structural navigation (e.g. find references, go to declaration),Copy/cut and paste code,Test suites (e.g. JUnit, test errors),Debugging tools",Simple Refactoring,Complex Refactoring,Version Control System,Compiler,Textual search,navigation,Test suite,Copy/cut and paste,Debugging,9,"The tool is effective,The tool saves time or effort,The tool is satisfying to use,The tool is trustworthy","The tool is effective,The tool saves time or effort,The tool is satisfying to use","The tool is effective,The tool saves time or effort,The tool is satisfying to use,The tool is trustworthy,The tool is predictable","The tool is effective,The tool is trustworthy","The tool is trustworthy,The tool is predictable","The tool is effective,The tool saves time or effort,The tool is satisfying to use,The tool is trustworthy,The tool is predictable","The tool saves time or effort,The tool is trustworthy,The tool is predictable",The tool is effective,"The tool is effective,The tool is satisfying to use","I would: 
 

  Start by moving the implementation of isAnyNotEmpty into isAllEmpty.
  Validate this change by running testIsAllEmpty.
  If the test pass, I will remove testIsAnyNotEmpty and isAnyNotEmpty (e.g. by deleting or commenting out).
  Finally, I validate the changes by running tests.",Structure,,"Inline Method,Safe Delete",,This approach lets me automate as much as possible.,,,,"I would: 
 

  Start with extracting the code I want and any necessary additional code from one of the files into a new class.
  Then I would extract the code I want and any necessary additional code from the other file into the new class. 
  Then I would validate the change.",Structure,,"Extract Constant,Move Method",,This approach lets me automate as much as possible.,,,,"I would: 
 

  Start by assigning the default value of false to all forceAccess parameters inside all the special-case methods, so the class only performs the default functionality.
  Then I would run the tests to locate the ones that break and fix them (e.g. by deleting the ones that are no longer necessary).
  Once all tests pass, I would remove the forceAccess functionality (that is now unused) from all 8 methods. 
  Then I validate the change using tests.
  Finally, I move all implementations into the default methods' bodies.
  Then I validate the change using tests.",Execute,,Remove Parameter,,This approach lets me automate as much as possible.,,The tool is not satisfying to use (it does not add value to the development process),,na,4,,,,,,,,,,"Version Control Systems ""diffs"" (e.g. git diff, et.c.),Compiler output (e.g. compiler errors),Structural navigation (e.g. find references, go to declaration),Test suites (e.g. JUnit, test errors)",,28,"The tool is not effective (it is not reasonable to locate and apply for a desired intent),The tool is not predictable (it does not behave consistently and predictably each time you use it)",,"Version Control Systems ""diffs"" (e.g. git diff, et.c.),Compiler output (e.g. compiler errors)",,"The tool is effective,The tool saves time or effort,The tool is satisfying to use,The tool is trustworthy","The tool is effective,The tool saves time or effort,The tool is satisfying to use",,less,more,more,,,,,
R_d5zcfTJ6bBAyb3X,2/22/21 19:59,2/22/21 20:37,100,2268,TRUE,2/22/21 20:37,TRUE,20,20,10,"JetBrains IntelliJ,Vim,Other, please specify",notepad equivalents,5,1,Programmer / Software Developer / Software Engineer,-99,Bachelor's degree,35 - 44,Male,"Simple Refactoring tools (e.g. Rename, Extract Constant, Inline Method),Complex Refactoring tools (e.g. Move Method, Extract Class, Introduce Parameter),Version Control Systems ""diffs"" (e.g. git diff, et.c.),Compiler output (e.g. compiler errors),Textual search (e.g. grep, find and replace),Structural navigation (e.g. find references, go to declaration),Copy/cut and paste code,Test suites (e.g. JUnit, test errors),Debugging tools",Simple Refactoring,Complex Refactoring,Version Control System,Compiler,Textual search,navigation,Test suite,Copy/cut and paste,Debugging,9,"The tool is effective,The tool saves time or effort,The tool is satisfying to use,The tool is trustworthy,The tool is predictable",,"The tool is effective,The tool saves time or effort,The tool is satisfying to use,The tool is trustworthy,The tool is predictable","The tool is effective,The tool is predictable","The tool is effective,The tool saves time or effort,The tool is satisfying to use,The tool is trustworthy,The tool is predictable","The tool is effective,The tool saves time or effort,The tool is satisfying to use,The tool is trustworthy,The tool is predictable","The tool is effective,The tool saves time or effort,The tool is predictable","The tool is trustworthy,The tool is predictable","The tool is trustworthy,The tool is predictable","I would: 
 

  Start by removing isAnyNotEmpty (e.g. by deleting or commenting out) to make compiler errors appear.
  Use the compiler errors to navigate to the code that is impacted (i.e., testIsAnyNotEmpy and isAllEmpty). 
  Fix compiler errors (e.g. by removing testIsAnyNotEmpty and implementing isAllEmpty by undoing and moving code).
  Validate the changes by running tests.",Local,,"Copy/cut and paste code,Other, please specify","Cut the method.
 

 Click F2 to navigate to next compile error.
 

 Build the project. Press ""CTRL+N"" to navigate to any classes that are failing to compile.
 

 Click on Intellij's ""X related problems"" link if it comes up.",This approach lets me rely on the compiler to show me the steps.,,"Other, please specify...","I've only ever considered my current approach and it would only take a few minutes, so it's quick enough that I don't bother considering different approaches.","None of the above, please specify","None of the above, please specify","I'm not going to do the change, because it's not worth doing.  I'm going to leave the current mess.
 

 If someone else wants to clean this up, I'm not going to stop them.
 

 If I get annoyed enough about slow build times to do something about it, I might try to track down and delete all unit tests that are unlikely to ever fail, because they are not really serving any purpose at this point.","Other, please specify",Do nothing.,"None of the above, please specify..",The approach of doing nothing about these messy and redundant unit tests allows me to focus on things that actually matter for my company.,"Other, please specify...","Because I refuse to do anything about these stupid unit tests, I'm obviously not going to bother looking into ""Move Method"".","None of the above, please specify","None of the above, please specify","Interesting example since field.setAccessible() is deprecated !!! Big pain in the butt for me because I currently use this in some production code of my own (to allow multiple duplicate entries in a zip file my code must create):
 

  f = ZipOutputStream.class.getDeclaredField(""names"");
  f.setAccessible(true);
 

 Anyway, for this example I'm just going to grind through the refactor manually. Will probably use ""find -name \*.java | xargs grep setAccessible"" since that way I can find any stragglers I might be able to address outside of this one class. Once the ""find"" returns no hits, I know I'm good.
 

 Honestly, this kind of grinding-through-annoying-refactors is such a small percentage of my annual work that I just don't care if it takes 2 hours to do it instead of 20 minutes.","Version Control Systems ""diffs"" (e.g. git diff, et.c.),Compiler output (e.g. compiler errors),Textual search (e.g. grep, find and replace)",,This approach lets me make the change stepwise.,,-99,"Once I've made up my mind how I'm going to accomplish a mundane coding task like this, I don't bother considering other (possibly better) approaches because I just don't care.",na,2,,,,,,1,,1,,"Version Control Systems ""diffs"" (e.g. git diff, et.c.),Compiler output (e.g. compiler errors),I do not verify the change",,50,"Other, please specify...",I can't be bothered to learn about the IDE's features.,"Version Control Systems ""diffs"" (e.g. git diff, et.c.),Compiler output (e.g. compiler errors),Textual search (e.g. grep, find and replace),Structural navigation (e.g. find references, go to declaration),Test suites (e.g. JUnit, test errors)",,"The tool is effective,The tool saves time or effort,The tool is satisfying to use,The tool is trustworthy,The tool is predictable",,"Sometimes it tries to refactor non-Java files (like plain-text and properties files) unrelated to the change. But ""git diff -w HEAD"" always catches those and git makes it easy to back those out.",no more or less,more,more,I don't have any interest in stepping through a refactoring.,"This what I use ""git diff -w HEAD"" for !","Again I use ""git diff -w HEAD"" for this and I'm happy with that.
 

 (Git would be very annoying if I wanted to revert a portion of the changes within a *single* file, but I've never encountered that).","I think I might be quite a weird developer.  
 

 But it's working out for me. I made $300K CAD last year as a hands-on software engineer working on my own projects (self-employed) in Vancouver, BC.
 

 One of those projects currently makes $200K/year and it has no unit tests. None of the customers seem concerned at all. A big refactor is coming (currently it uses a shared persisted git scratch area guarded by ""synchronized"" --- I need to switch that to temporary per-pull-request sparse checkouts instead) but no IDE can help me with that.","Great survey. Of course classes full of nothing but static methods are not actually that common and also a lot easier to maintain compared to normal work, but they make things easier to think about in a survey, so I can see why you took that approach."
R_sp3bl3t3MRPNTBn,7/19/21 7:54,7/19/21 8:37,100,2562,TRUE,7/19/21 8:37,TRUE,23,5,2,"JetBrains IntelliJ,Eclipse",-99,4,1,Technical Lead / Team Leader,-99,Doctoral degree,45 - 54,Male,"Simple Refactoring tools (e.g. Rename, Extract Constant, Inline Method),Version Control Systems ""diffs"" (e.g. git diff, et.c.),Compiler output (e.g. compiler errors),Textual search (e.g. grep, find and replace),Structural navigation (e.g. find references, go to declaration),Copy/cut and paste code,Test suites (e.g. JUnit, test errors)",Simple Refactoring,,Version Control System,Compiler,Textual search,navigation,Test suite,Copy/cut and paste,,7,"The tool is effective,The tool saves time or effort,The tool is satisfying to use,The tool is trustworthy,The tool is predictable","The tool is effective,The tool saves time or effort,The tool is satisfying to use,The tool is trustworthy,The tool is predictable","The tool saves time or effort,The tool is predictable","The tool is effective,The tool saves time or effort,The tool is satisfying to use,The tool is trustworthy,The tool is predictable","The tool saves time or effort,The tool is predictable","The tool is effective,The tool saves time or effort,The tool is satisfying to use,The tool is trustworthy,The tool is predictable","The tool saves time or effort,The tool is predictable","The tool saves time or effort,The tool is satisfying to use,The tool is trustworthy,The tool is predictable",The tool is predictable,"I would: 
 

  Start by moving the implementation of isAnyNotEmpty into isAllEmpty.
  Validate this change by running testIsAllEmpty.
  If the test pass, I will remove testIsAnyNotEmpty and isAnyNotEmpty (e.g. by deleting or commenting out).
  Finally, I validate the changes by running tests.",Structure,,"Compiler output (e.g. compiler errors),Copy/cut and paste code,Test suite (e.g. test failures)",,"This approach lets me rely on the compiler to show me the steps.,This approach lets me keep the tests running so I can validate changes.",,"Other, please specify...",Didn't think of it,,,,,,,,,,,,,,,,,,,"control,step",2,2,,,,,,,,,"Version Control Systems ""diffs"" (e.g. git diff, et.c.),Compiler output (e.g. compiler errors),Test suites (e.g. JUnit, test errors)",,80,"The tool is not trustworthy (it does not feel safe or reliable to use),Other, please specify...",Just not in the habit of using complex refactoring,"Version Control Systems ""diffs"" (e.g. git diff, et.c.),Compiler output (e.g. compiler errors),Test suites (e.g. JUnit, test errors)",,"The tool is effective,The tool saves time or effort,The tool is satisfying to use,The tool is trustworthy,The tool is predictable","The tool is effective,The tool saves time or effort,The tool is predictable",,more,no more or less,more,"It makes me more comfortable that I know what changes are about to be made, and that I can see them step by step in order to understand them better. This alleviates the need to scan through hundreds of lines of code to visually validate a refactoring. If I can see the changes step by step, it's easier to understand them.","I've seen this feature before, but for some reason I don't feel inclined to read through hundreds of lines of code to validate it visually. I usually just hit ""OK"" to accept all the changes. As I mentioned in the previous question, being walked through the refactoring steps would make it more compelling to review the changes.","Sometimes you discover (much later) that the refactoring was bad, and you want to revert it. However, pressing Ctrl-Z, or reverting to a previous version from the source code repository will cause you to lose other changes that were actually good. I've encountered this problem numerous times in the past.","My general reluctance to using advanced refactoring is that I'm just not ""in the habit"" of using them. I use ""rename"" many times per day, but I barely use any of the other refactoring tools, simply because I haven't got into the habit of using them.
 

 What would be awesome is an IDE feature that pops-up to suggest refactoring tools that I could use to solve my current problem. That's pretty advanced, but it would get me into the habit of using more of them.","Thanks, it was fun.
 

 It feels a bit limiting to only be talking about about Java and C#. How about TypeScript or Scala, which are very similar (statically typed / compiled) languages that would have the same properties. They also have refactoring tools, although perhaps not as advanced as Java/C#."
R_1di6wPCg6YTKuXu,7/20/21 6:56,7/20/21 7:11,100,893,TRUE,7/20/21 7:11,TRUE,5,5,5,"Visual Studio,VS Code",-99,3,4,Programmer / Software Developer / Software Engineer,-99,Master's degree,25 - 34,Male,"Simple Refactoring tools (e.g. Rename, Extract Constant, Inline Method),Complex Refactoring tools (e.g. Move Method, Extract Class, Introduce Parameter),Version Control Systems ""diffs"" (e.g. git diff, et.c.),Compiler output (e.g. compiler errors),Structural navigation (e.g. find references, go to declaration),Copy/cut and paste code,Debugging tools",Simple Refactoring,Complex Refactoring,Version Control System,Compiler,,navigation,,Copy/cut and paste,Debugging,7,"The tool saves time or effort,The tool is trustworthy","The tool is effective,The tool saves time or effort,The tool is trustworthy","The tool is effective,The tool is satisfying to use,The tool is trustworthy,The tool is predictable",The tool is trustworthy,"The tool is trustworthy,The tool is predictable","The tool is effective,The tool saves time or effort,The tool is predictable","The tool saves time or effort,The tool is trustworthy",The tool is predictable,"The tool is trustworthy,The tool is predictable",,,,,,,,,,"I would: 
 

  Start with creating a new empty class.
  Then I would move all the methods into the new class.
  I would fix any compiler errors (e.g. from any additional code).
  Then I would validate the change.",Local,,"Rename,Move Method,Compiler output (e.g. compiler errors),Test suite (e.g. test failures)",,"This approach lets me keep the tests running so I can validate changes.,This approach lets me make the change stepwise.",,,,,,,,,,,"Other, please specify...",,"control,validating",,,,4,4,,,,,,"Compiler output (e.g. compiler errors),Test suites (e.g. JUnit, test errors)",,30,The tool does not saves time or effort (it is not reasonable in terms of time and effort required to use),,"Compiler output (e.g. compiler errors),Copy/cut and paste code,Test suites (e.g. JUnit, test errors)",,The tool saves time or effort,"The tool is effective,The tool is trustworthy",,no more or less,more,more,May be too time consuming if there are a lot of changes.,Saves time if presented in a meaningful way.,"This would allow me to ""soft-commit"" to a refactoring without having to resort to a source control tool in order to revert.",,
R_1RgncSvW68htUg9,7/20/21 11:55,7/20/21 13:10,100,4516,TRUE,7/20/21 13:10,TRUE,25,18,10,"Eclipse,Visual Studio,VS Code,Other, please specify",Gitpod,5,3,Technical Lead / Team Leader,-99,Master's degree,45 - 54,Male,"Simple Refactoring tools (e.g. Rename, Extract Constant, Inline Method),Complex Refactoring tools (e.g. Move Method, Extract Class, Introduce Parameter),Version Control Systems ""diffs"" (e.g. git diff, et.c.),Compiler output (e.g. compiler errors),Textual search (e.g. grep, find and replace),Structural navigation (e.g. find references, go to declaration),Test suites (e.g. JUnit, test errors)",Simple Refactoring,Complex Refactoring,Version Control System,Compiler,Textual search,navigation,Test suite,,,7,"The tool is effective,The tool saves time or effort,The tool is trustworthy,The tool is predictable","The tool is effective,The tool saves time or effort,The tool is satisfying to use,The tool is trustworthy,The tool is predictable","The tool is effective,The tool is trustworthy,The tool is predictable","The tool is trustworthy,The tool is predictable","The tool saves time or effort,The tool is trustworthy,The tool is predictable","The tool is effective,The tool saves time or effort,The tool is trustworthy,The tool is predictable","The tool is trustworthy,The tool is predictable","The tool is effective,The tool saves time or effort,The tool is trustworthy","The tool saves time or effort,The tool is satisfying to use,The tool is trustworthy","I would: 
 

  Start by moving the implementation of isAnyNotEmpty into isAllEmpty.
  Validate this change by running testIsAllEmpty.
  If the test pass, I will remove testIsAnyNotEmpty and isAnyNotEmpty (e.g. by deleting or commenting out).
  Finally, I validate the changes by running tests.",Structure,,"Inline Method,Safe Delete,Version Control Systems ""diffs"" (e.g. git diff, et.c.),Structural navigation (e.g. find references, go to declaration),Test suite (e.g. test failures)",,"This approach lets me keep the tests running so I can validate changes.,This approach lets me automate as much as possible.,This approach lets me make the change stepwise.",,,,,,,,,,,,,,,,,,,,,,validating,,5,,3,4,,,,4,,"Version Control Systems ""diffs"" (e.g. git diff, et.c.),Compiler output (e.g. compiler errors),Structural navigation (e.g. find references, go to declaration),Test suites (e.g. JUnit, test errors)",,20,The tool does not saves time or effort (it is not reasonable in terms of time and effort required to use),,"Version Control Systems ""diffs"" (e.g. git diff, et.c.),Compiler output (e.g. compiler errors),Structural navigation (e.g. find references, go to declaration),Copy/cut and paste code,Test suites (e.g. JUnit, test errors)",,"The tool is effective,The tool saves time or effort,The tool is trustworthy,The tool is predictable","The tool saves time or effort,The tool is trustworthy,The tool is predictable",,more,more,more,Verification,Verficatkon and getting trust to the tooj,For trying a tool out w/o fear,,
R_0UHff7WluIiaJ1L,7/22/21 11:33,7/22/21 11:52,100,1099,TRUE,7/22/21 11:52,TRUE,15,13,10,JetBrains IntelliJ,-99,5,,Programmer / Software Developer / Software Engineer,-99,Doctoral degree,35 - 44,Male,"Simple Refactoring tools (e.g. Rename, Extract Constant, Inline Method),Complex Refactoring tools (e.g. Move Method, Extract Class, Introduce Parameter),Version Control Systems ""diffs"" (e.g. git diff, et.c.),Compiler output (e.g. compiler errors),Textual search (e.g. grep, find and replace),Structural navigation (e.g. find references, go to declaration),Copy/cut and paste code,Test suites (e.g. JUnit, test errors),Debugging tools",Simple Refactoring,Complex Refactoring,Version Control System,Compiler,Textual search,navigation,Test suite,Copy/cut and paste,Debugging,9,"The tool is effective,The tool saves time or effort,The tool is satisfying to use,The tool is trustworthy,The tool is predictable","The tool is effective,The tool saves time or effort,The tool is satisfying to use,The tool is trustworthy,The tool is predictable","The tool is effective,The tool saves time or effort",The tool is effective,"The tool is effective,The tool saves time or effort","The tool is effective,The tool saves time or effort,The tool is satisfying to use,The tool is trustworthy,The tool is predictable","The tool is effective,The tool saves time or effort,The tool is trustworthy,The tool is predictable","The tool is effective,The tool saves time or effort","The tool is effective,The tool saves time or effort",,,,,,,,,,,,,,,,,,,"None of the above, please specify","None of the above, please specify","In IntelliJ:
 Analyze data flow to here on each forceAccess parameter, make sure it is false for all callers.
 Inline the forceAccess parameter, which will turn all the 3-arity calls into 2-arity calls
 Remove the old 2-arity method that now does nothing but call itself.
 Check the tests pass.","Remove Parameter,Test suite (e.g. test failures),Structural navigation (e.g. find references, go to declaration),Other, please specify",Analyze dataflow,This approach lets me automate as much as possible.,,,"Inline parameter does a similar thing, I think? I'm not sure if Change signature allows inlining the parameter or if it only removes it once it's unused in the body.",na,4,,,,,,,,,,"Version Control Systems ""diffs"" (e.g. git diff, et.c.),Test suites (e.g. JUnit, test errors)",,29,"The tool does not saves time or effort (it is not reasonable in terms of time and effort required to use),Other, please specify...",Not available as an automatic refactoring,"Version Control Systems ""diffs"" (e.g. git diff, et.c.),Test suites (e.g. JUnit, test errors)",,"The tool is effective,The tool saves time or effort,The tool is satisfying to use,The tool is trustworthy,The tool is predictable","The tool is effective,The tool saves time or effort,The tool is satisfying to use,The tool is trustworthy,The tool is predictable","Occasionally IntelliJ produces invalid code, especially around scoping with things like inner classes (e.g. if I Extract Method that calls a method on the outer class it doesn't always scope calls to the outer class correctly).
 

 Sometimes if I want to do something like add a method parameter, I want to check each caller manually and decide case-by-case what the parameter should be. In this case rather than Change Signature with a default parameter, I prefer to add a formal parameter, thus introducing a compiler error at every call site, then use the compiler errors as a todo list to go down and examine each case. Similarly sometimes with other things like removing a method.",more,no more or less,no more or less,Sometimes useful to check each site individually.,I'm not sure what this gains me that isn't equivalent to viewing the Git diffs before committing.,"I don't usually find that I need to rollback a refactoring unless I'm rolling back the whole change since the last commit anyway, which I can do with Git.","What I'd quite like for refactorings is an automated commit message that describes the refactoring. E.g. I rename a method and then can tick an auto-commit box that makes a commit with the message ""Renamed Foo.bar to Foo.quux"". Ditto for ""Inverted boolean parameter enabled in Foo.bar to disabled"", etc.","Nice survey, let me say what I wanted to say."
R_1er6oUqWWyOz8TP,8/11/21 17:35,8/11/21 18:28,100,3162,TRUE,8/11/21 18:28,TRUE,4,4,4,"Eclipse,Netbeans,VS Code",-99,4,1,Programmer / Software Developer / Software Engineer,-99,Bachelor's degree,25 - 34,Male,"Simple Refactoring tools (e.g. Rename, Extract Constant, Inline Method),Complex Refactoring tools (e.g. Move Method, Extract Class, Introduce Parameter),Version Control Systems ""diffs"" (e.g. git diff, et.c.),Compiler output (e.g. compiler errors),Structural navigation (e.g. find references, go to declaration),Copy/cut and paste code,Debugging tools",Simple Refactoring,Complex Refactoring,Version Control System,Compiler,,navigation,,Copy/cut and paste,Debugging,7,"The tool is effective,The tool saves time or effort,The tool is satisfying to use,The tool is predictable","The tool is effective,The tool is satisfying to use","The tool is satisfying to use,The tool is trustworthy,The tool is predictable","The tool is effective,The tool saves time or effort",,"The tool is effective,The tool saves time or effort,The tool is satisfying to use,The tool is trustworthy,The tool is predictable","The tool is effective,The tool saves time or effort,The tool is satisfying to use,The tool is predictable",,"The tool is effective,The tool saves time or effort,The tool is satisfying to use","I would: 
 

  I would start by introducing a temporary new method that isAnyNotEmpty delegate to.
  I would validate this change by running tests.
  Then I would replace the call to isAnyNotEmpty to the temporary method. (e.g. return !isAnyNotEmpty(..) is replaced by return !tempMethod(..))
  I would validate this change by running tests.
  If the tests pass, I would remove testIsAnyNotEmpty and isAnyNotEmpty (e.g. by deleting or commenting out)
  Then I would validate the change by running tests.
  If the tests pass, I would inline the temporary method into isAllEmpty and remove it.",Execute,,"Inline Method,Compiler output (e.g. compiler errors),Structural navigation (e.g. find references, go to declaration),Copy/cut and paste code,Test suite (e.g. test failures)",,"This approach lets me rely on the compiler to show me the steps.,This approach lets me keep the tests running so I can validate changes.,This approach lets me make the change stepwise.",,,,,,,,,,,,,,,,,,,,,,"validating,step",,4,3,,3,,,,,,"Version Control Systems ""diffs"" (e.g. git diff, et.c.),Compiler output (e.g. compiler errors),Structural navigation (e.g. find references, go to declaration),Test suites (e.g. JUnit, test errors)",,25,"The tool does not saves time or effort (it is not reasonable in terms of time and effort required to use),The tool is not trustworthy (it does not feel safe or reliable to use),The tool is not predictable (it does not behave consistently and predictably each time you use it)",,"Version Control Systems ""diffs"" (e.g. git diff, et.c.),Compiler output (e.g. compiler errors),Structural navigation (e.g. find references, go to declaration),Test suites (e.g. JUnit, test errors)",,"The tool is effective,The tool saves time or effort,The tool is satisfying to use,The tool is predictable",None,,more,more,more,I like to understand the tool step-by-step.,I like to see a preview of what is being affected.,Something can go wrong and I can reverse it.,,
R_3z6gNpvryNUKLbr,7/19/21 2:04,7/19/21 2:21,80,1021,FALSE,8/19/21 2:21,TRUE,20,20,10,"Visual Studio,VS Code,JetBrains Rider",-99,4,5,Programmer / Software Developer / Software Engineer,-99,Doctoral degree,45 - 54,Male,"Simple Refactoring tools (e.g. Rename, Extract Constant, Inline Method),Complex Refactoring tools (e.g. Move Method, Extract Class, Introduce Parameter),Version Control Systems ""diffs"" (e.g. git diff, et.c.),Compiler output (e.g. compiler errors),Textual search (e.g. grep, find and replace),Structural navigation (e.g. find references, go to declaration),Copy/cut and paste code,Test suites (e.g. JUnit, test errors),Debugging tools",Simple Refactoring,Complex Refactoring,Version Control System,Compiler,Textual search,navigation,Test suite,Copy/cut and paste,Debugging,9,"The tool saves time or effort,The tool is satisfying to use,The tool is trustworthy,The tool is predictable","The tool saves time or effort,The tool is satisfying to use","The tool is trustworthy,The tool is predictable",The tool is effective,"The tool is trustworthy,The tool is predictable","The tool saves time or effort,The tool is satisfying to use,The tool is trustworthy",The tool is predictable,"The tool is effective,The tool is trustworthy","The tool is trustworthy,The tool is predictable",,,,,,,,,,,,,,,,,,,"I would: 
 

  Start by exploring the code structure and get an overview of callers and parameter references.
  Change one method and its callers at a time, attempting to resolve any compiler errors that appear, (e.g. by removing tests, or delete the default method or update code that references forceAccess, or consolidate the overloaded methods) before moving to the next method.
  Repeat for each method until all 8 methods are updated. 
  Validate the change by running tests.",Structure,,"Inline Method,Test suite (e.g. test failures),Compiler output (e.g. compiler errors),Structural navigation (e.g. find references, go to declaration)",,"This approach lets me rely on the compiler to show me the steps.,This approach lets me keep the tests running so I can validate changes.,This approach lets me make the change stepwise.",,,,control,,,,4,2,3,,,,,"Version Control Systems ""diffs"" (e.g. git diff, et.c.),Compiler output (e.g. compiler errors),Test suites (e.g. JUnit, test errors)",,50,"The tool does not saves time or effort (it is not reasonable in terms of time and effort required to use),The tool is not trustworthy (it does not feel safe or reliable to use)",,"Version Control Systems ""diffs"" (e.g. git diff, et.c.),Compiler output (e.g. compiler errors),Test suites (e.g. JUnit, test errors)",,,,,,,,,,,,
R_3hgOIHp2uaIfsM2,2/8/21 6:46,2/8/21 6:58,58,728,FALSE,3/8/21 6:58,TRUE,28,6,6,"Netbeans,Visual Studio",-99,1,4,Project Manager,-99,High school graduate (high school diploma or equivalent including GED),45 - 54,Male,"Simple Refactoring tools (e.g. Rename, Extract Constant, Inline Method),Version Control Systems ""diffs"" (e.g. git diff, et.c.),Compiler output (e.g. compiler errors),Textual search (e.g. grep, find and replace),Structural navigation (e.g. find references, go to declaration),Test suites (e.g. JUnit, test errors),Debugging tools",Simple Refactoring,,Version Control System,Compiler,Textual search,navigation,Test suite,,Debugging,7,The tool saves time or effort,,"The tool is effective,The tool saves time or effort,The tool is trustworthy",The tool is trustworthy,"The tool is effective,The tool saves time or effort","The tool saves time or effort,The tool is satisfying to use",,The tool is effective,The tool is effective,"I would: 
 

  Start by removing isAnyNotEmpty (e.g. by deleting or commenting out) to make compiler errors appear.
  Use the compiler errors to navigate to the code that is impacted (i.e., testIsAnyNotEmpy and isAllEmpty). 
  Fix compiler errors (e.g. by removing testIsAnyNotEmpty and implementing isAllEmpty by undoing and moving code).
  Validate the changes by running tests.",Local,,"Version Control Systems ""diffs"" (e.g. git diff, et.c.),Compiler output (e.g. compiler errors),Test suite (e.g. test failures)",,This approach lets me rely on the compiler to show me the steps.,,The tool is not trustworthy (it does not feel safe or reliable to use),,"I would: 
 

  Start with extracting the code I want and any necessary additional code from one of the files into a new class.
  Then I would extract the code I want and any necessary additional code from the other file into the new class. 
  Then I would validate the change.",Structure,,"Version Control Systems ""diffs"" (e.g. git diff, et.c.),Textual search (e.g. grep, find and replace),Test suite (e.g. test failures),Structural navigation (e.g. find references, go to declaration),Copy/cut and paste code",,"This approach lets me rely on the compiler to show me the steps.,This approach lets me keep the tests running so I can validate changes.",,"The tool does not saves time or effort (it is not reasonable in terms of time and effort required to use),The tool is not trustworthy (it does not feel safe or reliable to use)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
R_2qEh6N2UWSdtoEb,1/29/21 2:04,1/29/21 2:17,51,746,FALSE,3/1/21 2:17,TRUE,24,24,10,JetBrains IntelliJ,-99,5,1,Technical Lead / Team Leader,-99,Some college or university but no degree,45 - 54,Male,"Simple Refactoring tools (e.g. Rename, Extract Constant, Inline Method),Complex Refactoring tools (e.g. Move Method, Extract Class, Introduce Parameter),Version Control Systems ""diffs"" (e.g. git diff, et.c.),Compiler output (e.g. compiler errors),Textual search (e.g. grep, find and replace),Structural navigation (e.g. find references, go to declaration),Copy/cut and paste code,Test suites (e.g. JUnit, test errors),Debugging tools",Simple Refactoring,Complex Refactoring,Version Control System,Compiler,Textual search,navigation,Test suite,Copy/cut and paste,Debugging,9,"The tool is effective,The tool saves time or effort,The tool is satisfying to use,The tool is trustworthy,The tool is predictable","The tool is effective,The tool saves time or effort,The tool is satisfying to use,The tool is trustworthy,The tool is predictable","The tool is effective,The tool saves time or effort,The tool is satisfying to use,The tool is trustworthy,The tool is predictable","The tool is effective,The tool saves time or effort,The tool is satisfying to use,The tool is trustworthy,The tool is predictable","The tool is effective,The tool saves time or effort,The tool is satisfying to use,The tool is trustworthy,The tool is predictable","The tool is effective,The tool saves time or effort,The tool is satisfying to use,The tool is trustworthy,The tool is predictable","The tool is effective,The tool saves time or effort,The tool is satisfying to use,The tool is trustworthy,The tool is predictable","The tool is effective,The tool saves time or effort,The tool is satisfying to use,The tool is trustworthy,The tool is predictable","The tool is effective,The tool saves time or effort,The tool is satisfying to use,The tool is trustworthy,The tool is predictable","I would: 
 

  I would start by introducing a temporary new method that isAnyNotEmpty delegate to.
  I would validate this change by running tests.
  Then I would replace the call to isAnyNotEmpty to the temporary method. (e.g. return !isAnyNotEmpty(..) is replaced by return !tempMethod(..))
  I would validate this change by running tests.
  If the tests pass, I would remove testIsAnyNotEmpty and isAnyNotEmpty (e.g. by deleting or commenting out)
  Then I would validate the change by running tests.
  If the tests pass, I would inline the temporary method into isAllEmpty and remove it.",Execute,,,,,,,,"I would: 
 

  Start with duplicating one of the classes (e.g. by copying and pasting).
  Then I would validate this change. 
  Then I would remove the appropriate code from the original and the duplicate, so they each contain only the right code elements.
  Then I would validate this change. 
  Once one class is finished, I would duplicate code from the other file into the new class (e.g. by copying and pasting).
  Then I would validate this change.
  Finally, I would remove code until all classes contain only the code I want and validate continously.",Execute,,"Safe Delete,Compiler output (e.g. compiler errors),Test suite (e.g. test failures),Structural navigation (e.g. find references, go to declaration),Copy/cut and paste code",,"This approach lets me automate as much as possible.,This approach lets me make the change stepwise.",,"The tool is not trustworthy (it does not feel safe or reliable to use),Other, please specify...","If I am interrupted in the refactoring process in any way, I can be more safe that the code will work. Sometimes move method does not do the correct thing, especially if the method that is moved is not well written (uses direct access/static access etc.)",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
R_2X553bIqpHy3h1n,1/18/21 6:32,1/18/21 7:48,48,4536,FALSE,2/18/21 7:48,TRUE,5,5,5,"Visual Studio,VS Code",-99,3,5,Technical Lead / Team Leader,-99,Master's degree,25 - 34,Male,"Simple Refactoring tools (e.g. Rename, Extract Constant, Inline Method),Complex Refactoring tools (e.g. Move Method, Extract Class, Introduce Parameter),Version Control Systems ""diffs"" (e.g. git diff, et.c.),Compiler output (e.g. compiler errors),Structural navigation (e.g. find references, go to declaration),Copy/cut and paste code,Test suites (e.g. JUnit, test errors),Debugging tools",Simple Refactoring,Complex Refactoring,Version Control System,Compiler,,navigation,Test suite,Copy/cut and paste,Debugging,8,"The tool is effective,The tool saves time or effort,The tool is satisfying to use,The tool is trustworthy,The tool is predictable","The tool is effective,The tool saves time or effort,The tool is trustworthy,The tool is predictable","The tool is effective,The tool is satisfying to use,The tool is trustworthy,The tool is predictable","The tool saves time or effort,The tool is satisfying to use,The tool is trustworthy,The tool is predictable","The tool is effective,The tool is trustworthy","The tool is effective,The tool saves time or effort,The tool is satisfying to use,The tool is trustworthy,The tool is predictable","The tool is effective,The tool saves time or effort,The tool is trustworthy","The tool saves time or effort,The tool is trustworthy,The tool is predictable","The tool is effective,The tool saves time or effort,The tool is satisfying to use,The tool is trustworthy,The tool is predictable",,,,,,,,,,"I would: 
 

  Start with extracting the code I want and any necessary additional code from one of the files into a new class.
  Then I would extract the code I want and any necessary additional code from the other file into the new class. 
  Then I would validate the change.",Structure,,"Move Method,Extract Class,Version Control Systems ""diffs"" (e.g. git diff, et.c.)",,This approach lets me make the change stepwise.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
R_2QiEsOiFPV8zlID,1/29/21 4:05,1/29/21 4:13,48,504,FALSE,3/1/21 4:14,TRUE,5,2,2,"Vim,EMACS",-99,4,1,System Administrator / Network Engineer,-99,Some college or university but no degree,25 - 34,Male,"Version Control Systems ""diffs"" (e.g. git diff, et.c.),Compiler output (e.g. compiler errors),Textual search (e.g. grep, find and replace),Test suites (e.g. JUnit, test errors)",,,Version Control System,Compiler,Textual search,,Test suite,,,4,The tool is satisfying to use,The tool is satisfying to use,The tool saves time or effort,The tool saves time or effort,The tool is effective,The tool is satisfying to use,The tool is satisfying to use,The tool saves time or effort,The tool is satisfying to use,"I would: 
 

  Start by moving the implementation of isAnyNotEmpty into isAllEmpty.
  Validate this change by running testIsAllEmpty.
  If the test pass, I will remove testIsAnyNotEmpty and isAnyNotEmpty (e.g. by deleting or commenting out).
  Finally, I validate the changes by running tests.",Structure,,"Version Control Systems ""diffs"" (e.g. git diff, et.c.),Textual search (e.g. grep, find and replace),Copy/cut and paste code",,This approach lets me rely on the compiler to show me the steps.,,The tool is not trustworthy (it does not feel safe or reliable to use),,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
R_rrlPioZ5L1aESJP,1/29/21 8:51,1/29/21 8:57,48,337,FALSE,3/1/21 8:57,TRUE,16,16,10,JetBrains IntelliJ,-99,5,2,Programmer / Software Developer / Software Engineer,-99,Master's degree,35 - 44,Male,"Simple Refactoring tools (e.g. Rename, Extract Constant, Inline Method),Complex Refactoring tools (e.g. Move Method, Extract Class, Introduce Parameter),Version Control Systems ""diffs"" (e.g. git diff, et.c.),Compiler output (e.g. compiler errors),Structural navigation (e.g. find references, go to declaration),Test suites (e.g. JUnit, test errors),Debugging tools",Simple Refactoring,Complex Refactoring,Version Control System,Compiler,,navigation,Test suite,,Debugging,7,"The tool is effective,The tool saves time or effort,The tool is predictable","The tool is effective,The tool saves time or effort,The tool is predictable","The tool is effective,The tool saves time or effort,The tool is predictable","The tool is effective,The tool saves time or effort,The tool is predictable","The tool is effective,The tool saves time or effort,The tool is predictable","The tool is effective,The tool saves time or effort,The tool is predictable","The tool is effective,The tool saves time or effort,The tool is predictable","The tool is effective,The tool saves time or effort,The tool is predictable","The tool is effective,The tool saves time or effort,The tool is predictable",,,,,,,,,,"I would: 
 

  Start with duplicating one of the classes (e.g. by copying and pasting).
  Then I would validate this change. 
  Then I would remove the appropriate code from the original and the duplicate, so they each contain only the right code elements.
  Then I would validate this change. 
  Once one class is finished, I would duplicate code from the other file into the new class (e.g. by copying and pasting).
  Then I would validate this change.
  Finally, I would remove code until all classes contain only the code I want and validate continously.",Execute,,"Compiler output (e.g. compiler errors),Test suite (e.g. test failures),Structural navigation (e.g. find references, go to declaration),Copy/cut and paste code",,"This approach lets me rely on the compiler to show me the steps.,This approach lets me keep the tests running so I can validate changes.,This approach lets me make the change stepwise.",,The tool does not saves time or effort (it is not reasonable in terms of time and effort required to use),,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
R_22FUzoxpvlRnAZR,1/29/21 4:02,1/29/21 4:08,46,372,FALSE,3/1/21 4:08,TRUE,10,10,10,"JetBrains IntelliJ,VS Code,JetBrains Rider",-99,2,5,Technical Lead / Team Leader,-99,Master's degree,25 - 34,Male,"Simple Refactoring tools (e.g. Rename, Extract Constant, Inline Method),Complex Refactoring tools (e.g. Move Method, Extract Class, Introduce Parameter),Compiler output (e.g. compiler errors),Structural navigation (e.g. find references, go to declaration),Test suites (e.g. JUnit, test errors),Debugging tools",Simple Refactoring,Complex Refactoring,,Compiler,,navigation,Test suite,,Debugging,6,,The tool is effective,,,,,,The tool is effective,The tool is effective,"I would: 
 

  I would start by introducing a temporary new method that isAnyNotEmpty delegate to.
  I would validate this change by running tests.
  Then I would replace the call to isAnyNotEmpty to the temporary method. (e.g. return !isAnyNotEmpty(..) is replaced by return !tempMethod(..))
  I would validate this change by running tests.
  If the tests pass, I would remove testIsAnyNotEmpty and isAnyNotEmpty (e.g. by deleting or commenting out)
  Then I would validate the change by running tests.
  If the tests pass, I would inline the temporary method into isAllEmpty and remove it.",Execute,,Rename,,"This approach lets me rely on the compiler to show me the steps.,This approach lets me keep the tests running so I can validate changes.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
R_eQY1z0zZNRzsROh,1/29/21 16:29,1/29/21 16:48,46,1127,FALSE,3/1/21 16:48,TRUE,12,12,10,"JetBrains IntelliJ,Visual Studio",-99,3,4,Programmer / Software Developer / Software Engineer,-99,Bachelor's degree,35 - 44,Male,"Simple Refactoring tools (e.g. Rename, Extract Constant, Inline Method),Complex Refactoring tools (e.g. Move Method, Extract Class, Introduce Parameter),Version Control Systems ""diffs"" (e.g. git diff, et.c.),Textual search (e.g. grep, find and replace),Structural navigation (e.g. find references, go to declaration),Copy/cut and paste code,Debugging tools",Simple Refactoring,Complex Refactoring,Version Control System,,Textual search,navigation,,Copy/cut and paste,Debugging,7,"The tool saves time or effort,The tool is satisfying to use,The tool is trustworthy",The tool saves time or effort,"The tool is effective,The tool is trustworthy","The tool is effective,The tool saves time or effort,The tool is satisfying to use,The tool is trustworthy,The tool is predictable","The tool saves time or effort,The tool is trustworthy,The tool is predictable","The tool is effective,The tool saves time or effort,The tool is predictable","The tool is effective,The tool saves time or effort,The tool is satisfying to use,The tool is trustworthy","The tool is effective,The tool is satisfying to use,The tool is trustworthy","The tool saves time or effort,The tool is satisfying to use,The tool is trustworthy,The tool is predictable","I would: 
 

  Start by removing isAnyNotEmpty (e.g. by deleting or commenting out) to make compiler errors appear.
  Use the compiler errors to navigate to the code that is impacted (i.e., testIsAnyNotEmpy and isAllEmpty). 
  Fix compiler errors (e.g. by removing testIsAnyNotEmpty and implementing isAllEmpty by undoing and moving code).
  Validate the changes by running tests.",Local,,"Compiler output (e.g. compiler errors),Test suite (e.g. test failures)",,"This approach lets me rely on the compiler to show me the steps.,This approach lets me make the change stepwise.",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
R_pAAZkr1IY0OuvUR,1/30/21 14:29,1/30/21 14:39,46,611,FALSE,3/2/21 14:39,TRUE,,,2,"JetBrains IntelliJ,Netbeans,Visual Studio,VS Code,Vim",-99,2,4,Programmer / Software Developer / Software Engineer,-99,Bachelor's degree,25 - 34,Male,"Simple Refactoring tools (e.g. Rename, Extract Constant, Inline Method),Complex Refactoring tools (e.g. Move Method, Extract Class, Introduce Parameter),Version Control Systems ""diffs"" (e.g. git diff, et.c.),Textual search (e.g. grep, find and replace),Structural navigation (e.g. find references, go to declaration),Copy/cut and paste code,Test suites (e.g. JUnit, test errors),Debugging tools",Simple Refactoring,Complex Refactoring,Version Control System,,Textual search,navigation,Test suite,Copy/cut and paste,Debugging,8,"The tool is trustworthy,The tool is predictable","The tool saves time or effort,The tool is satisfying to use","The tool is effective,The tool saves time or effort,The tool is satisfying to use,The tool is trustworthy,The tool is predictable",The tool is predictable,The tool saves time or effort,,The tool is effective,"The tool is effective,The tool saves time or effort,The tool is satisfying to use,The tool is trustworthy,The tool is predictable","The tool is effective,The tool is trustworthy",,,,,,,,,,"I would: 
 

  Start with creating a new empty class.
  Then I would move all the methods into the new class.
  I would fix any compiler errors (e.g. from any additional code).
  Then I would validate the change.",Local,,"Rename,Compiler output (e.g. compiler errors),Test suite (e.g. test failures),Copy/cut and paste code",,This approach lets me make the change stepwise.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
R_1QsB6Rz7DlVqkfi,1/4/21 5:07,1/4/21 5:13,40,366,FALSE,2/4/21 5:13,TRUE,11,7,6,"JetBrains IntelliJ,Visual Studio,VS Code,JetBrains Rider",-99,1,5,Programmer / Software Developer / Software Engineer,-99,Master's degree,35 - 44,Male,"Simple Refactoring tools (e.g. Rename, Extract Constant, Inline Method),Complex Refactoring tools (e.g. Move Method, Extract Class, Introduce Parameter),Version Control Systems ""diffs"" (e.g. git diff, et.c.),Compiler output (e.g. compiler errors),Textual search (e.g. grep, find and replace),Structural navigation (e.g. find references, go to declaration),Copy/cut and paste code,Test suites (e.g. JUnit, test errors)",Simple Refactoring,Complex Refactoring,Version Control System,Compiler,Textual search,navigation,Test suite,Copy/cut and paste,,8,,"The tool is effective,The tool saves time or effort,The tool is trustworthy","The tool is effective,The tool saves time or effort,The tool is satisfying to use,The tool is trustworthy,The tool is predictable",The tool is trustworthy,"The tool is effective,The tool saves time or effort","The tool is effective,The tool saves time or effort,The tool is satisfying to use,The tool is predictable","The tool is effective,The tool saves time or effort","The tool saves time or effort,The tool is satisfying to use,The tool is trustworthy,The tool is predictable",,"I would: 
 

  Start by removing isAnyNotEmpty (e.g. by deleting or commenting out) to make compiler errors appear.
  Use the compiler errors to navigate to the code that is impacted (i.e., testIsAnyNotEmpy and isAllEmpty). 
  Fix compiler errors (e.g. by removing testIsAnyNotEmpty and implementing isAllEmpty by undoing and moving code).
  Validate the changes by running tests.",Local,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
R_r0Crov8skpxRX0Z,1/29/21 3:13,1/29/21 3:22,40,534,FALSE,3/1/21 3:22,TRUE,6,6,6,"Visual Studio,VS Code",-99,1,3,Programmer / Software Developer / Software Engineer,-99,Bachelor's degree,25 - 34,Prefer not to answer,"Simple Refactoring tools (e.g. Rename, Extract Constant, Inline Method),Complex Refactoring tools (e.g. Move Method, Extract Class, Introduce Parameter),Version Control Systems ""diffs"" (e.g. git diff, et.c.),Textual search (e.g. grep, find and replace),Structural navigation (e.g. find references, go to declaration),Test suites (e.g. JUnit, test errors),Debugging tools",Simple Refactoring,Complex Refactoring,Version Control System,,Textual search,navigation,Test suite,,Debugging,7,"The tool is effective,The tool saves time or effort,The tool is satisfying to use,The tool is trustworthy","The tool is effective,The tool saves time or effort,The tool is satisfying to use,The tool is trustworthy,The tool is predictable","The tool saves time or effort,The tool is satisfying to use,The tool is trustworthy,The tool is predictable","The tool is effective,The tool saves time or effort,The tool is trustworthy","The tool is effective,The tool saves time or effort","The tool is effective,The tool saves time or effort",The tool saves time or effort,"The tool is effective,The tool saves time or effort,The tool is satisfying to use,The tool is trustworthy,The tool is predictable","The tool is satisfying to use,The tool is trustworthy",,,,,,,,,,,,,,,,,,,"I would: 
 

  Start by assigning the default value of false to all forceAccess parameters inside all the special-case methods, so the class only performs the default functionality.
  Then I would run the tests to locate the ones that break and fix them (e.g. by deleting the ones that are no longer necessary).
  Once all tests pass, I would remove the forceAccess functionality (that is now unused) from all 8 methods. 
  Then I validate the change using tests.
  Finally, I move all implementations into the default methods' bodies.
  Then I validate the change using tests.",Execute,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
R_1kUioyAqj82u6jO,1/25/21 22:55,1/25/21 22:57,37,147,FALSE,2/25/21 22:57,TRUE,20,20,10,"JetBrains IntelliJ,VS Code",-99,4,1,Technical Lead / Team Leader,-99,Bachelor's degree,35 - 44,Male,"Simple Refactoring tools (e.g. Rename, Extract Constant, Inline Method),Compiler output (e.g. compiler errors),Textual search (e.g. grep, find and replace),Copy/cut and paste code",Simple Refactoring,,,Compiler,Textual search,,,Copy/cut and paste,,4,"The tool saves time or effort,The tool is trustworthy","The tool is effective,The tool is trustworthy",The tool saves time or effort,The tool is trustworthy,"The tool saves time or effort,The tool is trustworthy",The tool saves time or effort,"The tool is effective,The tool is trustworthy",The tool saves time or effort,"The tool saves time or effort,The tool is trustworthy",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
R_ypR4qhbgU0SUZbP,1/26/21 1:32,1/26/21 1:34,37,131,FALSE,2/26/21 1:34,TRUE,8,9,2,"Netbeans,Visual Studio",-99,3,4,System Administrator / Network Engineer,-99,Some college or university but no degree,35 - 44,Male,"Simple Refactoring tools (e.g. Rename, Extract Constant, Inline Method),Debugging tools",Simple Refactoring,,,,,,,,Debugging,2,"The tool saves time or effort,The tool is trustworthy",,The tool is trustworthy,The tool is satisfying to use,The tool is predictable,The tool is trustworthy,The tool is trustworthy,"The tool saves time or effort,The tool is trustworthy","The tool saves time or effort,The tool is satisfying to use",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
R_rrV2EXnlDOwWtfH,1/29/21 2:18,1/29/21 4:30,37,7953,FALSE,3/1/21 4:30,TRUE,3,3,3,"JetBrains IntelliJ,JetBrains Rider",-99,3,2,Programmer / Software Developer / Software Engineer,-99,Bachelor's degree,35 - 44,Male,"Simple Refactoring tools (e.g. Rename, Extract Constant, Inline Method),Complex Refactoring tools (e.g. Move Method, Extract Class, Introduce Parameter),Version Control Systems ""diffs"" (e.g. git diff, et.c.),Compiler output (e.g. compiler errors),Textual search (e.g. grep, find and replace),Structural navigation (e.g. find references, go to declaration),Copy/cut and paste code,Test suites (e.g. JUnit, test errors),Debugging tools",Simple Refactoring,Complex Refactoring,Version Control System,Compiler,Textual search,navigation,Test suite,Copy/cut and paste,Debugging,9,"The tool is effective,The tool saves time or effort,The tool is satisfying to use,The tool is trustworthy,The tool is predictable","The tool is effective,The tool saves time or effort,The tool is satisfying to use,The tool is trustworthy,The tool is predictable","The tool is effective,The tool saves time or effort,The tool is satisfying to use,The tool is trustworthy,The tool is predictable","The tool is effective,The tool saves time or effort,The tool is satisfying to use,The tool is trustworthy,The tool is predictable","The tool is effective,The tool saves time or effort,The tool is satisfying to use,The tool is trustworthy,The tool is predictable","The tool is effective,The tool saves time or effort,The tool is satisfying to use,The tool is trustworthy,The tool is predictable","The tool is effective,The tool saves time or effort,The tool is satisfying to use,The tool is trustworthy,The tool is predictable","The tool is effective,The tool saves time or effort,The tool is satisfying to use,The tool is trustworthy,The tool is predictable","The tool is effective,The tool saves time or effort,The tool is satisfying to use,The tool is trustworthy,The tool is predictable",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
R_qC9hjVZatKQj2Gl,1/29/21 8:13,1/29/21 8:22,37,577,FALSE,3/1/21 8:22,TRUE,2,2,2,Visual Studio,-99,1,3,Programmer / Software Developer / Software Engineer,-99,Master's degree,25 - 34,Male,"Simple Refactoring tools (e.g. Rename, Extract Constant, Inline Method),Textual search (e.g. grep, find and replace),Structural navigation (e.g. find references, go to declaration),Copy/cut and paste code,Test suites (e.g. JUnit, test errors),Debugging tools",Simple Refactoring,,,,Textual search,navigation,Test suite,Copy/cut and paste,Debugging,6,"The tool is effective,The tool saves time or effort","The tool is effective,The tool saves time or effort",,"The tool is effective,The tool is trustworthy","The tool is effective,The tool saves time or effort","The tool is effective,The tool saves time or effort,The tool is satisfying to use,The tool is trustworthy","The tool is effective,The tool saves time or effort","The tool is effective,The tool saves time or effort,The tool is satisfying to use","The tool is effective,The tool saves time or effort,The tool is satisfying to use,The tool is trustworthy,The tool is predictable",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
R_DAFJcrWr0RiPSxP,1/30/21 11:39,1/30/21 11:48,37,538,FALSE,3/2/21 11:48,TRUE,3,3,3,"Visual Studio,VS Code",-99,2,4,Programmer / Software Developer / Software Engineer,-99,Some college or university but no degree,25 - 34,Male,"Simple Refactoring tools (e.g. Rename, Extract Constant, Inline Method),Complex Refactoring tools (e.g. Move Method, Extract Class, Introduce Parameter),Version Control Systems ""diffs"" (e.g. git diff, et.c.),Compiler output (e.g. compiler errors),Textual search (e.g. grep, find and replace),Structural navigation (e.g. find references, go to declaration),Copy/cut and paste code,Test suites (e.g. JUnit, test errors),Debugging tools",Simple Refactoring,Complex Refactoring,Version Control System,Compiler,Textual search,navigation,Test suite,Copy/cut and paste,Debugging,9,"The tool is effective,The tool saves time or effort,The tool is satisfying to use","The tool is effective,The tool saves time or effort","The tool is effective,The tool saves time or effort,The tool is trustworthy,The tool is predictable","The tool is effective,The tool saves time or effort,The tool is trustworthy,The tool is predictable","The tool is effective,The tool saves time or effort,The tool is predictable",The tool is effective,The tool saves time or effort,"The tool is effective,The tool saves time or effort,The tool is satisfying to use,The tool is trustworthy,The tool is predictable","The tool is effective,The tool saves time or effort,The tool is trustworthy,The tool is predictable",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
R_6SeAWzBFKdfGDwl,2/3/21 13:03,2/3/21 13:23,37,1143,FALSE,3/3/21 13:23,TRUE,7,7,7,"Visual Studio,VS Code,Other, please specify",JetBrains resharper,2,5,Researcher,-99,Doctoral degree,25 - 34,Male,"Simple Refactoring tools (e.g. Rename, Extract Constant, Inline Method),Complex Refactoring tools (e.g. Move Method, Extract Class, Introduce Parameter),Version Control Systems ""diffs"" (e.g. git diff, et.c.),Compiler output (e.g. compiler errors),Structural navigation (e.g. find references, go to declaration),Copy/cut and paste code",Simple Refactoring,Complex Refactoring,Version Control System,Compiler,,navigation,,Copy/cut and paste,,6,"The tool is trustworthy,The tool is predictable","The tool is trustworthy,The tool is predictable","The tool saves time or effort,The tool is satisfying to use,The tool is predictable","The tool is trustworthy,The tool is predictable",The tool is predictable,"The tool is trustworthy,The tool is predictable","The tool is trustworthy,The tool is predictable","The tool is trustworthy,The tool is predictable","The tool is effective,The tool saves time or effort,The tool is satisfying to use,The tool is trustworthy,The tool is predictable",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
R_3lSI2YVTnOgnU7H,2/5/21 12:53,2/7/21 12:43,37,172209,FALSE,3/7/21 12:43,TRUE,9,9,9,"Visual Studio,VS Code",-99,2,5,Programmer / Software Developer / Software Engineer,-99,Master's degree,25 - 34,Male,"Simple Refactoring tools (e.g. Rename, Extract Constant, Inline Method),Complex Refactoring tools (e.g. Move Method, Extract Class, Introduce Parameter),Version Control Systems ""diffs"" (e.g. git diff, et.c.),Compiler output (e.g. compiler errors),Textual search (e.g. grep, find and replace),Structural navigation (e.g. find references, go to declaration),Copy/cut and paste code,Debugging tools",Simple Refactoring,Complex Refactoring,Version Control System,Compiler,Textual search,navigation,,Copy/cut and paste,Debugging,8,"The tool is effective,The tool saves time or effort,The tool is satisfying to use","The tool is effective,The tool saves time or effort","The tool is effective,The tool saves time or effort,The tool is satisfying to use,The tool is trustworthy,The tool is predictable","The tool saves time or effort,The tool is trustworthy","The tool is effective,The tool saves time or effort,The tool is satisfying to use,The tool is trustworthy,The tool is predictable","The tool is effective,The tool saves time or effort,The tool is satisfying to use","The tool is effective,The tool saves time or effort,The tool is trustworthy,The tool is predictable",The tool saves time or effort,"The tool is effective,The tool saves time or effort",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
R_u2PdBGi3I71SAg1,2/5/21 3:20,2/8/21 3:39,37,260323,FALSE,3/8/21 3:39,TRUE,38,35,10,JetBrains IntelliJ,-99,5,3,Programmer / Software Developer / Software Engineer,-99,Master's degree,55 - 64,Male,"Simple Refactoring tools (e.g. Rename, Extract Constant, Inline Method),Complex Refactoring tools (e.g. Move Method, Extract Class, Introduce Parameter),Version Control Systems ""diffs"" (e.g. git diff, et.c.),Textual search (e.g. grep, find and replace),Structural navigation (e.g. find references, go to declaration),Copy/cut and paste code",Simple Refactoring,Complex Refactoring,Version Control System,,Textual search,navigation,,Copy/cut and paste,,6,"The tool is effective,The tool saves time or effort,The tool is satisfying to use,The tool is trustworthy,The tool is predictable","The tool is effective,The tool saves time or effort,The tool is satisfying to use,The tool is trustworthy,The tool is predictable","The tool saves time or effort,The tool is satisfying to use,The tool is trustworthy",,"The tool is effective,The tool saves time or effort","The tool is effective,The tool saves time or effort,The tool is satisfying to use,The tool is trustworthy,The tool is predictable","The tool is effective,The tool saves time or effort",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
R_31A9pLLDGxehXG8,2/8/21 5:39,2/8/21 5:43,37,235,FALSE,3/8/21 5:43,TRUE,7,7,7,"Netbeans,VS Code",-99,3,,Programmer / Software Developer / Software Engineer,-99,Bachelor's degree,25 - 34,Male,"Version Control Systems ""diffs"" (e.g. git diff, et.c.),Compiler output (e.g. compiler errors),Textual search (e.g. grep, find and replace),Structural navigation (e.g. find references, go to declaration),Copy/cut and paste code,Debugging tools",,,Version Control System,Compiler,Textual search,navigation,,Copy/cut and paste,Debugging,6,"The tool saves time or effort,The tool is satisfying to use",The tool saves time or effort,"The tool is effective,The tool saves time or effort,The tool is satisfying to use",The tool is effective,"The tool saves time or effort,The tool is satisfying to use","The tool saves time or effort,The tool is satisfying to use","The tool saves time or effort,The tool is satisfying to use","The tool is effective,The tool saves time or effort,The tool is satisfying to use","The tool is effective,The tool saves time or effort",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
R_1gcMogvXYFoPmhm,2/10/21 17:22,2/10/21 17:26,37,236,FALSE,3/10/21 17:26,TRUE,12,12,10,"JetBrains IntelliJ,Netbeans",-99,5,1,Programmer / Software Developer / Software Engineer,-99,Master's degree,35 - 44,Male,"Version Control Systems ""diffs"" (e.g. git diff, et.c.),Textual search (e.g. grep, find and replace),Debugging tools",,,Version Control System,,Textual search,,,,Debugging,3,The tool is effective,The tool is effective,The tool saves time or effort,The tool is effective,The tool is effective,The tool saves time or effort,The tool is effective,The tool is effective,The tool is effective,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
R_1pWg6DdJFWbSt4W,1/25/21 23:00,1/25/21 23:08,35,467,FALSE,2/25/21 23:08,TRUE,34,24,10,"JetBrains IntelliJ,Eclipse,Vim",-99,5,1,Programmer / Software Developer / Software Engineer,-99,Master's degree,45 - 54,Male,"Simple Refactoring tools (e.g. Rename, Extract Constant, Inline Method),Complex Refactoring tools (e.g. Move Method, Extract Class, Introduce Parameter),Version Control Systems ""diffs"" (e.g. git diff, et.c.),Compiler output (e.g. compiler errors),Textual search (e.g. grep, find and replace),Structural navigation (e.g. find references, go to declaration),Copy/cut and paste code,Test suites (e.g. JUnit, test errors),Debugging tools",Simple Refactoring,Complex Refactoring,Version Control System,Compiler,Textual search,navigation,Test suite,Copy/cut and paste,Debugging,9,"The tool is effective,The tool saves time or effort,The tool is satisfying to use,The tool is trustworthy,The tool is predictable","The tool is effective,The tool saves time or effort,The tool is satisfying to use,The tool is trustworthy,The tool is predictable","The tool is effective,The tool saves time or effort,The tool is trustworthy,The tool is predictable","The tool is effective,The tool is trustworthy,The tool is predictable","The tool is effective,The tool saves time or effort","The tool is effective,The tool saves time or effort,The tool is trustworthy,The tool is predictable","The tool is effective,The tool saves time or effort","The tool is effective,The tool saves time or effort,The tool is satisfying to use,The tool is trustworthy,The tool is predictable","The tool is effective,The tool saves time or effort,The tool is trustworthy,The tool is predictable",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
R_2YywV5aIC6PUmOM,1/29/21 6:02,1/29/21 6:11,35,555,FALSE,3/1/21 6:11,TRUE,15,15,10,"Visual Studio,VS Code",-99,2,5,Programmer / Software Developer / Software Engineer,-99,Master's degree,35 - 44,Male,"Simple Refactoring tools (e.g. Rename, Extract Constant, Inline Method),Complex Refactoring tools (e.g. Move Method, Extract Class, Introduce Parameter),Version Control Systems ""diffs"" (e.g. git diff, et.c.),Compiler output (e.g. compiler errors),Textual search (e.g. grep, find and replace),Structural navigation (e.g. find references, go to declaration),Copy/cut and paste code,Test suites (e.g. JUnit, test errors),Debugging tools",Simple Refactoring,Complex Refactoring,Version Control System,Compiler,Textual search,navigation,Test suite,Copy/cut and paste,Debugging,9,"The tool is effective,The tool saves time or effort,The tool is satisfying to use,The tool is trustworthy,The tool is predictable","The tool is effective,The tool saves time or effort,The tool is satisfying to use,The tool is trustworthy,The tool is predictable","The tool is effective,The tool is satisfying to use,The tool is trustworthy,The tool is predictable","The tool is effective,The tool is trustworthy,The tool is predictable","The tool is effective,The tool saves time or effort,The tool is satisfying to use,The tool is trustworthy,The tool is predictable","The tool is effective,The tool saves time or effort,The tool is satisfying to use,The tool is trustworthy,The tool is predictable","The tool is effective,The tool saves time or effort,The tool is satisfying to use,The tool is trustworthy,The tool is predictable","The tool is effective,The tool saves time or effort,The tool is satisfying to use,The tool is trustworthy,The tool is predictable","The tool is effective,The tool saves time or effort,The tool is satisfying to use,The tool is trustworthy,The tool is predictable",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
R_1Dp9lTeIAHOHxTa,2/2/21 7:04,2/2/21 21:02,35,50254,FALSE,3/2/21 21:02,TRUE,30,22,4,"Eclipse,Vim",-99,4,1,Researcher,-99,Master's degree,55 - 64,Male,"Simple Refactoring tools (e.g. Rename, Extract Constant, Inline Method),Version Control Systems ""diffs"" (e.g. git diff, et.c.),Compiler output (e.g. compiler errors),Textual search (e.g. grep, find and replace),Structural navigation (e.g. find references, go to declaration),Copy/cut and paste code,Test suites (e.g. JUnit, test errors),Debugging tools",Simple Refactoring,,Version Control System,Compiler,Textual search,navigation,Test suite,Copy/cut and paste,Debugging,8,"The tool is satisfying to use,The tool is predictable",,"The tool saves time or effort,The tool is satisfying to use","The tool is satisfying to use,The tool is trustworthy,The tool is predictable","The tool is effective,The tool saves time or effort,The tool is trustworthy,The tool is predictable","The tool is satisfying to use,The tool is trustworthy,The tool is predictable","The tool is effective,The tool saves time or effort","The tool saves time or effort,The tool is satisfying to use,The tool is trustworthy","The tool is effective,The tool saves time or effort,The tool is satisfying to use,The tool is trustworthy,The tool is predictable",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,12.11111111,9.622222222,6.043478261,,,3.347826087,2.954545455,,,,,,,41,31,42,36,37,42,34,37,37,11,43,40,44,43,43,44,44,43,44,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,89.13043478,67.39130435,91.30434783,78.26086957,80.43478261,91.30434783,73.91304348,80.43478261,80.43478261,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,