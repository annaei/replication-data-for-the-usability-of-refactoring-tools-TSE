Task 1 [05:15],,,Predictable (0),Effective (2),Satisfaction (1),Trust (0),Efficient (1),Vector: ,Invoke (0),Row Range, Predictable (0), Effective (0), Satisfaction (0), Trust (0), Efficient (1),Not Predictable (0),Not Effective (2),Not Satisfaction (1),Not Trust (0),Not Efficient (0),Refactorings
I am just going through the tests to see. What I am seeing is that I only want to test empty and blank. So this one tests trim but it tests all the other method that does other things. So we want another test class that only tests empty and blank. Just looking at what other tests there is. [05:59],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I will create a new test that tests empty and blank - just thinking of a good name for that. I will name it starting with stringutils because that is how everything else is named and end with test. [06:46],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I use cmd+o to look for methods in eclipse what is that here? [07:58],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
So they are all together but not in the same class.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Ok run tests.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
It gave me some errors. It looks like these symbols can not be resolved. I will just go back to my tests and see if I missed copying those. Yes it was the string that is being used.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I'm trying to find the compile error but I think I resolved it. [12:47],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Great. I will run my new test that I created. Cool.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Now I will just move all the empty not empty and blank ones together. [13:37],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Now I am just checking if these tests duplicate each other.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: For the sake of time I'll stop you: do you feel like you finished the task aside from cleaning up the code? [14:17],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Yes I think I am.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: Can you explain what you did in order to solve this task?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
The task said I had to move all the tests that tested empty and blank. And I had to move those to a new class that tested empty and blank. But now I am wondering if I read it wrong because I also moved the ones testing not empty and not blank and I might not need those now. [15:19],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: No this is right.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I just refactored it moved it to a new class.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: Can you explain a bit more about each step you took to do it?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"First I looked at the classes to see that the tests there test all scenarios I wanted to test. Then I checked the second class, moved the methods over and there were compiler issues and I looked into the previous tests to see why those compiler issues may be caused and found that there was one variable I had not copied over so I copied it over. Tested my tests again and it compiled and passed. Then it was just cleaning up everything. [16:31]",,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: Do you know of any tools that could have done any of those steps?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I don't know. I normally just write tests in eclipse and we normally just write tests so they test the one single class we want to test. I don't know if there are any tools that would do that for me.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: Is this how you would normally have solved this?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Yes but normally I would prefer it to write the test so one test would test a scenario in itself so I hope I would not write the kind of test that would need this refactoring. [17:23],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Normally I would write a new test that tested only a few things and copied it over.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: Is there any of the changes you made you are unsure if you got right?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Other than that what I would want to do now is maybe because it looks like these tests have a lot in common I may want to change the common lines to remove the duplication of code.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Task 2 [18:15],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
So we want to keep these [19:44],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
They are essentially the same method. If nothing is not blank then that means it is negative of all blank.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: Before you start changing the code can you explain how you plan to solve this taks?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
It looks like when we want to use isAnyNotBLank it means that all characters are blank in the string and if we used the negative of isAllBlank so not all blank that would solve the same purpose and same for isAllEmpty and isAnyNotEmpty. So if I remove these methods.. I could keep these methods and call the negative of isAllEmpty and isAllBlank but since we say that it bloats the API we don't even want to expose them to the API so we just want to find them and not use them. If any of the tests or any of the other classes are calling these methods we would go in and change them to not is all blank and not is all empty. [21:32],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I'm just going to remove it and then we can see at all the compiler errors and see what happens. [22:44],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: Are you expecting compile errors?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Yes if any tests are using it or any classes are calling it and I compile it there should be compile errors.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: And that is what I want?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Yes. Compiler errors and warnings are very good ways to change things because they will let you know what is happening. [23:24],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I'm going to run the tests. [23:35],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Are you kidding me.,,Run tests,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
It looks like isAllEmpty is calling isAnyNotEmpty but because I removed these I have to go back. Now I am undoing it so now I will move these lines to the other method so they won't have to call the negative of these but this can be just called there. I also have to reverse the logic because these are returning false and it should be true. [24:43],,Restart,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
First we will do isAnyNotBlank,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
isAllBlank is calling these [25:04],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Actually..,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: What did you do now deleted it and changed your mind?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Yes because because .. we want the API to expose this method. I am looking at the logic that was called by isAnyNotBlank and we keep isAllBlank. [25:46],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: You decided to keep the return statement?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I did not do anything to it - it's not there. It will remind me that I need to negate everything that I was doing. [25:57],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
If it is empty return false...,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
If empty we return true.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Is there a method called is blank? ok good.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
If it is empty I return true. That's pretty much all I want to do. [27:33],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
if empty return true. Why do I even want to do this [28:23],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
When I copied I missed removing the entire method which I should have done earlier which is why it did not compile.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
which is fine because we do not want to test isAnyNotblank [29:24],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Because .. we could test it but we would have to change the assertions here which we can do later.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Right now I just want to see if my isAllBlank works. [29:49],,run tests,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
looks like it failed at 126. I did not put a null check so that is why it failed. [30:26],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Now I add a null check to see if it is null or empty and return true and test it again [30:36],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Huh. Maybe Array utils is empty is not returning what I thought it was. Let's see. [31:37],,run tests,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
It should ideally work. Can I debug my test?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: Yes,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
It looks like css is not null but all the elements of css is null. So I will change this..,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: What are you doing now?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I am going to look at the logic that was being used before.,,undo,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I removed this logic so I will just put it back.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: So you used undo?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Yes. Which is not the best way to do this but it is the only way I could think of. [33:34],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
if css is null or this is empty..,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
[35:12] cool looks like this works. I will do the same for isEmptyTest. [35:24],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Now I did that for isBlank so I do the same thing for isAllEmpty,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
..we don't want this.. actually.. Hm.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I am thinking if I can reuse any of the methods that already exist for this but I think it is ok for now to keep it like this. [36:24],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
It looks like a lot of code is being reused I could just call a method here to do that. We will do that later. [36:56],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
if the array is null or empty we return true if ..,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
if the array is null or empty we return null otherwise we go through the elements and if one of the elements is not empty we return false. [37:30],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
There is a compile error somewhere [37:33],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I'll run my test again.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
this test again ...,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Now let us see if it works.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: do you think it will?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I think it will work. [38:14],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: When you were going through the body of the body what were you comparing the functionality with?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I was just going through the logic and comparing it to what we should do.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
StringUtilsTest is still there.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I think I'll have to.. is it public/private? It is package we should be good. [40:33],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I will add an import for that. [41:17],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: *help with the accidental key mistake* [43:51],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Looks like this worked. [45:12],,run tests,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Now I will go there. [45:24],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
[45:34] Instead of the false i would say true,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: In the interest of time I will stop you. Can you explain how you would finish the exercise?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I don't know if we really need these tests but if I were to change these tests I would put a not here and test the isAllBlank method and I would do the same for this test and I think we are good with this for now. [46:17],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: What source code changes did you do in order to complete this task? [46:27],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I had to remove this method. I had to make sure that these methos were still there. So I removed these methods so then when I went to look at isAllBlank isAllEmpty methods it looks like they were using the isAnyNot methods which in retrospect I should have looked at all our methods first before starting to change the code. So I went and looked at the code that isAnyNotBlank and isAnyNotEmpty was using and changed the code so it would return the right values for isAllBLank and isAllEmpty and removed these methods. And changed the tests so they would run right and produce the right output [47:14],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: did you do any repeptitive changes?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Yes unfortunately because I did not look at the isAllBlank and isAllEmpty methods earlier which is something I normally would have but I didn't this time. [47:35],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: So what were the repetitive changes you did?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I removed the isAnyNotBlank and isAnyNotEmpty methods and because I wanted to take a look at the code they were using I had to put the back again to look at their code and then delete them again. [48:03],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: Do you know of any tools that could have helped you with any of the steps you took during this task?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Normally I do command click and it navigates to methods.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: That's for navigation?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Yes to quickly navigate to methods and see what is happening and what's not.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
In this case I could not do that but I think that is just eclipse versus intellij. I usually use all eclipse functionality not any other tools.[48:43],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: Do you know of any eclipse functionality that could have automated any of the code changes you made?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I don't know.. there is refactoring functionality in Eclipse that helps you do many things like when you change the name of a class it will change it in any of the classes across the project so if you change the name of a method or variable it will that but not the exact thing I was doing no. [49:22],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: You used air quotes for your refactoring menu. Why was that?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
It is not really ... it helps a lot so we don't have to through all the classes look at compiler issues and change the names but it's only for class names method names and variable names not for actual refactorings where you have to like move and change things. [49:46],"Reflection
Not Effective (“not for actual refactorings where you have to like move and change things”)",,0,1,0,0,0,"<0,1,0,0,0>",0,107-107,0,0,0,0,0,0,1,0,0,0,
I: is there any of the changes you make that you are unsure if you got right?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
No not this time becuase I had tests that tested my code. As you mean that the tests test all the functionality I think I got it right.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: So you would be relying on that?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I would be relying on test a lot. [50:13] I like to write tests on whatever code I write or have tests that ensure for me that things break.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: Is this how you would've normally solved this task? [50:33],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
No normally I would have done it more efficiently like reading all four methods and doing that but .. If I go to isAllBlank and then go see what it actually does before .. sometimes I tend to start working too fast. It depends on what I am doing at that point. Sometimes I tend to go through all the methods and see what is happening there and sometimes I just start on the task and figure it out on the way. [51:11],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: In this case you just started doing the task and then you had to roll back. Does that happen as part of you workflow? [51:21],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Not a lot of the time no. A lot of the time when you are familiar with the code base you know how things work so you would not expect somethign like this happening. But I did not know the code base here I was not that familiar so I did not know that these methods isAllBlank would be calling isAnyNotBlank which I might have known .. but I .. yeah. I think I am too used to knowing the code base and expecting how things are supposed to be. [52:11],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Task 3. [52:15],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"*reading task* 
 *reading code* [53:14]",,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
It looks like the callers of fieldUtils API are allowed to change the scoping restrictions by using this boolean flag forceaccess so they can set it whenever they call the methods of the field API they can use the forceaccess argument to break the scoping restrictions. What we want to do is to not allow users to force access. So we want to remove it from the methods that are called. We do want to change all the functionality so force access is false in all cases. [54:16],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Now I am looking at this. It looks like whenever the field method is called the method with the two arguments sets the forceaccess to false in all cases which is essentially what we want. When this getField is called which are both public. If this one with three arguments is called it checks the forceaccess. [55:11],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Oh it looks like that happens in all cases. [55:23],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
That happens in a lot of cases. What I would like to do is either make all of these methods that are being called with forceaccess private so they can only be called by these methods or I could just remove these methods and put them in here. But I think first I want to just make them private and see what breaks. [56:04],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: In order to solve the task I would prefer that you do not only make them private.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Ok.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: When you are setting them to private now and seeing what breaks is that part of your workflow?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Yes it looks like these APIs if they are all private and they were called by other classes and tests and other customers and if we know what breaks we know what effects it has. For me it is very suspicious when I make changes and things not break because it means that that code is not used in places where it should be. [56:58],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
It is always good to see what breaks. [57:04],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
We will start by getField method. I am trying to see where the forceAccess is being used. [57:20],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
It looks like ... [57:32],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
This part is something we don't want. I will just go on and see that it is the same..,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I am just reading now. This time I am reading.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
It looks like in all the cases what it is doing is - oh in this case it .. getDeclaredField. It looks like in all of these cases it is just setting the field to accessible whenever we want the forceaccess to be true. Let us see. For now I am going to comment this out. [1:00:24],,Manual Inline,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: Why do you comment it out instead of deleting it?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I want to be able to read it later without redoing the things.[1:00:34],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Now I am ok with not calling this entire thing we don't want because it is only setting the accessibility to true. [1:00:56],,Mistake,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
This only calls it with false we don't need that.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
As expected things break. [1:01:34],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
readField.. we don't want this.. where is it using this.. get field. Just going to go one by one wherever things are being called. And keep changing them. [1:02:20],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
ReadField are going to call the regular getField and the regular readField ... [1:02:49],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Right now I want to remove this we'll go and see what readField does. [1:03:08],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Doesn't do a lot. [1:03:37],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I made this one private because we also want the forceaccess to be set to false wherever we can. [1:04:08],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
What I wanted to do here was find where readField was being called. [1:04:22],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Find usages [1:04:40],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
In this case we actually do not need this method. [1:07:24],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I am doing a mix of what I earlier told you. I make some of the methods private depending on whether some of the methods are being called with false or not because we also want the default functionality of forceaccess to be there so if something is called with false I will just make the methods private so they will not be called by external APIs and in cases we were actually using forceaccess to change the modifier I am removing the code and moving them to the public methods. [1:09:12],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
In this case since forceacces is false we are good. [1:09:39],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I'll go through the class and remove commented out code and see if I have removed all the usages of force access. While doing things like this if there are things being done conditionally.. like in this case [1:10:34],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
In readField I am not sure we need this. I will move it up here and delete this. If forceaccess is false this will not be called and we don't need this. [1:11:10],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Something happened here. [1:11:18],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Ah there is another readField-method [1:11:36],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Oh target and field name. [1:12:00],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
remove the argument where this is being called.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
So this is a public method that does not expose.. this is a private method that uses getDeclaredField. If we don't force we want to return null that is ok. In this case I think we are good. ReadDeclaredField we are using forceaccess is false which is ok. [1:14:12],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Do we really need to though? [1:14:25] It is still ok for it to be here we are calling it with false..same with writefield. [1:14:40],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I am going to look at the tests to see what they are trying to test. [1:15:08],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Right now I am just going to compile and build it and see.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Ok... so since we are allowing field forceaccess so none of these will be called so we don't need these tests because forceaccess is .. it was forceaccess right.. we don't have it any more. [1:15:57],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
again these tests are testing that they can get the field when forceaccess is true. We don't want these tests when .. hmm do we? [1:16:27] I'm just going to try.. because it is possible that this might .. actually it is not going to work as long as there are still compile errors. [1:16:53],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: What are there compile errors now?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Because I made this API either private or remove them. That is why the compiler don't find these methods. I need to change to either call the methods that don't allow you to force access or we will remove them. Again this is testing that we can get the class while forceaccess is true and we don't want to get the class while forceaccess is true. TestGetField.. [1:17:40],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
These tests we don't need them because we have the same tests that get illegalArgumentException without forceaccess so we don't need these. [1:18:29],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I would like to just have one test that actually test that we can not access - that the modifier is set to false for the classes we don't have forceaccess but .. [1:18:55],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I want to have a test to test all these methods - we want the default forceaccess to be false so if there is a method that sets a field to accessible that we get an exception while trying to access that. [1:19:27],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Whenever the field or classname is null we would get an illegal argument exception so in these cases we will test our illegal argumentexception. It looks like these ones are testing the same without force access so we don't need these. [1:20:46],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
We would still run these tests without illegal access... let me change this. [1:21:15],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
In this case it looks like I did not change this [1:23:37],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: How did you notice that?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I had to go and - I was trying to look at this and while it was giving me a compiler error it did not give me a compiler error for this.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: So you were expecting an error but it wasn't there?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Yes.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
So we do not want the forceaccess.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
It lets us write to a field once a forceaccess is true but I don't know if we should allow them to do that. [1:24:48],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I don't know if we want to test this method because it is writing after setting the access to true and we do not want to set the access. but this method is something we want. WriteNamedField is something we want but not writeNamedField with forceaccess. [1:25:58],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Same with this one writeFieldForceaccess we do not want but writeField we want. [1:26:21],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Looks like there are no compile errors. I will run the tests and see what fails and then we will figure out. [1:26:34],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: What happened?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Some tests failed so I will go through the tests and see what happens. [1:26:56],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: In order to make sure that we finish on time I will stop you. Can you explain how you would finish this task? [1:27:17],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Going through the tests now making sure that all my methods are being tested resolving the failures and after resolving the failures looking at the tests and making sure that they test the functionality that I want. [1:27:38],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: So you are finished with the class itself you are just working on the tests?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Yes. I might have made some changes that makes the tests fail which I must go back but for now yes I am done with the class.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: What did you do in order to solve this task? [1:28:10],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Like I said earlier I went with two strategies. We wanted to always have forceaccess set to false. In a lot of cases where the only thing we were doing with forceaccess was literally changing the visibility and that is something we don't want so in those cases I removed the methods that were allowing the forceaccess. In some cases we were doing some small tests with forceaccess where it was changing things. [1:29:04],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Like here it was also checking the accessibility of the field. In those cases I made the methods private so they could only be called by methods inside the class itself and changed it so that whoever the caller was was always calling it with forceaccess set to false. Whenever forceaccess was set to false it would set to false. In those cases I did not want to remove the forceaccess parameter. In other cases it would be,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
ok to remove it and have the methods without the forceaccess parameter. [1:30:07],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Then I went to the tests and checked what the tests were calling. If a test was testing only something related to forceaccess I removed them because we are not exposing those APIs any more and in the other case I ran them to see what breaks. [1:30:26],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: Can you elaborate on the difference between the methods you chose to remove or keep private. What informed that decision? [1:30:37],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
For example in the getfield ethod when forceaccess was true the only thing we were doing was changing the accessiblity. We don't want to change the accessibility so in those cases if the only thing we were doing was that - which would break the scoping restrictions - in those cases I removed the parameter. But in those cases where we were checking for forceaccess for something else I chose to keep them because it is possibe that we want to test something else. This task for me was to not allow the users to break the accessibility. In those cases I removed the forceaccess parameter. But in the cases where we were not really changing the accessibility in those cases I thought it would be ok to keep the method and make it private. [1:31:50],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
In the declaredField where it was checking the accessiblity and returning null I thought it would be ok to - maybe not.. becaue now it is setting acessibility. So in this case also I would remove it. [1:32:28],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: When you remove these methods how did you go about doing that? [1:32:38],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I started from the top and went to the callers and callees of these methods. Let's look at the top getField method was calling another getField method with the access parameter so then I changed them. but when I saw that the method was calling another method I would go to that method and look at all the callers and callees of that method essentially going down the hierarchy of the callers of that method. In that way I hoped to look at all the methods. But when I went to the test class it confirmed that there were some methods I should have changed that I didn't so I went back and changed them. [1:33:42],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: So that was your way of organising the changes to use this call hierarchy? [1:33:54],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Yes. I have seen that the call hierarchy actually helps us a lot. But once the call hierarchy is done it is good to go top down in the class as well because even after changing the callers and callees there are sometimes some methods that are just there and they are not being called within the class so just to change them too.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: And if there had been local callers or clients of these methods outside this class where would that have fit into your workflow? [1:34:37],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Any callees or callers outside of this class - that depends on the number. If I checked the hierarchy and it went way too deep I would have preferred to work on that after finishing my work with this class but if it went only one method deep I would have been ok going to that class and change it.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: So what is too deep more than one method?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Yes. If it was just one I would be ok changing that but if it was more than one I would go class wise. [1:35:22],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: If you were to do this class over again what strategy would you take? [1:35:32],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Since I just quickly read through the class first that did help but the next time I would be a little more organized in the way I changed because I looked at some method twice. There was a readfield method that is here two times with different parameters one with field and object and one with object and string so that confused me. If I were to go through it again I would probably read through the class more to not find myself confused by similarly named methods. [1:36:32],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: Do you know of any tools that could have automated any of the things you did? [1:36:48],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I don't know if anything would have helped me because there might be.. A lot of the time there is the eclipse refactoring tool. It might be .. say if I am here [1:37:25] calling something with true it would ask me if I want to change it to the actual method to match the expected parameter of the method that now exist. [1:37:38],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
That is the only one I can think of that I use in my daily life. [1:37:49],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: I want to ask a bit about some tools that I am curious how you feel about. [1:38:01] You mentioned that you used rename. Have you used any other automated refactoring tools?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Not really not any external tools I only use eclipse's tools,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: have you used any of the other automated operations in eclipse's refactoring tools?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Yes pretty much all the - I don't know if eclipse allows you do to a lot.. I think it is mostly for rename and removing a method's parameters. I think it would help you move classes too like if you needed to move a class from one package to another package.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: How did you learn about those tools?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
By using it. While using eclipse you would try to see if there is a way you can do that and while using the tool you would do something that could make your life easier so you go through.. if there are tools in the environment that can help you.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
In some cases it was me trying to figure out if I could do it automated in some cases it was googling and it some cases it was someone pairprograming with me and telling me that hey you could do it like this too. [1:40:08],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: In these tasks were there any points at which you considered seeing if there were tools that could help you?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Not really. I did go to the - I saw there was the refactoring operation that could help me but I thought that for this task I would - which is again not - just like eclipse I am pretty sure it is not as capable of doing things as I would want it to be. For this task I would want to do it in a way I would do it with any new tool just going and learning while I am doing it. [1:40:50],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: you mentioned that you didn't think it was as capable as you wanted it to be?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Yes again just like eclipse it would help me extract things to a variable which is great but not something that would help me with the depth of the task I am doing. Change signature might help me - but it would change the signature of the method that I would want and what I would really want is to move things from one method to another. Like in fieldUtils I moved things from the read method with the parameter to the read method without the parameter and that I don't know if that would help me a lot in this case. But again - these tools are useful but in coding you have to just do things that your environment will not really do for you. [1:42:08],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: Do you find that they usually don't actually solve your task?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Yes they are useful in some way and they save some time but when you are doing actual refactoring these tools are helpful in a way but they don't really get you to the point where you are done with this task.,"Reflection
Efficient (“they save some time”)
 Not Satisfaction(“don’t really get you to the point where you are done with this task” )",,0,0,1,0,1,"<0,0,1,0,1>",0,223-223,0,0,0,0,1,0,0,1,0,0,
,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: What tool do you think would have helped you here? What would you have looked for in the menu? [1:42:39],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
In this case - I don't know let's see. Change signature might have helped you but not really. It would tell me that the method with the signature which is without the boolean already exist. So not really.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I also don't want to remove all the callers of the method because I want to look at them and see whether or not it makes sense for them to be removed or whether they should stay. [1:43:36],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
It is not really possible I think for a tool to get to the point of refactoring as we of developers do. It might be possible it is not impossible but at this point I don't see that in the tools that we have.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: What are the differences in the way you would solve things and how the tool do it? [1:44:10],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
These tools have a very generic way of doing things. All these menu items are something that every developer would need but if we go to every developer's own needs to do the tasks it varies a lot from one developer to another it varies how they approach the tasks and what the task actually demands you to do. That is why I would not see it happening. These are useful tools but there is the possibility that if a menu item did exactly what I would want it to do it is not what another developer would want. [1:45:08],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I see these as very generic things that everyone might want so that is what these IDEs have for us. [1:45:31],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: Do you have any examples on how a developer would solve something in contrast to this generic solution? [1:45:44],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Let's look at the things I did. Let's go look at this one - string utils test. Let's see if this will allow me to do that. If I select these and I refactor and I want to move them. Ok so it will allow me to move them to a new method but will it allow me to move them to a new class?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: So now you are trying to redo the first task?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I am trying to see if it will allow me to do something like that. It looks like it won't. It looks like the move is not really,"Not Effective (""It looks like it won’t.”)",,0,1,0,0,0,"<0,1,0,0,0>",0,236-236,0,0,0,0,0,0,1,0,0,0,
I: But you would consider using the move refactoring?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I would consider using it if it helps me. I wanted to see in this case if it helps me move - like when I moved the method it did not compile because I did not move a variable I want to see if it would the variable because that as a variable as well because that as a developer I would like.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
In the first run I would not move all the variables or things that the method use. In those cases something that moves the variables or all the things used by this method would be helpful for me. That is a difference. [1:47:52],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
A way the developer would approach the things... in some cases where I don't think a tool would be able to handle things is I changed the signature of one method and the tool would not be able to look at all the test methods and decide whether we want to change the parameter or remove the entire test - that is not something a tool can figure out. [1:48:40],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: What about in the second task you did this reversal of boolean values?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Yeah,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: If you had a tool that could do that would you trust it?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I would trust it- but I would also write tests covering all edge cases. [1:49:03],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
It is great that it does that for me but again trusting is not really something ... testing all edge cases is a great idea in any case. Again if I as a developer make a mistake who am I to say that the developer of the tool did not make a mistake. So I would trust it but also write tests that tests all the edge cases. [1:49:35],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: when you do this kind of work or make changes are spread out across files in particular how do you make sure that they are correct?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I depend a lot on tests and manual testing is also a great way to do that. [1:50:03],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
First of all we need to know why we are making changes but in our case we want to add a new feature or we want to solve a defect. In the case of a defect we would write new tests for the new functionality run old tests for the old functionality and then run manual tests to have two scenarios first to see that it actually does what we want it to do and also to see that there is no regression it does not break something existing. Compiler errors helps a lot with what to do. Testing is important. [1:51:10],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: What about things that aren't caught by compiler errors or tests for example if you forgot to remove some code?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I will cheat a bit - I use sonar for that. It tells us that this method is not called or this code does not have test coverage. What we do is we try to have - actually we have 90% or more test coverage for whatever classes we write and everything that the test coverage and small issues that are not caught by eclipse will be caught by sonar. [1:51:59],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: Does that impact the way you work?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Yes it does. I think it makes our code quite clean. While I was commenting things out I was also making sure that when I was done with the thing I was commenting out the commented out code was removed. That is something that was ingrained in me. [1:52:24] We don't want commented out code. We don't want unused parameters in our methods. There are things I might not have done while I was a student because then I was just writing code for my assignments and stuff but now I know that these things matter a lot and they might make your program behave in a way it shouldn't and it is also good to have a cleaner code. [1:53:03],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: If you didn't have sonar would that make you work differently? [1:53:10],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I think that having sonar made me a better developer but now if I don't have sonar I would still write code in a way as if I have it. But it is also possible that the tiny things that sonar catch that I am not aware of I may not be able to remember all the rules myself. [1:53:53],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
fin,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,