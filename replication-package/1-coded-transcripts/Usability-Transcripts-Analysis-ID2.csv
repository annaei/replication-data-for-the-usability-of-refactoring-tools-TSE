T1,,,Predictable (7),Effective (4),Satisfaction (3),Trust (4),Efficient (1),Vector: ,Invoke (3),Row Range, Predictable (4), Effective (1), Satisfaction (0), Trust (2), Efficient (0),Not Predictable (3),Not Effective (3),Not Satisfaction (3),Not Trust (2),Not Efficient (1),Refactorings
Another way of doing it is probably tag the tests but that's probably not what you wanted so.. ok.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
so what I need to do then these tests all look pretty straightforward. Testisnoneempty. Are they self-contained? They look kind of self-contained to me as if they are not including other methods.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: is that what you mean by straightforward,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"Yes. So I'm looking at this. If I was to refactor this into a single test-class which — I’ll create this test-class soon — I’ll look at this and say, hi is it going to call anything else that I need to take with it. There's probably a refactoring tool that can do that for me but I would probably just copy it over and say does it give me errors?",,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"emptyandblank 
 so I'll create a new class 
 String - UtilsEmptyBlank seems like a reasonable name. 
 So how do I do this. 
 Oops. Is that what I wanted? Ok let's pretend it was. 
 String.. 
 sorry what was the name of it again? StringUtilsEmptyBlankTest. Sorry I've been programming in Typescript for quite some time. So now I have this thing.",,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"Now of course this has nothing in it and I don't have all the stuff at the beginning that I need. So one thing I might have done is actually to just copy the entire class then I've got all the stuff around it and then go and delete the stuff. But why would I do that.
 So what am I doing.",,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Now I must go back to... And now what do I need here. I probably need a lot of these imports. So another way I'd do it - oh I'm definitely going to need this one.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Probably what I'd do is I'd rely on the compiler. I'll just say testIsAnyEmpty - where is that one. So this one I'll just copy this -- I don't know if I want that - I'll take that out. Then go here just paste it in. See if it complains about anything. It doesn't complain. Wow. That was too easy. What's gone wrong. So I'm suspicious now that was too easy I'm probably missing something. So I will go up here and have a look at this. Because any of these things will I'd learn if it wasn't going to work right it would give me a compiler problem.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: So that would be if you were missing imports.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Missing imports yes for sure.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Now this is interesting. There's a static block here. Is this going to do anything interesting that I need? Ok well I'm going to assume for now it's not useful. Maybe it will come in later on. So why don't I just now I've got this thing this looks like it may actually work. Now how do I actually run it. What do I press? Right click run .. run only this one.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Ok passed.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
[7:15] So at this point I'm going to assume that this code is good. So that method was good and my new class was good. So I just need to go and copy the others and repeat the process. No that's the one I was editing. That was is any empty is any nonempty. So I'll go and do the same thing.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Doesn't complain. Ok I'll do another one. NoneEmpty.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
EmptyBlank,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"Now let's try again just to be paranoid. 
 It's interesting I'm not really understanding what the code does I'm just mechanically going through and just hey it works",,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: How would you know if it didn't work,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
well how much faith do we have in the tests right. Because the tests have good coverage they will fail if it doesn't work right. So first it would underline stuff here and tell me it's missing a symbol or something like that and that's probably if it's not missing any symbols it's probably going to work. 'Cause it's Java right it's strongly typed so that's good. If this was someting like Ruby pfff who knows right. But in theory if it fails then there's something missing; if it doesn't fail you didn't need that thing anyway. Whatever it was that you copied across.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
So all empty here you go...,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
AnyBlank. IsAnyBlank? Oh yes it is test ..,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Now there's probably a refactoring menu somewhere that'll just let me move these things but I have not found it and have not ever used it so I'm not going to try. AnyBlank anyNotBlank.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
See if I actually had an idea of how many tests were in this file which I probably should have looked at I may have just copied the entire file and just gone through and deleted the ones I didn't want. Maybe that's a better way. But there's something satisfying with writing code very quickly like this. It feels like I'm being very productive. So noneblank and allblank - hey look I can copy both at once.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: I'm curious about what you mentioned about the refactoring tool that you didn't use and didn't know about,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Well I'm assuming there might be one. I know there is a refactor menu up there. This one here right. So I've never really gone through all of these things in IntelliJ and said hey what does this do what does that do; I've done Move actually have I done Move? Maybe Move would solve my problem? I don't know.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: And you're not inclined to want to find out?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Am I not inclined to find out? It depends am I under time pressure?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: no no.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Gosh. You know why because this was really easy. It least it feels easy. Maybe I'll try it now with the four remaining ones. [10:50],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"That worked 
 So what I need now is trim empty test.",,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Yeah right ok.,,Error (Move),0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"Now let me try then 
 Click this refactor Move",,Invoke (Move),0,0,0,0,0,,1,,0,0,0,0,0,0,0,0,0,0,Move
,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
See this is where you give up I'm doing it by hand.,"Invocation
Not Satisfaction
 (“this is where you give up”)",,0,0,1,0,0,"<0,0,1,0,0>",0,42-47,0,0,0,0,0,0,0,1,0,0,
I: Why do you think it failed?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Because it gave me an error message. Let me try again.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
It was a woops that's copy.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
It's located in a read only container.,,"Invoke (Move)
 Error (Move)",0,0,0,0,0,,1,,0,0,0,0,0,0,0,0,0,0,Move
So at this point when you get an error like that it's like this is useless I don't know what to do with it. Am I actually going to go in there and start figuring out why JUnit-Assert-class is located... what. That's not helpful at all.,"Invocation
Not Effective
 (“this is useless”)
 Not Satisfaction 
 (“That’s not helpful at all”)",,0,1,1,0,0,"<0,1,1,0,0>",0,,0,0,0,0,0,0,1,1,0,0,
So even if I .. maybe if I just do this. And this is the thing once you try this a few times .. Oh there that's better. Then now it's like .. what am I moving am I moving the entire class? That's not what I want. Extract? Oh that didn't work. Extract .. Method? Well that's not what I want either. 'Cause that implies you just got a small section of code,"Invocation
Not Predictable
 (“what am I moving am I moving the entire class?”)
 Not Satisfaction
 (“Not what I want”)
 Not Effective
 (“that didn't work”)",Invoke (Move),1,1,1,0,0,"<1,1,1,0,0>",1,48-49,0,0,0,0,0,1,1,1,0,0,Move
At this point I'm like well I've got four more methods why don't I just move them? So what's the point. Unless I've been trained specifically on how to use these things. Let's see if this is actually going to work. This may fail because again it's a different file I'm pulling it from. What that's not what I want this is what I want. Let's see what happens now. Interesting what's happening here. Uuh cannot resolve foo. Now this is challenging. Ok where is foo defined oh here is foo. Who wrote this code seriously. Should not be using foo as a variable name. Now the question is I'll put this a the top here even though it's actually not used by any of the top tests this should actually work. Looks like it work. Run it. Done. Ok so I need isNotEmpty and isNotBlank and isBlank. Blank and isNotBlank. I'm having mouse issues.,"Invocation
Not Efficient
 (“I've got four more methods why don't I just move them”)",,0,0,0,0,1,"<0,0,0,0,1>",0,,0,0,0,0,0,0,0,0,0,1,
Ok one more run. There's probably a button I can press right. That works. Ok. I think I'm done.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: Which source code changes did you do in order to solve this task?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Ehm move method from one class to another and in the last one I had to move one dependency. Or actually copy not move because it was needed in the previous one as well.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
So tell me which one should I have used? I don't use these ones that much or not at all.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: The refactoring operations you were doing they do match the move method but there's a lot of issues with how these refactorings are designed so move method it's not usable for things like this. It should be. It would be very straightforward to make it useable. But there isn't. There's actually no way without doing interesting workarounds in the code yeah like now you're selecting the class -- just unselect everything just exit because now it's invoked on the class. Right click on the method name and then do move now you're invoking the right move.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Yeah I have done this one before!,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: This is still not going to work but for stupid reasons.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Now it thinks it's an instance method and want to do move to component which nobody these days knows what is.,"Reflection
Not Predictable
 (“move to component which nobody these days knows what is”)",,1,0,0,0,0,"<1,0,0,0,0>",0,57-57,0,0,0,0,0,1,0,0,0,0,
Interesting.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
So part of the reason why we don't use refactorings a lot is because we use ruby and javascript. If they're not strongly typed it's not going to work anyways.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: I'll ask to you switch you to task two. You're not on time by the way.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
It's funny in industry we just have this 'just get it done' mentality as opposed to learn the right way.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Task 2,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Right the new methods isAnyNotBlank and isAnyNotEmpty bloat the API bloat the API and are awkward to use with the double negated names. isAnyNotBlank isAnyNotEmpty isAllBlank isAllEmpty. Remove. Ok. Keep the methods.. ok. TestIsAllBlank. Where's my outline. I'm not sure I understand the question.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: They are found in StringUtils they're not test methods. Sorry about that.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
That makes sense! I was in a different context. StringUtils. Ok now I can look at my context here.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: Sorry but you opened the wrong file.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Did I? Oh SystemUtils. I'm going to blame the mouse for that.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Ok here we go. isAnyNotEmpty isAnyNotBlank.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Locate the methods isAllBlank and isAllEmpty. Ok.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Remove them. Ok,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Well that seems too easy so there's gonna be a catch. So I'm not going to remove them I'm just going to comment them out for now. There's a command for this but I forget what it is.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: I'm just going to make sure that you got the names right. Which methods are you going to remove?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
isAllBlank? Locate the methods. Oh ok. You're removing the other ones. That's misleading. Locate them and remove the other ones.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: Sorry about that.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"That's fine. IsAnyBlank. This is the one I'm removing. Ok. So if I remove this I'll comment it out for now because it is probably depended on by many other things, and I'm going to see what happens.",,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: Are you making those changes to get a response from the compiler so to speak? Or do you think it going to actually solve the task?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
No I am getting a response from the compiler.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Just to be clear on that. So now what I should be able to do - oh I can see there's a failure up here so I can't - it's pretty messy code. So many warnings. There we go. So this is going to fail now so that's interesting. So isAllBlank is basically the opposite of that. So why don't I just take the body of the thing I just commented out and put it in there but reverse the sense of it. But then there's the problem right because there may be other things that depend on isAnyNotBlank as well so I'd have to change the sense of those to isAllBlank. So what I'll do now is I'll search through the code.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: Are you using find to go through the code?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Yeah. Where is a usage. It's used just in that one place so we should be safe. Now there's of course find all references I don't see it here 'cause it's not VS code.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: Find usages.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Find usages.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: I'm curious if the problem wasn't that you commented it out so it can actually not be resolved right now.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"Ah that could be it yeah. Anyway I know the solution because it's not there anyway it's only used here. Is it public? It could be used by other things as well outside because it is public so that's an interesting thing as well. So let me do this now. Sorry what am I doing. Find usages, now what did it give me, where did it give me the results. There it is. Yeah so all of these tests use it. This one is the one I know about and all these tests. So all of these tests will fail and I'm wondering if all of these tests are covered by the other one that is the opposite so I probably don't need - I can probably just remove this test and get away with that - do I want to assume that? Let me go back to my code. Ah where is it again I don't want systemUtils. StringUtils. So this is the one that I want to see -- is this covered nicely. Come on. Ok so that has a lot of tests as well. Probably the same set of tests just reversed. Ok I'm going to make that assumption I'm not going to check. If you're ok with that.",,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Ok so let me go down and I'll fix the test later I'll go here and I'll take.. let me just copy this for now. Let me god back to.. where was I again? Is there a button that just lets me go back to where I want to go back to? Sometimes there is. It's an arrow of some kind. No ok i'll just search for what i want then. isAllBlank. So I'll just put it in here. And now I have to reverse everything the logic. Ehm is any is empty .. now this is a little challenging. You can't just change the falses to trues.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Can I just make the other method private? That would work too.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: That would not solve the task. Sorry.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
So now I have to use my logic here. So if this is empty return false. But does that mean .. So I'm not going not try and think about the logic here but think about what it's actually going to do. IsAllBlank. so if the thing is empty then yeah I guess it is allBlank. I'd look at it that way yeah. For everyone if it is blank - so you got to do this differently then.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: Now you are essentially re-implementing functionality?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Yeah exactly. Which is interesting isn't it. That is why I wanted to keep the other one private. Or what I could do - or I couldn't do it in Java. I could keep a submethod and call that submethod and just reverse it. So that would be my preference actually just keep the other one as private and just reverse it.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: That may make the code a little less readable for the future.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Yes absolutely. But now I have to reimplement it. So now I'm looking at everything in the sequence - if it's not blank return true. So I guess if it's not blank return false. So maybe it is just a matter of reversing everything.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Otherwise return true. Ok. It seems... 'cause you can't always guarantee that right sometimes you have to read through the code and say hey that doesn't actually reverse properly. So let me go through this again: so if it's empty return true isAllBlank: So if you go through everything if one of them is not blank return false oh ok I'm going to see if it works I need to get back to where is isanynotblank this one here is the one I removed. Is this right? It is the one I copied so I can remove all this now?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Then something will fail somewhere because it depended on that. Nothing in this file. But I think one of the tests will fail so let me just go back and run all the tests again. Source code tests. I've never actually ran these tests before all of them.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Here we go so this is the one I have removed isAnyNoneBlank so all of these are going to fail and that's fine I'm going to get rid of them anyway. Here we are again. That's interesting. Press this button. Why does researchers always use Java and not Scala. I've used Scala a lot more recently that's why. Ok there we go. I think that might have actually worked. Except I have to do the other one now and I appreciate that. If I put a lot of trust in my testcases we're good. So now I've got to remove isAnyNotEmpty and this is going to be again in the StringUtils. IsAnyNotEmpty. So I'll where is this used find usages just one place and this is the tests so again I'll leave the tests I'll just look here is any not empty and I'll want to keep isAllEmpty so I'll need to go and do what I did here which is take this body here and put it in isAllEmpty put it in here and then return true. So isAllEmpty.. The heck does empty mean anyway. Checks if all of the charsequences are empty. That's ok. So if there's nothing in the charsequences then they are all empty. I'll just go through them. If it is not empty return false. I think that makes sense. And if you get through them all and they are all empty then return true. Where's the button that jumps back to the other one. No that's the one I want to keep. Is all - is any not empty. I thought I removed it. Ok remove this. Ok. Run the tests again. Press this button. And one of them will fail at least.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: It sounds like that is an expectation that's what you want? That they will fail?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Yes. If I don't find it my tests suck and I know I've got some gaps.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Yeah we rely on a lot of tests especially with ruby and javascript they are not strongly typed so your compiler is not going to tell you heck of a lot until you run tests so that's why we do that a lot. So with Scala we have one team that does scala and they do rely on a lot of tests of course but they know that it's going to work they have a lot more confidence. Ok. I think I did the right thing. Did it work? It looks like it worked. Did I do everything? Did I remove the other one yet? Should be good.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: I'll ask you again to describe what kind of code changes you did.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Ok. What kind of code changes.. so I copied the method body from one place to another and then modified it. So the thing that you wanted to remove that was actually where the logic was. The other one that we wanted to keep actually just reversed the sense of that logic so I had to copy it to the thing we wanted to keep. I had to go through the code,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: Do you know of any tools that could have autmated any of those changes?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"Do I know, no I don't. Not to do that one no. Cause you have to go and actually think about the code and change it appropriately.",,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: If you had a tool that could do those operations that you did would you like to use it?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
For that specific problem yes but I don't usually see that particular problem in real life. Often when we are refactoring we do a lot of changes to the whole algorithm not just simple ones like that.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: How does that impact what you need from a tool?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"I think, you know when I was thinking about this one I was not confident that simply changing true to false and false to true was going to do it. Right, because I've seen things where oh I'm skipping things that I need you know if I'm not thinking about it and I'm just automatically making changes then I cannot trust it. I got to in my mind convince myself that I'm correct.",,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: So you have to think about whether the logic is correct?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Yeah exactly when you are reversing it like that. But normally most refactoring you're changing the algorithm you're doing quite substantial changes not just simple ones like that.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: Let's chat more about that later. I'll have you move on to the third and final task.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
T3,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"So what I'm going to do now is rely on my friendly compiler to do this
 So now things are going to break.",,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: And that's what you want?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Yeah. Because we trust our compilers implicitly.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
So this is interesting so I'm now looking at this and saying so what's happening in here I'm later going to look at where it's called cause that's going to break too. Now I'm looking in here and saying what the heck because if this was set to true -- and it can no longer be true it is going to be false now -- do this thing. So essentially I'm now saying it's always going to be false so I'm doing this thing. Now this looks stupid. Do I actually need this? 'cause what the heck - continue what's it continuing so it's continuing outside it's just going to go to the next iteration of this loop and ...,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Which I might as well reverse that so if I .. I can do this I think *restructures code*,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I think it's functionally the same.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
So I'm saying if that's not the case then continue around the loop. If it is the case then return. 'cause it was going to continue anyway if it isn't continuing it's going to do exactly what it's going here.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Ooh something is failing here. Is already defined. Oh that's interesting! So there is already a version of this that does not have that method. What was it getField class String Field. Yes it's exactly this one. Ok so I can remove this this is useless now. Yeah it should just be return getField you don't need this temp.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I'm not even going to bother reading the documentation to see if there's anything useful I'm just going to delete it. Ok now there's going to be other redness in here. There's lots of warnings in here which is making it actually really hard. Is it a warning? No tips. See if I look down the right hand side here I'm looking for red but I'm seeing all of these yellow that are getting in the way and kind of making it hard.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: So you actually went and delete the original method the method you didn't change.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
All it was doing was exactly what the new method does. All it was doing was calling it with false. It was just an overloaded..,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Now I've got this one and I probably got the one down here. So they're both passing in forceaccess and we're removing that so we can't do that. But now I'm thinking are we capitulating forceaccess somewhere else and it's here so I'm going to remove it from here because it's now useless and now I've got more problems.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
And I'll come back and fix that one later on.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
And now this one so I'll remove it from here 'cause it's useless now and it's probably going to break other things. Oh what's it done now. It's overloaded. Again? We don't have optional parameters in Java to false? We just put forceaccess to false?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: No.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Ok so this apparently is already defined. writeField - so I guess it's right up here. Target fieldname value. Yeah that's exactly the same but we're doing forceaccess is false. I mean in theory I can leave it the way it was I don't have to keep on going but I'm just cleaning up the code for the sake of it because why have forceaccess in the parameter list when it's meaningless it doesn't do anything. I honestly have seen a ton of code that doesn't do this so therefore you just live with this option that is completely useless and people from now on use it and wonder why it doesn't work so well.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
So now I'll go here and remove that. And we get another one another readField. What! This is wrong.. Ok this is confusing what's happening now. Just confused by this error. Wrong first argument type. That's weird. I'd have thought that it was complaining about this thing. [41:19],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
So what is this.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
It's the one I deleted? Odd. Did I delete something that wasn't overloaded?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Ok bizarre.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Ah I see interesting. Go back and un-delete that. Oh no I broke too much! It was readField. Here you go this is the one I'm worried about the one I deleted. So getField..that's interesting. So I don't understand the error of it. This is exactly the same signature. Ok let's do it again.,,Restart,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
so getField it's fine it's complaining about that let's take that out.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Don't know what went wrong there.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: So you're just redoing what you did before?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Yeah. I just ctrl+Z a few times just to make sure I didn't screw up.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: Are you doing anything differently this time?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Nope! So I have no idea what I did wrong. So now the red is gone away. so I must have deleted the wrong thing at some point.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
And now I'm going to doublecheck the forceaccess. So there it's still there. Ah I've forgotten a lot of places. I kind of feel like I want to go throughout the file and remove every instance of it. Gosh there's another one. It's in everything. So logically I'd just go and remove it from everywhere. Now I'll come back and fix that problem later.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
What!,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
What am I doing. Here we go.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
That's right there so this doesn't exist any more.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Ok I should just use search and replace. Probably not the best method.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Ok.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: Why would you think search and replace is not a good method for this.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Because you're not intelligently looking at it and figuring out if it makes sense. I mean I'm safely removing it from comments and I feel safe removing it from the argument list but then I'm like ok I have to go through and look at the logic of it and make sure that I rewrite the logic in the correct way.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Oh it's inside the method and here's another one oh gosh.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
How many methods use this thing! Now I think that's it there's another one.. I seriously think I've done something like this before in real life.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
So this one I should just be able to do this now Now this is failing. Why. Because I have two of them. So this one was the one I wanted to remove.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: You're again deleting so to speak the original method.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Well the overloaded one that had the default value,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I'll just do this I'm just paranoid. For some reason it didn't work last time.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
So it was complaining because it was overloaded. Ok writeField. Now it's got two of them so what I'm expecting to see they're both exactly the same. How many do we have got? Ohh now I see there's four of them and I deleted the wrong one That's why it failed. The top two are duplicates and the bottom two are duplicates now that's what it is. Now if I go to this one I should be able to go to this one which one is this .. I'm going to make sure it's actually the correct overload. So this is Field Object Object *reads parameter list*,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
And this is probably going to complain it's doubly overloaded it's already defined. Ok so it's object string object *reads parameter list* it's the same thing it just passes them in with false. Ok. I'd be curious to see what kind of refactoring you have in mind for this one. Now it's complaining it cannot resolve this. [48:54],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Now of course what's interesting is that I'm doing this trusting that it was actually writeField that I removed it from. So that would be a really scary thing because I'm pretty sure I removed it from writeField but what if it had an error for some other reason and I'm removing this now it's going to a default value of true that doesn't feel very safe. I feel kind of a bit nervous about making that change.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"Now it's this one this is already defined so again, it's object string object and it's the same name writeField and again I'm trusting that the previous method is the overloaded one and it might not be so I'm really paranoid about the name.",,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: The previous method - so you're actually going by location in the file?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Yeah by location. Because if I go to the previous one and deleted it it might have actually been something else. I think that's what I did wrong last time 'cause it was actually different types and I didn't check the types carefully. I'll be paranoid I'll just comment it out for now.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
This one readField I don't need that any more,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
ambiguous. Ok.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Let me go here.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
See again there's two types one takes object one takes field so there's this one here I want,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
so it's this one here I want. Comment this out delete. declared field I've changed that one already.. ok it's going to.. yes yes yes. ReadDeclared field - it just calls it so I'll comment this out. I'm sure I've seen code in the past that reverse the target and fieldname *parameters* backwards so I've got to check that one as well. So I have suffered from that in the past. It wasn't just an exact copy.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
At this point I'm like I really want to run tests but it's not even going to compile so I can't run the tests. readField I'll take that out again it's ambiguous so it's these two this time 'cause it's object and string,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
And I would recommend using default parameter values it would have made this code so much easier. Ok that went away 'cause I already fixed that problem. Now I need to run some tests. I guess I had that open already didn't i. I don't know if that would work..,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
No. Because. I'm not done yet. So I didn't fix this problem.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"Ok so if forceaccess is true, it can't be true, so it'll return null. Ok so now I'm going to look at it again I think this is fine. I don't need to change anything else. I could always reverse it but I don't see much point in that. Now do I have more mistakes. Oh here's another one. If forceAccess and .. can never be true",,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Ah another one! You know what they're not showing up on the righthand panel there. That's why I resorted to running tests. I can remove that it's not defined. I'll go back to my searching,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Ok well that can never be true so it'll just do this workaround,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
It's no longer there let me run the tests.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Ok what is this telling me. Oh that's not good. What the heck! Who wrote this code. Ok so here's a test case. testGetFieldForceAccess. Well I can probably remove the entire test 'cause this won't work any more. So get field true true true .. they're all set to true so none of them are going to work we can remove that it's a feature we don't have any more. Let me run the tests again.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I'm assuming none of this is needed any more. This feels like my day job. TestgetField-illegal exception. These are just variations on the same thing. Test getDeclaredFieldForceaccess it's the same thing all setting it to true which is not supported any more [57.22],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
And I just realized I commented out a bunch of things in the previous file I need to go back and remove it. That will be part of my pull request before I actually change it. You know it's funny I'm thinking can I use search and replace 'cause there's a heck of a lot of these. I can just I'm thinking I can just .. I'm seeing all of these are the same problem.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
This is long I want to be careful about this one. [58:24],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
That one's gone too.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Again I'm going to assume this whole thing isn't required...,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Wuhu it passed!,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Except I need to go back and remove these comments that I put in there. I was extra paranoid and didn't want to delete them. Need to find them again.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: Why did you keep them as comments?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
In case I wanted to restore them. In case things didn't go well.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: Do you find it easier to restore from comments rather than,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Oh yeah Well I did ctrl+z the first time right but you have to redo things in the order in which they were done. In this case I was like oh no I'm going to comment them out in case I need to selectively bring them back. I often do this and I often when I get ready for a pull-request I'm like this can go this can go this can go.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: Do you ever miss any?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
No.. Not usually 'cause I'm really picky about this stuff. Maybe someone has picked it up when they did a review but normally no.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
How many did I do this for?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Feels like I'm not deleting them properly they're coming back. How many more do i have.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I should have put a little symbol or something like TODO.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
There we go we're done. And I'm going to run this again just to be paranoid and .. I should actually go and run all the tests. Because there may be something in some other method that I broke that I just haven't found yet some other testclass. But it seems to have worked so good. I think that's it.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: Which kind of source code changes did you do in order to solve this task?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
The main thing was to remove the field - to understand what the fieldvalue of true actually did and say we don't want that effect. I went through and removed really the actual place where it was sitting that value inside the reflection and when I did that I went and removed the parameter and now it breaks.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Then I had to go and see if there was something that was logically not going to work now then I had to go through and remove it and remove it.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
There was a challenge with the overloading so I had to through and find the right one to delete. I messed that up at one point I deleted the wrong one. That was tricky. At some point because I didn't see the errors on the bar on the right hand side I went to the tests and they wouldn't compile. Again I had to remove things. [1:03:32],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I think there were a couple of places where I looked at the code saw that I'm removing the reference to forceaccess and well two or three lines can be removed because they're not doing anything anyway. Removing a parameter is a big deal. [1:03:56],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
That would be a cool refactoring if you could automate it. Show me the implications of removing it.,"Reflection
Predictable (“implications of removing it”)",,1,0,0,0,0,"<1,0,0,0,0>",0,194-194,1,0,0,0,0,0,0,0,0,0,
I: There is a refactoring that is called remove parameter.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Would it do all that?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: No. It also has a precondition that the parameter is not used,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
How is it useful then if it's not used?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: It does the same thing you did but in a different order. First you'd have to remove the references to the parameter then the refactoring could have removed it from the signature etc,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
So if I first remove it from inside the method so that means that every call to it changes?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: That's right,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
But that wouldn't have caught half the stuff that I caught.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: That's correct.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I mean there was other places there were methods that just passed it through. Just for the record this is a problem I have dealt with before in real life. [1:04:59],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"what did I spend, 20 min 30 min, it was hard and at some point I made a mistake and had to go back.",,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: When you do these changes in real life how do you keep track of your changes?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Git diff. That's probably what I should have done here to see where I commented out stuff. But you just have to concentrate and be super carefull.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: What if you get something wrong then do you need to roll back everything?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
No that's why you comment it so you can uncomment it. Git diff will show you where you commented so if I saw you know I didn't do that first and then I realize I did something wrong. This refactoring shouldn't change the type compatibility but because I did something wrong it did. So I realized I had to go back and comment it out so if I did the same mistake again I could easily uncomment things. And I could still see the original code. Git diff would've shown it to me as well but it's easier if I see it all in one place.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: When you said you wanted to find all usages did you exclude the tests? [1:06:29],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Inside the class yes. I had to get the class working before the tests would work.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: Do you know of any tools that would automate any of the changes you were doing?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
No. I guess it's interesting I don't even go to the refactoring menu. I think it is too complicated for a tool to automate so I don't even try. [1:07:21],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: If a tool could automate it,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
If I knew about it! It's an education thing these things may sit in my IDE for years and I don't know what half this stuff is. Unless I was trained on it read a blogpost on it. These things doesn't happen enough. This particular example I do remember at least once actually more than that. Maybe every six months I deal with a situation like this. But is it worth learning a refactoring tool that you don't 100% trust when you can just do it manually. [1:07:45],"Reflection
Not Trust",,0,0,0,1,0,"<0,0,0,1,0>",0,215-219,0,0,0,0,0,0,0,0,1,0,
I: What do you mean by trust?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"How do I know, like it's going to make the change and I need to go and review the change carefully and convince myself it made the right change.","Reflection
Not Predictable
 (“I need to go and review the change carefully”)",,1,0,0,0,0,"<1,0,0,0,0>",0,,0,0,0,0,0,1,0,0,0,0,
I: What could go wrong?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
It could incorrectly change the logic. Well it can't miss something - no it could. It may not remove all cases of forceaccess it may just remove some. It may change the logic incorrectly. Tools aren't perfect and we shouldn't trust that they are. That being said I do trust the IDE to underline things I've put a lot of trust in that. [1:08:35],"Reflection
Not Effective(""incorrectly change the logic"")
Not Trust",,0,1,0,1,0,"<0,1,0,1,0>",0,,0,0,0,0,0,0,1,0,1,0,
Put a lot of faith in my tests. But even then we do ship bugs.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: So you're talking about tool correctness with respect to the language.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Yeah there may be some cornercase and it may introduce a bug. The tests may catch it if you have good tests.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: Could the tool impact the tests? In Java semantics the test is a caller so it would be one of the places that is refactored.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Yes. If it actually removed the tests I would be skeptical.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
In these cases the tests did not test a functionality any more. I looked at them and they were all true but even if they had been false I would have removed part of them. The tool couldn't possibly know that the test wasn't needed any more. If it saw that it called it with true and it wasn't possible any more what would it do. I don't know. At least it could underline it and say you have to deal with this.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: Final question you seemed to organise your code changes according to some logic here. First you changed the parameter then inside the method then outside the method so to say.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I removed the javadoc first. I wanted to understand - i knew that by removing the parameter I would get compile errors inside the method. And then I could go and understand what was the semantics of that function. By understanding that I could go back to all the callers and see are their semantic going to change as a consequence. I needed to understand that before I was comfortable changing the callers.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: So you chose that order specifically for that?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Yes.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: And you wanted those compile errors?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Yes.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: Do you use refactoring tools otherwise in your work?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Not so much no. Partially because I'm not in the habit of using it. I have used extract method. It is very simple it says here are the parameters go. I'm trying to remember when I last used it - it must have been Java code. [1:11:56] I've been doing scala recently but I don't think I've done it there.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: What makes you say that it is a simple refactoring?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"It's small. It's like - all I'm doing is moving this chunk down there. What it has to do is, what dependencies does it have on other things in the scope and it makes those things parameters. It is simple because I understand exactly what's going on and I feel confident about it. That's a good point. [1:12:36]","Reflection
Predictable
 (“I understand exactly what’s going on”
 Trust
 (“I feel confident about it”)",,1,0,0,1,0,"<1,0,0,1,0>",0,235-236,1,0,0,1,0,0,0,0,0,0,
I feel confident that it is doing the right thing and I can easily look at the final code and validate that it's right.,"Reflection
Effective
 (“it is doing the right thing”)
 Predictable
 (“easily look at the final code and validate”)",,1,1,0,0,0,"<1,1,0,0,0>",0,,1,1,0,0,0,0,0,0,0,0,
I: Does it matter that it is localised?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I think so. That's the whole point of methods right you're focused on this one point.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: Do you rename?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"Yes I do that all the time. I very frequently do that, it goes through and I can confirm .. I am suspicious but again I depend on the tests. [1:13:39]",,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: Would you trust a tool to reduce logic like you did? During T2 and T3 you were reversing and reducing logical operations.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I think so. If it was like in my refactor menu and it was like reducing logic or something and i could easily see that it was a contained area. I think in the simple cases it's pretty straightforward to know that you know if it's false do this if it's true continue.. but I think your refactoring tool would have to know a lot of control flow analysis in order to do that and be trustworthy. And I would want to see them side by side this is your current state and this is what you will go to. That would be trustworthy. [1:15:10],"Reflection
Predictable
 (“this is your current state and this is what you will go to.”)
 Trust",,1,0,0,1,0,"<1,0,0,1,0>",0,242-242,1,0,0,1,0,0,0,0,0,0,
I: In the second task you were actually rewriting the code and in the third one you were just reducing on logic.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
On the third one I was removing logic the second I knew it had to work regardless of it was true or false.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
fin,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,0,0,246-246,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,