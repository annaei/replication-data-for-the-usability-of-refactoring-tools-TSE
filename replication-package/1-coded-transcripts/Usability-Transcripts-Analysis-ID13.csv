T1 [06:39],,,Predictable (4),Effective (0),Satisfaction (2),Trust (2),Efficient (0),Vector: ,Invoke (1),Row Range, Predictable (3), Effective (0), Satisfaction (0), Trust (2), Efficient (0),Not Predictable (1),Not Effective (0),Not Satisfaction (2),Not Trust (0),Not Efficient (0),Refactorings
"Ok, so all the empty and blank ones should go into a new file. [08:39]",,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I don't know what to name this. This should probably be something like StringEmptyTest.java?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
StringUtil..trim-empty - what's the trimming about?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"Wait, are these even testing the trimming? And is this code found anywhere else?",,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: What are you looking for now?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"This is testing StringUtilsIsEmpty, and it's in StringUtilsTrimEmpty. I see all these tests about trimming and I'm just not sure what this is yet, what it's here for. I just want to check that the tests aren't doing the same thing. I should have a class now, like StringEmptyTest, and I'm going to comment out all the tests listed here and just paste them in. That's my current plan. Then make sure there's no complex... not sure how they're organized though. I'm also trying to.. these refer to this thing and this thing. [10:55]",,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"I don't want to take this with me, is the only thing. It's used everywhere. I can just go for it?",,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: Go for it.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Ok.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Oh jeez.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: What was that?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
This license thing. I'm not going to care about it.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Probably the first thing I'll do is this.. [11:45],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"And here, testISAnyEmpty. Ok, so you're coming with me as well as testIsAnyNotEmpty? Not empty .. is all empty .. any blank .. *reads tests* [12:16]",,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"I copied it, commented it out. Can I double check the - it doesn't look like it's using any of the constants up here, and there's no at before, so I think I should be safe to just paste it in the new one that I made.",,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I can't find it. [13:10],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Here it is. Where did I put it? Tests?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"I'm just making sure that these tests run, and they do just fine. [13:52]",,run tests,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I'm going to delete what I just commented out.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"One little oddity here, I don't know if this is a setting. Like I'm just to seeing this turn blue if I edited it, and it helps me keep track of what I made changes to. Is there a reason that isn't on? [14:17]",,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: Its probably just some setting,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Now that I think that works I'm just going to delete this.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Now it's blue. It works sometimes. This new one should be green. It makes me lose my place. [15:06],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Then stringutils.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"The only thing is this constant. I feel weird about taking it over, but it looks small enough that I feel safe copying it.",,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: What other things did you consider doing? [15:40],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"The only other things in my head sounds even worse to me. making it public and accessing it. Moving it to a test-constant file would be nice if it is being used elsewhere, but I mean - is there something like that elsewhere? [16:02]",,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I want to see if this exists in any other files. *searches in the menu* I feel helpless without my shortcuts. [17:28],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I'm going to give up because this is a waste of time. I'll just copy it then. [18:43],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
From this guy all the way down to testIsNotBlank.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I feel weird about this. [20:04],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Done.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: What code changes did you do in order to solve this task? [21:10],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"I just moved methods around. I made a new class, moved methods around, and copied a field. I used global searches, copy paste, my favorite tools. I'm also going to delete these comments.",,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: Do you know of any tools that could have automated the things you did? [21:45],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"I have a vague feeling that intelliJ has these features, but you can tell I don't know how to use IntelliJ other than the way I've been using it for the past 2.5 years, the way it was given to me on my computer. making changes to the editor using advanced - I don't know. I vaguely remember learning once that you can select a bunch of methods and just click a refactoring operation that just moves it elsewhere. I don't know how to use it and I - actually I'm just curious now.",,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: were you inclined to use it in the task? [22:39],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"Never even came - it was never a thought in my head to do that. Copy paste seemed like the right thing to do. That's how I would do it. Comment things out, copy them over and check that everything works. The number of tests hasn't changed so I'm inclined to believe that I didn't screw up. One of the things I like to do - I copy and comment. I always copy and comment to make sure that I don't copy one thing and comment out someting else. [23:25]",,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: so that's like a rule for yourself,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Yeah! I hold the command button and slash - and it's like one action in my head. It's like moving it and leaving a record that that happened. [23:46],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
There is this thing here - extract .. oh man. Method. Yeah method. This would probably do it. There's even a shortcut for it.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: What do you think this would have done?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
It would probably bring up a menu and give me a list of classes and say where do you want to send it to. And it would probably give me warnings about dependencies and stuff like that. like this file doesn't have this thing or this file needs this method or things like that. That's what I would guess. [24:32],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I think that IntelliJ is pretty good at tracking dependencies like that.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: How would you solve this task if you were to do it over again? [24:43],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I would do the same thing.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Commenting out and making sure it still works. It feels very safe to me. I'm always embarassed saying out loud that it's what I'm doing. But especially for these tests that aren't calling each other. It seems ok.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: Is there any other situations in which you would be inclined to use tooling? [25:22],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"Because these methods are not calling each other I feel safe to just look at it, copy, paste, comment out, fine. Whereas if they were calling each other I would probably have to like,.. I mean I would probably use the same tools, copy paste comment. However, I would probably spend a lot more time with how I do it. [26:07] actually, no. I might even just comment it out and see where things break. Because everything will turn red where it is needed. The same first step of copy comment.",,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: Why is that your preferred way?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"Copy-paste is something I've always done, before I could program. It feels safe to me - of course trying to rewrite something, it's obvious. The comment - I don't want to lose something. It's in the git history, but it's nice to have it right there. If I'm making changes, like move something, or immediatebly change something, I like to have a record of what it was like. [27:08]",,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"Let's say I have a method, I copy it and move it somewhere else, and because I move it I have to rename a couple of things, which is very likely. I definitely don't want to rename things, then it's broken, so I don't know what .. so I'd like to have the record of what it was like before in the code. It's nice to have it in the git log I guess, but that'd require me to leave IntelliJ. [27:47]",,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: is there any of the changes you made that you're unsure if you got right?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"The whole thing. But I would make a pull request and someone would tell me if I made a mistake anyways, so I guess I'm normally not afraid of making bad choices because I'll get told off. The only thing I really don't like is this field here, because I don't like that it was copy pasted. In fact, I think that this was outright just a bad choice. I didn't even look around, my search failed me, and if I'd seen it in three places, I would have made a test constant, so test details or something like that, and it would have all the constants that are being used by multiple tests. [28:58]",,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"Because it was just two and it was just foo, I'm not going to make a class for this constant. Seems silly.",,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
T2 [29:14] *reads task* [30:36],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"I need to remove isAnyNotBlank, which is being used by isAllBlank. So I'm am going to go into isAnyNotBlank and just negate it. And then probably putting that functionality into isAllBlank, run the tests to make sure isAllBlank still works, then I am going to try to delete isAnyNotBlank, I'll look for references. [31:33]",,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"Oh man. I'm not excited to see that it's being used in as many places as it is, because I'm trying to delete it. The more places it's being used, the less likely I am to want to delete something. How many places is this being used?",,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"Equal. I have to change all the tests. That's ok. First I'll make sure that I can move the code over and it's not going to break. Should I get rid of - I'm going to have to get rid of some of the tests. [32:21] Is anyNotBlank isAnyNotEmpty, I'm going to get rid of the related tests because they don't matter to me any more. This is where I would use my global search. [32:34]",,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"The search would pull up a box and I can type into it, and below it has a little mini editor, so I can go to each reference of a regex and I go through everything that matches and edit in my mini editor on the fly. [33:08]",,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I see it's being used in all these places. [33:36],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"And these tests, I don't want to get rid of. [33:44]",,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"Now I can directly in here, comment stuff out. And I know all this stuff is all the tests, so I can get rid of the tests one at the time. [34:02]",,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
It's only being used in one place! Why was I freaking out?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
[34:09] *edits directly in 'minieditor' - comment out tests*,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
That's the one place it's being used. [34:20],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"Now I'm going to do a bad thing again, what we discussed not doing, but .. I guess I should make this do the opposite.",,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"We said don't copy paste, I said I don't like copy pasting ... I don't like admitting to having copy pasted. But it's likely about to happen as I reason through what I'm about to do. My target is isAllBlank, so if is empty then it is blank, right. And then if .. [35:07] This is confusing.",,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"[35:16] It was right what it said about this being a confusing API. Intuitively I feel like I know exactly what is happening, but .. if it's all blank. Reading it, the true and the false .. it's.. but I can confidently say that this, in a world that is .. if it's empty then it's all blank.. I should just be inverting them. Simple as that.",,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"[36:37] Again, I don't feel too bad about having repeated code, because it will only be repeated this one time and will never be repeated again.",,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"This code is the same that the other code that I just copied from, but I'm going to delete the other code anyway so it will be fine. I probably should run the tests. [37:13]",,run tests,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"Ok. It says I did fine. So now I can go through this . is anyNotBlank. This has no usages I get rid of it, it's gone now. Now I'm going to repeat the process. [38:16]",,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"so my goal is to keep isAllEmpty and remove isAnyNotEmpty. Similarly, it's being used exclusively in the tests and this one place. This kind of looks lke the same code. Where am I? In the wrong place. [38:51]",,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"I'm thinking now that those two things look very similar. Is any blank, is all blank. I would like these to be all the same function. They use the same - they start the same way, they have the same structure. I should be able to pass in a function.. That's an aside, it has nothing to do with the current task at hand, so I should probably not care about it. I'm going to do what I did before, copy this, go to this reference here [40:23], paste it in, this becomes true, false, true.",,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
and then I do,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
this should have no usages anywhere [41:14],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
And..,,run tests,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I feel safe. Tests all pass. I think I did what it asked me to do.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: What did you do in order to solve this task. [41:51],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"I copy pasted code - again. I used IntelliJ to find references to the method, to make sure I wasn't breaking things in other parts of the code that I wasn't aware of, and then I flipped everything from false to true and true to false. Somehow I spent a long time second guessing myself.",,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: Do you know of any tools that could have automated what you did? [42:27],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"I don't think so it would be completely automated, the boolean switching. I can't think of anything of the top of my head that do what I just did. Like, I have two methods, I take the functionality of one and put it inside the other. I guess it's kind of .. there is this thing, not this method, if I could just click it and expand it or something. Anyway, no.",,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"I: If you had something that did it, would you want to use it? [43:06]",,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"It depends on how accessible it is. If it is something someone showed me, and just right click, expand, it seems like something I'd be comfortable using. But I find it unlikely that even if it existed that it would be popular. Like, I dont think I would be using it, because the goal is usually to compact, not to expand. Right, like, the idea of that sounds like it's promoting copying code, even though I am copy-pasting - so I assume that it wouldn't be popular, so it wouldn't get to me, so I wouldn't be using it even if it existed. [43:52]",,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
But I like the idea of it.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: What about something for the inversion? [44:05],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"The false true, true false? Yeah ah .. I felt very comfortable with it because the method was so small. I think if it was bigger I would feel more scared. But the unit tests also made me feel - I probably should go over the unit tests to check that they test it completely, but whenever I see a bunch of tests I think that it probably has me covered. If I make a mistake it'll flag it. Again, I can't think of an automated tool for it. Sound like the type of thing I should - like I should just be able to parametrize that stuff. The way I saw it, there was six places with the same code, I would not want that to exist in my codebase. [45:01]",,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: Was there any of the changes you made you were unsure if you got right?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"I am more comfortable with this change than the last one. I'm really sure they wanted me to do this. Last time I had to come up with a name and that always stresses me out. I mean, I even failed to follow the convention. Looking at it now, these all end in test and I wrote tests. But there was no creativity in what I just did. It is very unlikely I did something wrong.",,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
T3 [45:48] *reads task*,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"When I read the word javadoc I thought, I didn't check that the documentation were correct, it could be wrong now for all I know. Before I go on to this let me just make sure that it is right now. Is all .. ok, we're still good.",,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
[48:26] My goal is to remove the forceaccess flag. It is being used in exactly three places for this method. And I'm being told that it is always false. So this one has .. false.. in these places it is all true! [48:51],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Well then .. I don't know what to believe any more.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
The tests with true are no longer good tests. So my steps that I would probably follow - sounds so tedious.. I would probably .. [49:43],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"Delete the field. Like, get rid of the parameter first.",,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Can I draw?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"If I have some method name and a list of parameters, and this forceaccess. My one thing I'd do, if it was a big method I was afraid of, is to just make a boolean right here. Bool forceaccess equals false, 'cause that's my goal. And inside it all this code here should still work just fine. Then I can go around and make sure that this parameter doesn't exist everywhere it's accessed, a bunch of things will turn red and I can sort them out. [50:54]",,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"Now being biased that I'm in this study, I'm inclined to look for a way to delete the parameter automatically, but there's not a chance I'd normally do it. I'd take this route of deleting things, making it turn red, having some problems and then just run the tests. [51:21]",,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: Why would you normally do it like that instead?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"These refactoring operations - this is a big list of things... because it's such a big list I don't know, I never learned the capabilities, right beside this arrow is rename, I've used that some... change signature? [51:59] It's right there.",,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: You would usually not have looked at this list?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"Yeah, no, it wouldn't even occurr to me, it's just like, there's a big list behind the refactor, and I don't know what's in there. [52:06]",,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: How come you're not inclined to find out?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"That's a loaded question. I have a way in my head to do it. If someone proposed an alternative, and showed me one time, I'd probably do the alternative forever. For example when someone showed me shift shift it changed my life. I can't imagine living without it, and I'm sure there is a bunch of these refactoring operations that, if someone showed it to me, I would absolutely love them, but I already know that I can go along with this plan I outlined. As time consuming as it may be, and as likely as I am to break it, I know how it should work and how it would work if I were to do it correctly without mistakes. [53:04]",,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
There is no thought in my head of there even being an alternative. I wouldn't look for it.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Now that we've talked about it I want to try it. But I'm going to do it my way. I don't like that there are so many of them. [53:29] Then .. There are 24 places I'm going to have to make a change. I'm just going to go through these one at a time. This is the first one.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"I know that I can .. Ok I'm just going to go for.. You know, this sounded nice and methodical, but now that I'm looking it what I think what will happen is I'll let the code go to a state where it's all broken and I'm going to be ok with it and trust myself to figure it out, and then I'll fix the tests and then I'll run them and hope I didn't make a mistake along the way. [54:26]",,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: Are you still planning to follow your described plan?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"No, I'm simplifying the plan. I'll delete this and it's going to break a bunch of things in here, and I'll fix that. All the while, the tests are going to be broken. That's ok. I'm going to complete this file, go over to the tests and look at them and see like, what are you supposed to be testing. If it works, I did a good job. If it doesn't work I have the git history to save me. [55:02] Only.. there's one thing I normally like. There should be a little arrow here showing that I deleted something, so I can just click it and reinsert it. Unfortauntaly the git facilities in this IDE is a little lacking, so I am afraid I'll make a mistake. But this is simple, I look for this field forceaccess and I delete it. I'll be fine. I'll go for it. See, and everything gets highligted red and I konw exactly what to change. [55:57]",,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
*getField(C S b) : delete parameter => error in body*,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"If setting this to true is not allowed, then the behavior when it was set to true is not allowed either. There.",,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
*delete reference in body*,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
*checks error on signature* [56:13],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"Ugh, it's already defined.",,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"Oh, I see. You are no longer necessary. I can delete this completely, right? Yeah, I'll do that.",,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
*delete wrapper*,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Sweet. [56:36] That probably worked. It's red. It's probably red because it's using - yeah exactly.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"*check errors on callers, ignore errors*",,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
*search for forceaccess*,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I'm going to repeat this. So this getDeclaredField (wrapper) I'm going to end up deleting. Illegal? No more of that. Same thing,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
*delete javadoc*,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
*delete parameter*,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"Same thing, if forceaccess behavior is not ok, this has already been defined [57:15]",,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
*checking javadoc*,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
This is actually the documentation I want.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
*delete method signature with javadoc + wrapper body to manually inline* [57:38],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
That went back to being ok. Just going to pretend that's correct.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: Now you went back and checked what you previously did?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"Yeah. It's may be controversial, but I'm not a big fan of heavy documentation like this. It's an easy mistake to make and my IDE can't catch this. I made a mistake. [58:33]",,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Same deal. This is the real documentation I want. This guy.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"*manual inline readField (F, O, b) [58:46]*",,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"if forceaccess.. and.. no this will always be false so that should never happen so I'll be fine. Fieldname, forceacces is here.. so .. wait, readfield. [59:18]",,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Are you the same thing. Yeah. That's what I thought.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"*remove parameter, checks that errors, confirm that the method above is wrapper* [59:24]",,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
*manual inline*,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"So forceaccess no longer exist, readfield.. should not need that, it's always set to false. [59:53]",,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
This is very tedious. I did not expect it to be so. I am doing the same thing over and over again. But I'm getting faster. I'm actually getting more reckless. I'm deleting these comments without reading them assuming they're all serving the same structure. But there is a record of all the changes I've made. if force access ..else... yeah. So what I should have done is committed my changes from the previous two tasks so I could just reset. That was a mistake not doing that. [1:00:43],,Named (git),0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
But I think I'm going to be ok.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"*repeat: delete parameter, remove from body, manual inline to wrapper signature or javadoc* [1:01:16]",,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"Ok, so this file is fine. Oh man, I broke the tests. [1:01:36]",,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Do I even care about these tests? The tests for the regular one are still happening.. they are still here.. I'm just going to run it for coverage.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"This is my current plan. All the ones that are set to true I'm going to comment them out, then run them with coverage, go back to this file, and make sure that it is still completely covered. [1:02:23]",,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"Again, I feel like this study is very much exposing bad habits I was not aware I had. I'm sure there are much better ways to do all these things. [1:02:43]",,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"Now I am looking for all the ones, all the tests that call the methods we just edited with true, because I should not care about this behavior any more because it is not defined behavior any more, so all the ones where it was set to true, don't need to exist. [1:03:34]",,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"Now if I run this with coverage. I don't want to read all the tests and make sure that everything is covered, that's a waste of my time. What? Oh, .. I'm fine with this. [1:04:38]",,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I want to see where else forceaccess exist in the code base. No it's all stuff I commented out. [1:05:11],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"This is fine. What does this thing do? This is fine, this is not related to what I just did.",,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"I was just double checking to make sure that there aren't like, other functions that are setting the boolean to true. But that should've come up when I looked for references, so I don't know why I freaked out about that. It's fine. [1:06:10]",,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
The next thing I'd do is delete those comments. [1:06:15],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"That's the only other - the next thing I'd delete all these comments. Then I'd make a PR, get my supervisor to review it. [1:06:39]",,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
*deletes commented out tests*,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I think that was it. [1:07:07],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"Those tests are giving me a lot of comfort, since I didn't write them.",,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: What did you do in order to solve this task? [1:07:48],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"I used the search in file to look for forceaccess to get rid of the flag. I just deleted it. It was all deletions. I just searched for forceaccess, deleted the parameter - I realized I was very lucky that it was called by something else that had the flag set to false all the time, so I didn't have to repair all the tests. I was very sad that I'd have to go and repair all the tests. Although it would probably just have been a multi caret over all the false and just delete them. Probably wouldn't have been a big deal, but it was nice that I didn't have to. And then all the ones where it was set to true, that was no longer defined behavior, so I just deleted all those tests because they are no longer necessary. The only hiccup was, I thought - like I did make a mistake about the javadoc, I'm glad I caught that. That is very likely to have slipped past me. [1:09:08]",,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: Do you know of any tools that could have automated any of the things you did? [1:09:15],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"No. But when we were having this discussion earlier we saw something that said refactor change signature. It has parameters. So .. this leads me to believe that this would serve my purposes. I'm curious as to what it would do different from me just deleting it. [1:09:47] It would probably have some interactive editor, where it's like, you want to delete this parameter but it's being used here, what do you want to do. But to me that's not very different from what I did. I deleted the parameter, things turned red, and it turning red is the same as the editor asking me what do you want to do now that this is broken. [1:10:13]","Reflection
Predictable",,1,0,0,0,0,"<1,0,0,0,0>",0,158-158,1,0,0,0,0,0,0,0,0,0,
"Althought, this is like fancy .. looking at it now, now that I see this page, I don't think this does anything different from what I did. I guess it's cool if I could do it over multiple methods and I'm just clicking through .. like, going from method to method in a little. Like similar in this view, and I can go to it directly, and I have this little editor and I can edit things. [1:10:45]",,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"Maybe it'd be cool if I could search for everything that has a forceaccess and just like .. inline .. it would have something like, you are deleting this parameter from this method, how do you want to handle it in this one usecase here. And i could just click like, with a next button and click through them all. I really like this view, I find it is often very useful for me. [1:11:14] I can directly edit things in here. For example this thing, this already for ...oooh... this thing. I didn't read this. [1:11:33]",,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"I might have made another mistake. I went on autopilot after the first two methods. For the first two I was like, what's going on here, and then after the first two I just ...",,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: You did speed up after the first couple of times.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"Yeah, like I said earlier, I'm probably getting more reckless, but the tests will hopefully catch it. And the tests said I did it right, but there's a ..mmmm...there's a. I don't think it's correct. [1:12:30]",,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"Yeah ok, so this, now that I'm seeing that this still exist in comment form, I should probably take time to read each of these and see what they're doing. [1:12:51]",,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"I: Can you elaborate on what determined the order you did things. You removed the parameter from each method and the method body, right.",,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"Yes, from the .. I delete the paramter, and I see inside the method body what's affected, and I made a choice, like in the if-case or else-case, and deleted the true case. I missed this, and I feel reckless, but we were just talking about that other thing, and I would have made the same mistake .. actually, I don't know if that's true. I don't know how this view works. I'm curious now, I'm going to try and use it. [1:14:03]",,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
*example tries change signature refactoring*,,Invoke (Change Signature),0,0,0,0,0,,1,,0,0,0,0,0,0,0,0,0,0,Change Signature
can I delete this?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
what.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"Show conflicts .. ok so this looks less handy than what I thought it would do. I was hoping it'll give me a little editor where it would show me, like this is where it is being used. But I hate this view. Every time this comes up my eyes glaze over, and I say ok, I'll just do force refactor instead of this safe refacoring. This is unreadable. [1:14:50]","Invocation
Not Satisfaction",,0,0,1,0,0,"<0,0,1,0,0>",0,170-170,0,0,0,0,0,0,0,1,0,0,
"I mean, sure it's neatly organised, but when you have a bunch of different levels.. no.",,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: what information were you hoping would be present there?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"I'm about to delete a parameter. Where is that parameter being used, and it's just showing me the hierarchy of .. which file, which class, method, you know all the way down to the parameter itself. I don't find that very useful for me. If I delete something I get these red underlines. They show up here in the view I'm used to seeing. They show up along here, on the side, aother view I'm used to seeing. I can preview them easily. That view - no bueno, I'm not a fan. [1:15:46]","Invocation
Not Predictable 
 (“I’m about to delete a parameter. Where is that parameter being used, and it's just showing me the hierarchy of ..”)",,1,0,0,0,0,"<1,0,0,0,0>",0,173-173,0,0,0,0,0,1,0,0,0,0,
"I guess, this thing was set to false, it wasn't even related to forceaccess as far as that view was concerned. While I do regret having made this mistake, and hopefully when I made a PR, someone would have said hey you screwed up, but I don't think that other thing would have helped me, so I feel a little less guilty now. [1:16:13]",,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"I: Why did you chose to not use it, at the very beginning when you opened the menu and looked at it.",,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"I'd say that if I was at home and I was given this task, I would not have opened the menu, it would not have occurred to me that it existed. The only reason why I even thought of it was because we're in the context of this study. I didn't use it because I was attempting to emulate how I'd do it at home, and at home it wouldn't have occurred to me. [1:16:53]",,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: Are there any changes you are unsure if you got right?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"Now that I'm seeing those forceaccess comments I'm pretty sure that's wrong.. I would have been very confident, but seeing this comment now I suddenly don't trust myself any more.",,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"I: You used your string search right, did you use anything with a semantic understanding?",,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"It's just a string search and I used it just at the end to look at documentation. If I use this thing [1:17:41] this will not help me, because it will not show me that comment. It will not show that comment that I found with the string search. I found the error on my own because of the string search. I do like that this thing exist. Cause like, it is named forceaccess and I was searching force space access and I found it. [1:18:12]",,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"I: For both this task and your other ones, how would you normally organise your source code changes to make sure that you didn't miss anything. For example, you commented out some code, moved some code, deleted some code. How do you make sure that you don't for example miss deleting some comment?",,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
[1:18:47],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"A combination of I scroll through the file from top to bottom, and keeping a mental model. There is no efficient way. I think dead commented code crops up everywhere.",,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: So it occasionally happens that you miss it?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"Not miss it, I may keep it for longer. In this case I was sure that I wouldn't need it, but if I was working on a larger project and I knew that other people were using the code I commented out, maybe I'd leave it there in this comment and I'd say, hey guys, what's going on, check out the PR, and then when we merge it we'll delete it. [1:19:33]",,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"And then sometimes it doesn't get deleted and there's a conflict on the comment, yeah that happens. I don't know if there is a good way to tell me what's just dead code.",,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"I: So you usually just scroll through and look for it, or you keep your mental model.",,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"Yeah, those are the two main ways. I knew that all my comments were happening in one file, so it didn't stress me out. If it was happening in many places, I would always go to git. That's my go to. I use github desktop. Every time I push something I look over every single line, because sometimes, no matter how big or small the committ, I want to make sure that I only leave dead code in on purpose. [1:20:30]",,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: So that's how you would validate the changes you did yourself.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Yeah.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: If you were to do something like that without source control?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I can't think of the last time I worked on something without source control. That is a good question. [1:20:49],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"I don't know. Even for my homework, I make a private git repository, just so I can track that. If I didn't have source control and it's a serious project that I care about, I think it is more likely to have comments everywhere. If it's a .. that is my source control. My comments become my source control. [1:21:34]",,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"I: If you had discovered, for example in the last task, that you did something wrong, and you wanted to undo it. How would you do that?",,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"Normally I see a little bar here, and I click here and it just undoes the change within that section to the last commit.",,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: So you would use git to undo rather than the IDE?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"Yes, 100%. I would revert that section, I would do a hard revert, and then .. you know, what were the choices that went wrong. Or I would diff it, and check it. Pull up another screen and look at it closely. I think git makes me less likely to make a mistake.",,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: What about this temporary state of brokenness we had. [1:23:02],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"That is a scary state to be in. I'm always uncomfortable and try to get out of it fast, which may be why I sped up. Because, like, I wanted to get to a place where nothing was red as quickly as possible.",,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"I: Do you mean locally in the file, or do you include the tests? [1:23:24]",,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"Knowing that my changes here were making the other files go red, that's what was stressful. If it's all contained in one file, I don't care what's going on. If I was to do this again, with the knowledge I have now, I'd probably gone and dealt with the tests first. I had the impression that some would be set to true and some to false which made it seem like a tediouos task I wanted to deal with later. Had I known that all were set to true I would have just gone and commented them all out and I'd have the safety to work in here, it'd be contained and not affecting the rest of the code base. [1:24:12]",,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
It's always that feeling of affecting things outside of what I'm looking at that makes me want to speed up and get out of what I'm doing.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
[1:24:24],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"I: In both of these sequences of change, the one you described now and the one you did, you chunk the changes into 'test file' and the other class. Did you consider switching between them, going back and forth method by method? [1:24:43]",,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
No.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: How come?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"I think that would have had the same result. I don't .. I think the context switch just throws me off. When I'm moving from here to here, it's like walking into a new room, and you're like, what I'm I doing here. That happens when I open up a new tab. I like to stay as compartmentalized as possible. [1:25:21]",,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"I: You mentioned that you usually use some refactoring tools, for example rename.",,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"Sometimes, but not always. I found cases, especially with IntelliJ 2018 and forward, it's too aggressive. It renames too much. Let's say I have a method name, the same as some end point name being stored in a string, which is the same as some documentation stored in a comment. When I click refactor, rename, if I'm not cognisent of the end point it is going to rename that. Unless I have a complete model of the entire program, it is very likely that it will rename such strings. Sometimes it comes up with the view we talked about before, saying this is where it's being used, this is where its being used. I don't like that view. [1:26:36]","Reflection
Not Satisfaction (“renames too much”)
",,0,0,1,0,0,"<0,0,1,0,0>",0,209-209,0,0,0,0,0,0,0,1,0,0,
"It would be nicer if it almost brought up like a slideshow showing all the places it's being used, and I could click through them and go like, oh, that's an endpoint, I don't want it there. Although, if the project is sufficiently large, that could become really inconvenient, that could be worse. If I could just get a slideshow like, within this package, that would be nice.","Reflection
Predictable (“a slideshow showing all the places it's being used, and I could click through them and go like, oh, that's an endpoint, I don't want it there.”)
",,1,0,0,0,0,"<1,0,0,0,0>",0,210-210,1,0,0,0,0,0,0,0,0,0,
"So I do use it, but I wouldn't say I'm 100% confident with it. I don't always trust it. [1:27:12]","Reflection
Trust
",,0,0,0,1,0,"<0,0,0,1,0>",0,211-211,0,0,0,1,0,0,0,0,0,0,
"I: Why do you mean by that, not trusting it.",,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"I'm afraid it's going to do that thing where it's going to rename something in a string and break my program, or rename something in the documentation in some way that I don't want it to. Luckily with version control I can see these things. But sometimes it's easier to look for the references because it's just where it's being called, and I can just .. like, use that global search. Sounds bad when I say it now, but I'll do something like this.. [1:28:10]","Reflection
Predictable (“I'm afraid it's going to do that thing where it's going to rename something in a string and break my program, or rename something in the documentation in some way that I don't want it to.”)
",,1,0,0,0,0,"<1,0,0,0,0>",0,213-213,1,0,0,0,0,0,0,0,0,0,
"If I do this, I'm more confident because I can see that these are all the method calls, I can go in and just replace one at the time. And this has an equivalent, ctrl shift r. And I can put this in here, and just go through and replace replace replace. [1:28:45]",,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"I: This is a textual replace, right.",,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"Yes. This, to me, in many ways feels safer, because I get a preview of what's happening as I'm doing it. While the global rename happens everywhere and I just have to trust that it did the right thing. I guess this is the exact slideshow I am describing. This is how I want things to be replaced when I'm afraid. [1:29:07]","Reflection
Trust",,0,0,0,1,0,"<0,0,0,1,0>",0,216-216,0,0,0,1,0,0,0,0,0,0,
I: The global rename should be safer since it is using language semantics and should prevent you from accidentally renaming something.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"I guess that is the problem. Let's say this is javascript.. this here, writefield, if writefield existed in an end point, I'd want this here, to make sure that it doesn't do that. This paren. [1:29:50]",,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"If it's in a string you're not going to have that there. But if it got passed in a function call or it got passed as an argument, then it wouldn't catch that. And the rename again is supposed to be safer, because it's supposed to take into account the semantics of the language. But it is the fear of changing the strings I guess. I don't know if this is as much of a problem in Java, but I noticed it in typescript, is where I had the problem the most that renaming would break things.",,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: Does your experience with refactoring tools in one language impact what you expect from them in others? [1:30:35],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"Because I only use rename, I only had that negative experience in typescript, but that fear still exist in python or java, even though I don't think I have experienced that. [1:30:54]",,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I don't think I've written that kind of application code before in python or Java. I assume they all work the same. I just use jetbrains IDEs for everything. I use IntelliJ for javascript and typescript and ruby. [1:31:13],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"I only have three editors, cline, pycharm and intellij.",,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"I: I'm curious about your naming on the first task, you looked for a tool to automatically move the methods around, and you look for extract method. How do you think that compare to move?",,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"I am inclined to believe that move method would keep it in the same class. Like moving it in the file without you having to cut and paste, because although I did it all over this study, I'm told that cut and paste isn't good. So I would assume that there is a syntactically aware tool that could do the cut and paste with the javadoc for me, and I would expect that extract could take it up to a parent class, a child class, a different class altogether. I'm assuming that extract is like, I don't want it in this class. [1:32:50]",,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: For the second task. Inline method is a refactoring that takes the body of a method and replaces the call to a method with it. How would you feel about using that?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I was describing that.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"I: Yes, you were.",,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I was describing it and it exists. I didn't know it existed.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"I: Now that you know it, would you be inclined to use it another time?",,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"I would try it and see how I feel about it. It sounds nice. You just click it and it puts it in there. I would try it. I don't know if it would always work. What if it's in an if-statement, can I put the body of the whole thing in the if .. I don't know. [1:33:59]",,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: When you do use refactoring tools how do you ensure that they are correct?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"Git diff is huge for me in my process. Tests, when there are tests, are nice. Those two things. Tests, and if there are no tests, the diff. [1:34:41]",,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: Final Qs?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"these are operations that all seem very straightforward, but it is uncommon that I would do them all backtoback. And when I did them backtoback I realized, I can't believe I'm doing this so inefficiently, there has to be another way. But having them all together in this way makes me realise all the one two minutes I've thrown away. Like, all the things I did was insane. I teach software engineering to kids and I would never tell them to do these things.",,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: How would you tell them to solve this? [1:35:46],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"I would probably say your IDE is really smart and you should get to know it, but I don't know it apparently. I feel like I just got exposed.",,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
fin,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,