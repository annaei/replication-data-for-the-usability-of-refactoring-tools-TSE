Intro chatter [04:17],,,Predictable (1),Effective (0),Satisfaction (1),Trust (1),Efficient (2),Vector: ,Invoke (0),Row Range, Predictable (0), Effective (0), Satisfaction (0), Trust (1), Efficient (2),Not Predictable (1),Not Effective (0),Not Satisfaction (1),Not Trust (0),Not Efficient (0),Refactorings
T1.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
[04:20] Trying to figure out what's in the test folder.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: Why do you use the terminal?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
It's fast and I know exactly what folders to search in. IDEs have it built in the files to search and.. But I usually have multiple projects so I don't have to open multiple instances of VScode so if I do a search I will get files from all projects and I don't want this. This way I am searching just the folder that I want to search. I can quickly narrow down what I'm looking for. When I searched for test ls I was curious what was going to pop up...,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Test cases are already here. Test is any empty.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: What are you checking?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I'm looking for this method. This one seems pretty straightforward I'm just moving all those test cases into a single class named something descriptive so it's easy to find. I haven't looked at the structure of these files yet but there might be some supporting code that I need to move. First I am going to create a final destination for it.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
[10:06] Let's see the pattern..,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
String utils trim empty test,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I spend a lot of time figuring out good names for stuff always try to put some thought into that. I'm looking .. there's stringutils and stringutilstrimempty. I'm trying to see why they were split out in the first place. The problem is I don't know why they were split out. [11:40],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
TrimStrip methods? What test here.. so there is a string utils class a method isEmpty and it's testing ..,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"[15:11] I wanted to look at the code this was testing but I think I am going too far and don't need to worry about that so i'm taking a step back. A big part of our job is that the pieces we are working on, it's not ok to just take the task for what it is and do that. A lot of the time the code we are working on has impact in other places and in this case if the task is just to fix some test cases run it and see what is wrong and fix it but it may be some things I am totally missing if I don't look at the code itself that it is testing. Like what I don't understand right now is why those two are separate files and I would like to understand that but it may take a bit of time. [16:23]",,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Let's move one test case and see what we need to make happen.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
TestIsAnyEmpty. This one.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
What are these lines for? Ah it's just splitting the constructor from the test cases.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
That is helpful.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: This is basically copy-paste right?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Yes.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Now I ran the tests to see what is happening and it magically passed without me doing much. And now I want to find out why so I will make it fail first.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I want to understand what these asserts mean.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
So it takes a list of parameters..,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
this will make foo fail.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: What was the last thing you did? You made it fail - was that your intention?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Yes. I wanted to make sure - when it passed - I didn't expect it to pass by just copying in the structure of the test case and it passed so I wanted to make it fail to make sure that actually tests. Since this is a refactoring I want to do it very carefully. What I am actually going to do is,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Here is the original file that has eight test cases. I am going to copy this into a new file. [22:27],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I don't want to introduce bugs by just moving. Now I have copies of these files and I can do a git diff to see what I have changed. In the files I want lines removed I don't want anything modified.,,git diff,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
If I go stringUtils [23:58],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Now I run the tests and see that they pass,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I changed the wrong file so I will undo that. [27:18],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Now the right file is open.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Now I go and modify the other file the same way.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
That may be killing helper methods in here but that may be ok - it may be a problem. I'll deal with that in a bit. [29:21],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Killing some helper methods in here.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
What I always worry about is as I'm testing that I am actually deleting some typos in there. That's what I'm trying to avoid. I've probably deleted code that I needed. [30:10],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
But.. run them.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
[30:26] That passed. And that passed.,,run tests,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
These test cases are pretty simple that's probably why they are passing. They're not using any helper methods. I'm not even going to dig into that. Now I think I need to - I think it's clean - I need to do the same thing in here.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
StringUtils... [31:09],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
StringUtilsTest. I'll move the corresponding methods in here.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
*counting methods*,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I remember that they were all consequtively laid out. Get rid of those. [31:58],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Same thing with this one - there's four methods.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
There's a tab right there.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
[33:12] I want to try and keep the diff nice and clean. Usually an IDE will keep strip the tab like that. Usually any trailing spaces I will take out.,,git diff,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: Is that something you usually worry about?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Yes. If we are doing code reviews on hundreds of line of code - we look at diffs to do code reviews we don't look at the code - if there is code in there that doesn't need to be in there that is just noise. We try to leave that out. Even though part of a refactoring may be cleaning up code that is formatted badly. First you may run it through whatever to clean all the warnings and commit that then if you do some logic or performance stuff you do that separately so people can just ignore the other noise and you see the diff between the next commit. So you can code review the separate diff. It is way easier that way than if with formatting stuff it can be hundreds of line of code when really it is two lines of code that made a difference. When doing code review it is good to make people look at the code that actually make a difference. [35:15],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
We're at a good state. Let's run this.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: What have you done so far?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I moved the test cases into two new files each in a very safe way. I'm pretty confident that I didn't make any mistakes. I may have some extra code in the two files that I copied over but everything passed so that is good. Now I can combine the two files. And everything is in git. I can see from ... I don't have any modifications that haven't been verified by me. I'm pretty happy right now. Is a single test-class my goal? Ok let's do that. Now I'm going to copy everything from one of them into the other. I have utils2 and this one. Let's get rid of these because we're happy with the files. Let's copy this because it is smaller. [36:39],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
the const up there.. inconsitent spacing.. resist the urge to clean up. [37:31],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
This seems to be a common pattern so I just put this in here. [37:48],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Now I can delete this file.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
see what the diff is here - four test cases - I'm happy with that. run it. There's no reason for this to fail. That pass.,,git diff,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Let's add both of these. Now I'm going to rename it.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
String utils trim empty test,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I'll add this..,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
copy the class name,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
That pass. Let's add both of these. [38:40],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Now I'm going to rename it [38:52],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
This is a good place to end [40:36],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
but for sure there are - some of these constants that should be cleaned up. In both places. I'm sure there is unused stuff in here and in the original classes. Should I do that?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: No you don't need to. Would you do that in both of the files?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Yes. There would - we use tools for that but I'm sure I can do this manually.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: Let's just stop. [41:29],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: What did you do in order to solve this task? [41:49],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I was very very careful. I duplicated the classes and reviewed the code tried to minimize the copy-paste. I don't think - I did copy paste in one step when I was combining the files into one - I'm trying to avoid copy-paste errors. Copy-pasting the class-name but it's not a big risk. [42:23],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Just one risky step.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: Why do you consider it risky?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Copy-paste errors happen all the time. Copy-pasting transcribing I try not to do stuff like that.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: I noticed you use the terminal a lot do you usually do that? [42:50],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Yes. I try to do that using git.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: How would you have solved this if you didn't have git?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
If I didn't have git - wow? It is easy to get lost in all the steps then. With git you get to a state you're happy with and that is it you don't go back from it. Otherwise if I didn't have git I would skip all these steps and I would create one destination file and cut paste cut paste. That way I don't have to do any other stuff. I would make sure that if I am cutting I am pasting somewhere so I don't forget I would do it immediately.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: So instead of copying you would cut? [43:46],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Yes.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: You used git to undo as well by checking out rather than the IDE. How come? [44:00],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I don't trust the IDE-undo. Undo gets lost right away if you close and reopen if the IDE crash and you depend on undo you just screwed yourself.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: Do you know of any tools that could have automated the steps you did?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I have not used any. I'm sure - I saw some refactor features in the menu here so maybe there are some methods you can mark or something. There may be tools in here but I have never used them. I'm sure there are.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: Are there any of the steps you're unsure if you got right?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Nope. [45:14],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I was very careful. I do know that there is unnecessary code in here and I know I could clean that up. That would be the next step.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Task 2. [45:40],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Return true if .. wow they have the opposite behavior right? [46:51],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
We are changing what it returns.. [47:25],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
..too much I'll just search for ..,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: What do you mean by too much? [48:23],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Too much for me to absorb. There are some tests in there and I don't want to look at all that yet. If I do this I see all the places it is called and defined. If I want to see - often I just do this - for ruby it is def so it would get the definition in Java I would be grepping for public or private or protected. or braces. I cannot use this because it would get everything as well so how would I do this in java.. [49:27],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
That would give me the file. Usually I would open it like this but that is not going to work.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Now I'm curious if this method exist - it exists that is helpful. That exists. So they're all in the same class. Ok. Usually we would never remove this we would just deprecate them and have it point to the other one. isAnyNotBlank we would just use that. But sure let's do this. [51:33],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
weird.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"[51:50] 
 I: How come you undid that?",,undo,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I am curious. So anyNotEmpty.. they each have logic but they are just a negation of each other aren't they? Am I totally missing something?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Ah interesting. This is doing what I was expecting it to do. So if I am deleting this one I am not doing it right. [52:54],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: Before you start how do you plan to solve this?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I need to move the code from the other one into here. I am seeing that they both take the same parameters. What I am going to do - isAnyNotEmpty isAnyNotEmpty is allEmpty - copy in here.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
That is wrong.. I'm going to continue.. Undo everything.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
What I am going to do is clear out some of this noise. Tackle this one first. Is All Empty is Any Not Empty. [54:25],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: Sorry I want to understand what you just did. You started with copy-pasting it and did everything and now you're starting fresh?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Yes.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: How come?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"Because now I understand the problem a little better. I know that the two methods exist one is the negation of another I am going to delete one of them, the one containing all the logic so the first step is I need to reverse that. So I'm going to do that first. And I am going to do it in a safe way. So I have isAllEmpty in here and isAllEmpty so that makes sense. In my IDE I double click something and if I highlight that it will tell me if it is the same string. That will give me a visual indicator that this is the same thing. [55:28]",,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
So in this case I might just do that. I'm still not looking at the right thing. I would have made a huge mistake. Get rid of that. [55:47],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: What almost happened there?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I was going to use this method instead of this one. Just confusing myself.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
No changes. Pretty sure this is the same as this.,,git diff,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Just copied that into here and if there was a change I guess it would have given me a star there.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I'm pretty sure this is the same thing. So let us reverse this. [56:42],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: What did you just do now?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I reversed them. One was a negation of the other and now the roles are reversed. I'm just going to check - comparing method names that's all I need to do to make sure that it is correct. Now all tests should pass. [57:32],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
They did not. Let's see. They're not.. that doesn't make any sense to me.. is all empty is any not empty. Ah. I still need to reverse the logic of this.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
My gut feeling says this. I did something I normally don't do. What I should have done was adding to git so now I have to kind of manually check. False true false true false true. I was happy at the previous step but I didn't do a git add.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Let's run the tests again [58:50],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: So you add every time you are happy?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Yes. I could commit but I would not push because that triggers a build that runs the automated testing. Once in a while.. another goal I talked about earlier is to minimize the diff. Another goal is to have a clean commit history and commit messages. I am just adding right now because I know I won't do a lot of step but for a bigger project I may commit with garbage messages and whatnot and then I will rebase and squish it down to one commit or logically grouped commits. Whatever makes it easier for code reviews.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: What does that mean to say have clean messages?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
In this case one way I could do it - how I am reversing them - this could be one commit message and that would mean that I reversed the roles they are playing but the output should be the same the tests should pass. Another would be to remove the old methods and then - in our code base after removing a method it doesn't make sense to run the tests locally so I would push it and that way we could have our whole test suit run and tell me exactly where it fails and then I know which test I need to update. Or I guess not just the tests but the code using that method.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I would catch all the places using this because I can search for it. But that is what I mean I would do it in a way that ease code review. If it has no benefit I would squeze it down into a single commit. [1:01:40],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
This will work. So we're .. doing the same thing on the other one.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Is any not blank..,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I just had a thought. I guess it's not relevant yet - I will save that thought for later. I was thinking about comments if I delete a method if I lose comments.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Just checking method names,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Then I will reverse this. Ok.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Run the tests. Hmh. I was not careful. I copy-pasted but I didn't update the definition of the other one.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: Did you check that when you looking at the diff?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I missed it. It was up here in the diff. [1:04:33],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I didn't check - I didn't change it right there. That's why I don't like copy paste. It is so easy to make mistakes. When you're doing it repetitively you're more likely to make a mistake and when you are redoing the same thing you just glance over the details a little bit. I think that's what happened there. At least the tests bail you out. If the tests weren't there I would have left it like that. [1:05:28],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
That would've been a bug. When you have tests you have that safety net.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: Does that impact how you work?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Yeah. Otherwise I would never do a change like this if we didn't have tests. Why would - like API bloat? Hah.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: So you just wouldn't do it?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Yeah. It doesn't have any benefit to the customer. It is not speeding up their codebase. Just use the other method both methods exist. That's why they were put in there in the first place. Because somebody didn't like it so they put in the new one which is better and return the negation of the crappy one. [1:06:28],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Ok so that works. Ok so we're in a good state. Now we can delete stuff. We don't want anyNotBLank.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: What are you doing now?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Searching for all the places it exist. Oh what is this.. [1:07:19],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Looks like it is only in one test class the one we are working on. StringUtils test files.. that is weird. [1:08:38],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
It is not even being used. I guess this .. ok I won't question that too much. You'd expect ths method to be used. Is the other one used?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: It is an API. [1:09:06],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Ah got it. If it is an API how can we remove it?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: Short answer you don't have to worry about clients. Long answer it was added in-between releases so it was added after the last release and is now being removed before it is published. So you don't need to worry about that.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
So we are ok to remove it?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: Yes. [1:09:31] You only have to deal with the code you have here.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
So .. isanynotblank...is any not empty. See you later.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
[1:10:00] is any not empty,,git status,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
is any not blank.. [1:10:14],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Let's fail some tests. They should fail as we expect because they're now gone. It's convenient because we can just click on this. [1:10:57],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
TestIsAnyNotEmpty.. delete that. [1:11:08],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I guess because I deleted some code so this line does not match up.. let's delete this. Wait. So the first time around we had how many errors. 18 errors.,,git diff,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Now we're back to 9 errors. AnyNotBlank.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: What did that tell you?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
That the change i made did something I just made a small change and this is a small change.. I already grepped this so I know .. kind of know what I'm doing. In this file.. [1:12:32],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
ok that works.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
is any not empty is any not blank,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
at this point I think it is pretty good.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: How did you solve this task?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
We deleted two methods and deleted corresponding test cases one case for each. A complication was that there was negated versions of each of them so we just had to move the definitions of the methods around to try and minimize these things. [1:13:51],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: What changed between the first time you started moving towards the solution and then you restarted.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"When I looked at the wrong method I thought that the negated version of it had its own definition. That was obvious if you define two bodies of code that does the exact opposite of each other, then one of them does not need to exist so I was confused. But then when I saw that it was negated so that was good then I was happy. [1:14:34]",,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
When I undid I had a better understanding. When I had a good understanding I just reset it. I knew what to do next.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: You did some searching as well. You used grep quite a bit. What were you searching for?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"All the places it was used. It gives a good understanding of kind of the footprint of the code, how much code I will be touching. In this case, two files. So i wasn't too worried.",,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: Do you know of any tools that could have automated any of the things you did?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Nope. I'm sure there are but I have been doing it this way for so long that I probably wouldn't even trust them. [1:15:29],"Reflection
Trust",,0,0,0,1,0,"<0,0,0,1,0>",0,165-165,0,0,0,1,0,0,0,0,0,0,
I: Why not?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
It is a process. I understand the code when I am doing this. If I have a tool that just does it for me - do I really know that it found everything? I am not sure. [1:15:44],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"I would probably still be checking. Maybe it would be helpful. This took like, what, half an hour, so that could be done instantly maybe. [1:15:57]",,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
But then I just spend the rest of the time verifying. Maybe there are time savings? There probably are time savings. Part of being a developer is figuring out how things work. I actually enjoy this stuff so it would be kind of taking the joy out of my job if I do stuff like that. You will probably get different answers from anyone else I guess.,"Reflection
Not Predictable 
 (“But then I just spend the rest of the time verifying. “)
 Efficient 
 (“There probably are time savings”)
 Not Satisfaction
 (“it would be kind of taking the joy out of my job”)",,1,0,1,0,1,"<1,0,1,0,1>",0,169-169,0,0,0,0,1,1,0,1,0,0,
I: What makes you trust the tools that you used just now?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
The grep and so on? They are very - primitive right? They do one thing really really well so I find what I can - grep is good because you can chain and reduce it down to only what you care about. [1:17:02],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Task 3 [1:17:06] *reading task*,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Seems like fieldUtils is a bit too flexible by default and we will be adding a flag to open that flexibility. Let's look at the file.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
So these are the two files. Just curious how big the test cases... *scrolls* quite a few test cases.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Then let's see. [1:20:15],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
So API for reading and editing fields. Scope. [1:21:18],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Test cases usually do a good job of documenting behavior so I'll see if there is anything here about scope.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: Let me clarify something the flag already does exist it is called forceAccess,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
We are removing the flag. And we should just treat it as if the value is always false.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: Yep. Again don't worry about client code only the code that you have here. [1:23:15],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Ok.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Let me see how many places this is used.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: What does this result tell you?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Nothing yet. I am trying to find all the places it is used. It is a little too messy. [1:24:01],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
So there is eight methods that has this flag that we will probably need to update. Let us see the first one. [1:24:27],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
if forceaccess else continue so I am just going to continue. Get rid of this.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Ok. Now I am trying to think what's the .. I'm going to be touching a lot of code. What is the cleanest way to do this. [1:25:03],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: Are you making your strategy different from in the other cases?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I am not sure yet. I am trying to figure out what to do. [1:25:25],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Here forceaccess is true,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
testGetFieldForceAccess. [1:25:40],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
One strategy would be to change the internal definition of all these methods first so that it always executes as if it was false. That will reveal the test cases that I need to look at more closely.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: Can you clarify what you mean by the internal definition?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
It takes a parameter it can be true or false and then it has logic inside to execute whether it is true or false. I am thinking of updating all the methods so only the false branch executes and just ignore the parameter that is passed in. [1:26:38],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
That is just noise right now. I'll probably do that. Then I can see which test cases fail. The test cases probably just need to be deleted then I will remove the parameter and update all the places for that. I am sure there is a way to automate it but I am going to do it manually. In half an hour.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: Why do you want to do it manually?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I don't know this IDE and it is probably the fastest way to do it in one half hour. *git check*,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Everything is clean. Let's do this. [1:27:27],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I need a file to jot stuff in.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I want to go through the methods one by one and keep track of which I am at. I may use evernote on my computer and use two checkboxes because I know I will go through each method two times. [1:28:46],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
But here I'll just put two x-es beside it as i go through stuff.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Ok first one. This one just passes in X so we don't care about that. Hmh. [1:29:07],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I was expecting it to be a parameter here. I'm trying to understand what I'm looking at that is wrong. [1:29:45],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Ah it's been a while since I did Java. We cannot do this in Ruby.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
So if forceaccess. We are assuming this is always false.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: What does this first x signify? [1:30:35],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
That I removed the logic.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Next reduce on logic [1:30:51],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
if forceaccess [1:31:20],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Forceaccess will never be true,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
One more readField here. [1:31:35],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: To clarify you said used the x to mark that you removed the logic but here is is still present? [1:32:15],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
It is just passing it along it is not executing anything. GetField will internally assume that it is always false. I am going to leave that. Here t is just passed along.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
*marks readDeclaredField*,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
[1:32:54] writefield.. here. If forceaccess this will never be true.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
*reduce on logic*,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Nothing to change here just run the tests.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
*run tests*,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: What do you expect will happen now?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I expect the more interesting test cases will pop out. Before I can looking into them I want to see how many failures there are. [1:34:15],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I expect test cases to fail but this is not the kind of failure I was expecting. I was expecting did not expect true expected false but it seems like it is more interesting than that. [1:34:38],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
First I am just going to check my diff.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I'd like to change my strategy a bit. I think with forceaccess true it is not so much the return value that is different but it is a different logic flow. I might be expecting.. maybe they can't set it in this case?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I was expecting this to point out the test cases I need to change. I still believe that but my understanding of the code is not so high right now. It's not pointing out test cases is it.. it is. Let's look at this one here. [1:36:40],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I still believe that these test cases need to go. But whenever you remove a test case you need to take it very seriously. It is not necessarily something we do. [1:36:58],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
So in order to not spend too much time on this what I am going to do this.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I'll comment this out. I comment it out instead of removing it because I want to come back and understand it more. [1:37:30],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I'm pretty sure that the first one has to go because it is passing in forceaccess true. But I don't understand the code. and this..true true true... pretty sure this has to g doo. [1:37:54],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
These are all true. These are the test cases I expected to delete anyway so I am just doing extra checks to make sure I am not failing something that is supposed to be false. [1:38:22],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Run these tests again.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
[1:38:52] Ok it passed. Reasonably happy with this state.,,git diff,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
next step is to actually take away the parameter.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
*Self: at this point the functionality has been changed in a cosistent way and the following is a refactoring* [1:40:04],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Interesting. There is a - the other method. Im going to undo this. The overloaded method - there is already a method without that flag. Back to my last state. [1:40:56],,undo,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
So getField - let's look at this a little more. Always fun. What I am going to be doing is removing this. I'm trying to think. Fast way or easy way or slow way. [1:41:27],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Usually in my IDE I would just do this and it would tell me if the definition is the same. I am pretty sure it is.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: When you say that it will tell you if it is the same is it just textual?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I would select it and it would show the same text in the same file.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: So if it was two different classes in the same file?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Yes it is just text based. Sometimes your eyes can lie to you you see what you want to see.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Then we will get rid of this. [1:42:50],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I hate to operate like this. I like to take away all chances of a mistake being made.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: Do you think there is a chance of a mistake being made now?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Yes I deleted a method but I didn't 100% verify that the methods had the exact same names.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
So I took away this one. Let's see if it exists in here - which I expect it to. And it exists. So now I'm happier.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Same thing here. [1:43:53],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Let's do it like this.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
So looks like we do have those two. Let me get rid of this one. [1:44:18],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I'm just reading the comments to make sure ...,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Really what I should be doing is keeping this docblock if I wanted to be really thorough I would be keeping that and - what I should be doing is this. [1:45:00],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: What did you do just now?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I kept the comments from the old method - I think it is more accurate - and the prototype of this without the parameter.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: Now they were conveniently located below each other what if they had been the other way around.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Then it is a little more involved.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: Would you have done it differently then?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Yes. [1:45:39],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Well I could just continue how I did the first one then look at the comments and ... that's probably what I would do. That is how I will do the other one.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: For the sake of time I am going to stop you.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: How did you go about solving this task?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"First get a good understanding of what I was supposed to do. I discovered the overloaded method names. Not initially, it's not something we come across so it took me longer.",,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: How did you go about getting an understanding of the code?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"I looked at all the methods and took out the true branch and left the false branch then I took out the tests. So I had a plan. The next step is to take out the forceaccess, remove the method names and parameters anywhere it was called. Tests will fail at that point so then it is pretty easy to figure out what has to be updated.",,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: Is that how you would normally have organised it if you were to do this during your work.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Yeah the basic process is if you change code the tests should fail. [1:48:24],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
And you leverage that to guide you back. And if no tests fail then something is wrong. Either tests are missing or.. at that point I would write tests. It would be interesting if this task required that. What if I started making changes and no tests failed. [1:48:51],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: do you know of any tools that could have automated any of the changes you did?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Nope,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: Do you know any tools that could have automated the information finding - you used grep quite a bit?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
VScode has pretty good search but the end result is the same.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: Is there anything you are certain you got right?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Nope.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: you are certain?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I have to be. I don't want to make mistakes so I work hard to not make mistakes. In this case... for the first two tasks I'd like to know if I did make mistakes but I don't think so. Nor in this one.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: How would you define making a mistake here? [1:49:56],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
If I introduce bugs. If it was an existing bug it would still remain I wouldn't catch it but I definitely would not want to introduce a new one. [1:50:18],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: You emphasised understanding the code in all the tasks why is that important? [1:50:19],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
"That is pretty key to our job. If you don't understand the code and what it is doing then you're not going to catch problems or you'll miss something. In java it is easier - in ruby ... for example a private method in ruby isn't really private other classes may use it. In java you can safely remove a private method but in ruby you really need to understand where it is used and how it is being used. You have to understand the code make stuff fail, tinker with it. [1:51:23]",,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: You talked a bit about the code review. How would that impact the way you work. If you need to for example make reasonable commits - does that impact the order in which you do things?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Yes. That is why you can just start over. In the end - most of the time you are just playing around trying to figure out how everything works. So in the end when you do the work it is actually very few lines of code modified so you can strategically break it up into two separate chunks of work and get them code reviewed separately or you separate commits and walk people through. If someone see a thousand lines of code they are not going to prioritise this code review. It is just extra baggage. If I had seven pieces of work - or three pieces of work - that each needs code reivew that makes it hard for me to keep working on new stuff. I would have to juggle these other things. When a code review comes up there is usually at least one comment that comes up that you need to address so I would need to switch to that branch and keep working on it. So you don't want to do that switching too much so make it easy to code review. [1:53:08],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: how do you organise what goes together in a commit and what has to go in separate ones?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
In the example I used earlier if there are syntax errors or warnings you want to go away you usually put that in a comment and people will ignore it. If you make one line of code that is very important to code review you put it in a different commit it is not so much about getting your code to pass code review but getting people to focus on what is important. Otherwise they are just going to point out that hey you ned to.. you should put this on a new line or just superficial stuff. I don't want that. I want people to look at the stuff that I am unsure about.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: Is that why you were careful with whitespaces as well?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
It is a sign that you care? you know? Like if you're just moving methods around because you don't like their order or.. that is just noise that doesn't really need to be there. [1:54:36],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: You mentioned that you saw the refactoring menu and that there could be some automated tools that could do this. Do you know any of them?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Nope.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: There is move method inline method change method signature safe delete. Do you know any of these tools?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Nope.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: Do you know the refactorings outside of the tools as manual operations?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Nope. I have never used any tools for automated refactorings?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: Why do you avoid using them?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I have never used them. I am not sure there is any one reason why. I am unsure how much time it would save me. It is something for me to look into I guess. These types of changes are fairy simple and doesn't really come up a lot. Task 3 I can see coming up. Task 2 would never come up. Task 1 this happens a lot moving stuff around.,"Reflection
Efficient
 (“how much time it would save me”)",,0,0,0,0,1,"<0,0,0,0,1>",0,293-293,0,0,0,0,1,0,0,0,0,0,
I: How would you categorise task two such that it never comes up? What is it about it that never comes up?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
It is a breaking change. You're taking away a method from an API and you have no idea of the consequence of that. The first step we would do is to deprecate it.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: but it could be a similar change if it was a helper method right?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
If it was a private method? Even that is tough. I am so reluctant to do stuff like that. That is usually something that would pop up in tests or it should so it's not that bad but some of our code are shared libraries and those are stuff that would not pop up for a while until an application would start using the latest version of it. So you have to understand how it is used. [1:57:06],,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: You operated on different levels of the code. For example on task 1 you truncated the code and didn't look at the bodies of the methods until at the end. Can you say something about that?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Do you mean when I shifted the method bodies?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: Yes you minimised them.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Task 1 I wanted to understand where all these methods were - they were conveniently laid out right together so that made it easier for me. But that is probably not how it would be. In a real world scenario I would be reading through the whole class looking for them I wouldn't be told which ones they were. I would be reading through and trying to figure it out that way.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
I: Any final questions or comments?,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
Nope.,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
fin,,,0,0,0,0,0,,0,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,
,,,,,,,,,,,0,0,0,0,0,0,0,0,0,0,