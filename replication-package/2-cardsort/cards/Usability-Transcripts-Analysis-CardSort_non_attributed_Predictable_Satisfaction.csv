"<1,1,1,0,1>",ID2,"It's located in a read only container.
So at this point when you get an error like that it's like this is useless I don't know what to do with it. Am I actually going to go in there and start figuring out why JUnit-Assert-class is located... what. That's not helpful at all.
So even if I .. maybe if I just do this. And this is the thing once you try this a few times .. Oh there that's better. Then now it's like .. what am I moving am I moving the entire class? That's not what I want. Extract? Oh that didn't work. Extract .. Method? Well that's not what I want either. 'Cause that implies you just got a small section of code
At this point I'm like well I've got four more methods why don't I just move them? So what's the point. Unless I've been trained specifically on how to use these things. Let's see if this is actually going to work. This may fail because again it's a different file I'm pulling it from. What that's not what I want this is what I want. Let's see what happens now. Interesting what's happening here. Uuh cannot resolve foo. Now this is challenging. Ok where is foo defined oh here is foo. Who wrote this code seriously. Should not be using foo as a variable name. Now the question is I'll put this a the top here even though it's actually not used by any of the top tests this should actually work. Looks like it work. Run it. Done. Ok so I need isNotEmpty and isNotBlank and isBlank. Blank and isNotBlank. I'm having mouse issues.","Invocation
Not Predictable
 (“what am I moving am I moving the entire class?”)
 Not Satisfaction
 (“Not what I want”)
 Not Effective
 (“that didn't work”)Invocation
Not Efficient
 (“I've got four more methods why don't I just move them”)"
"<1,1,1,0,1>",ID3,"I just did.
I: Yes manually. Did you consider checking the refactoring menu. [1:49:46] Why did you not consider using it?
So I would inline this into this.. How would I do this? I have never used this before. Here is the refactoring menu. So it says it has 20 occurrances. What do I even do here? This is like - this is not even the function it is usages of it? Will this change the invocation? This is not what I want. This is already discouraging me from pursuing it forward. Only if I discover that what I want to do is impossible or taking too long then I would research.","Invocation
Not Predictable
 (“What do I even do here”)
 Not Satisfaction 
 (“already discouraging me from pursuing it forward”)
 Not Effective 
 (“This is not what I want. “)
 Efficient 
 (“Only if I discover that what I want to do is..taking too long”)"
"<1,1,1,0,1>",ID4,"parameter forceaccess is used in methodbody. Oh it's saying it's used somewhere - wait - what's that trying to say? Oh it's saying it's used - but that's fine; I'm going to do this and it's going to complain and I'm ok with that. Because I realise that there's no way to do this without something complaining. I feel like it's not going to be able to automatically remove it; besides there are some logic changes too.
Continue.
Alright!
As I mentioned there's some red stuff here. That's fine. If forceaccess set accessible true else continue. It looks like we don't actually need this which means the else is always going to be true. so the question is what does the continue do? The continue will just go back to the beginning of the forloop. I was just looking to see if I actually needed to even have this if-statement up here but it sounds fine. I think that this should be ok because what's happening is if this boolean is false we want to just continue anyway otherwise we want to just return the field. Sure that should work. Ok so now I'm surprised - I'm kinda shocked that there's not more red in here because did I automatically remove it already?
I: What do you think the tool did?
Oh it probably already renamed everything that was using this. Ugh.
I've just realized that I think one of the reasons I'm hesitant to use tools is because I don't know the full impact. If I were to look at a source control diff right now I would assume that we have some usages. There's going to be some very redundant test cases right now because they've probably been automatically renamed to use the default parameter right now. So if I were to look for getField in here ...
what'll happen is that those test cases are probably going to break.
If I hadn't used a refactoring tool and I would have just seen the red lines and known that this is exactly what I need to remove. What I'll do now is that I guess there's like a git diff thing I can use in here.","Invocation
EffectiveInvocation
Not Predictable 
 (“surprised” ..”did I automatically remove it already?”)Invocation
Not SatisfactionInvocation
Not Predictable
 (“I don't know the full impact”)Invocation
Not Efficient
 (“If I hadn't used a refactoring tool and I would have just seen the red lines and known that this is exactly what I need to remove.”)"
"<1,0,1,1,1>",ID4,"Well there was this intelliJ one that sort of did it but then I guess it messed with how I approached the problem so I decided not to use it.
I: So what happened there? Can you elaborate?
Yeah what happened is once I changed it I realised I - I guess in tandem with other tools I realised that I didn't actually know what was changed elsewhere like in the tests for instance. I guess it could have shown me that the tests were broken - but for me at this point with this particular task I liked using the compiler to show me where the error were. So what happened was I realized that I didn't - because I also didn't understand the previous test well enough I didn't understand what was actually changed and I had to do an external diff to compare it. To me it was easier instead of doing that to just use the visual diff of the red and do that. And that's because I found it more intuitive or I guess .. more .. less .. less reliant on other tools because I guess the java compiler is such an ubiquitous thing and I am just leveraging that.
I: It took quite a long time and it seems the tool could have done some of those changes faster?
It might have that's a thing I'm not .. 'cause I did change it and remove it but I still found I had to do some of those things manually. Based on what I did the first time around I evaluated it and I thought it was not that much faster with that I was doing. And I figured that my familiarity with my current thing would have made me just switch back to it. Is it worth it for me to use this I guess untested tool now and I decided that I'd rather just finish it up faster. I think we can conclude people are set in their ways.
I guess what happened was I was confronted with something that made me uncomfortable and made not as sure as my current process and so I decided to revert back to it. What happened once I reverted to my process I found it more intuitive and I thought it ended up being faster than the other one. Because with the other one I would have kept checking kept looking over my shoulder the entire time.
I: You would have kept looking over your shoulder.
I would have felt more than normal like I might have missed something.
I: Is that because you don't trust the tool?
Yeah a little bit. Yeah like when I used the tool I was like wait did change and I ended up having to look.
I: Did you use the preview window?
Yeah - what exactly happens - because I thought I used it and I didn't really see much. It kept taking me out of it and I thought - I think having something .. I think having like an active - instead of jumping back into the code I was expecting to see a before and after and I didn't see a diff and maybe there was one but I didn't see it and I was expecting to see a diff.","Reflection
Not Predictable
 (“didn't actually know what was changed elsewhere”)
 Not Efficient
 (“To me it was easier instead of doing that to just use the visual diff of the red and do that.”)Reflection
Not Efficient 
 (“it was not that much faster with that I was doing.”)
 Not Trust 
 (“untested tool”)Reflection
Not Satisfaction
 (“made me uncomfortable”)
 Not Efficient
 (“I reverted to my process … I thought it ended up being faster than the other one”)
 Not Trust 
 (“I would have kept checking kept looking over my shoulder the entire time. “)Reflection
Not Satisfaction 
 (“was expecting to see a before and after and I didn't see a diff”)"
"<1,0,1,1,1>",ID4,"I see. Honestly probably because I didn't really know that one. It looks familiar because I've seen it but I've never used it.
I: You didn't know what it did?
...know.. I've seen it but I didn't know what it did. But that sounds way more useful and I probably should have used that because that is actually expanding the call like paste in does. I think it depends for me the more automagical it gets the less I trust it. To me Rename is simple. I like Rename I can quickly Rename I can see what is Renamed et cetera.
I: What is simple with it?
It is effectively a very specialized find-and-replace - I guess they all are. To me it just feels like it doesn't do anything - it doesn't feel super fancy. Like compared to this method signature one where it changed a lot of different places - maybe because I'm just more familiar with it but it just seems more - I guess it's because it's more similar to .. I'm not sure.. why do I ..","Reflection
Trust
 Efficient (“quickly”)
 Satisfaction (“like”)
 Predictable (“see what is Renamed”)Reflection
Predictable
 (“it doesn't feel super fancy. Like compared to this method signature one where it changed a lot of different places”)"
"<1,1,1,0,1>",ID4,"Of what?
I: Of this method.
No if it is as simple as I thought it wouldn't because it'll say return but then it will be the first like of the method. But I guess I don't know what intelliJ ..
Inline and remove the method inline all and keep the method inline this only and keep the method. So ah to me what happens is I feel like this .. I wonder maybe it's my personal experience but we're not really taught this particular terminology. Either that or I didn't pay attention in class. But to me it's like - for example when I was asked in the questionnaire about more formal refactoring I guess it's like when I was taught design patterns I was like what are these things and it sounded more daunting then I was shown it and I was like ah and now I can use design patterns because I've learned the vocabulary. But it's not something I would have done ahead of time. And I think these refactoring patterns because I'm sure people talk about them but I haven't learned them in a course in university and I'm sure that's probably why. But I'm not sure. When I'm seeing this I'm trying to infer what it means by inline all remove the method inline all keep the method inline this and keep the method. I'm assuming inline all remove the method means find everything that matches this type of inline and remove it inline all and remove the method it's straightforward it's going to remove the method that this is calling so it's going to remove readField and inline this means that I'm going to inline this particular occurrences. I have a feel that it's just going to replace everything and return the end of the same inline field but we'll see.
[1:36:20] What did I press? I just pressed undo by the way. Yeah inline keep the method there is no preview but.. Uh.. what did it call beforehand? field and target. Oh yeah looks like it worked quite well.
I: So now you just undid?
Yeah I just undid because I wanted to see what the difference was. This is literally just me playing around with it trying to see what it's doing.
I: So you wanted to go back in order to go back in order to compare this with the result of yor refactoring.
Yeah and obviously I want to see what this method does. yeah so it literally just replaced it. Huh. That is quite useful. That would have saved me a lot of time.
I: Do you think you would have used that?
Yes because I feel like inline now that I'm understanding it it looks simple enough that yeah I would have probably done that if I knew that this tool existed then yeah","Invocation
Predictable (describes what they each do)Invocation
Effective (“worked quite well”)Reflection
Efficient (“saved me a lot of time”)Reflection
Satisfaction"
"<1,0,1,0,0>",ID4,"Obviously I like if a tool is correct. But for me if a tool is predictable enough I can sacrifise a little correctness because if I know what it's doing I can correct it after.
I: What is an example of correctness you can sacrifice?
Like for example if that inline tool had replaced that particular text and kept the return at the top and I'd had to manually delete it I'd been fine with that because I'd have known that it just replaces everything from here and out it's like a glorified paste.","Reflection
Satisfaction(""I'd been fine with that"") 
Predictable(""I'd have known that it just replaces everything from here and out"")"
"<1,0,1,0,0>",ID6,"It's funny because all of these things - oh This is interesting. When I moved is still pointing to the old stringutils test-file. I can remove that.
I: Did that surprise you?
It did. I wanted to move the files and I think that when I moved it from here if there is a variable here with the same name maybe it would fetch the reference from here rather than from the old file. I understand that it's trying to not break my code. But then it starts to add dependencies between that I don't want.","Invocation
Not Predictable (“It did”)
 Not Satisfaction(“…that I don’t want”)"
"<1,1,1,0,0>",ID8,"Just making sure those are specifically the ones I want. I don't need to check for more? et's see if these can be moved in bulk. I don't know if I can highlight more than one. [12:44]
I: Would you usually go and check that, or is it because of the refactoring study?
I don't know if I can do multiple at a time, what I might do is move one and then cut and paste the others. Eclipse is pretty good at pulling junk out. Type is not in project make static and move - no, I don't want that. So I guess I can't move. [13:35]
I: Did you notice that it was called move instance method?
Hmm
I: Do you know what this means?
No. I know what an instance method is but I don't know why it want to make it static. There are no variables. Foo is static. Right. [14:22]","Invocation
Not Satisfaction (
 (“no, I don't want that.”)
 Not Effective 
 (“I guess I can't move.”)Invocation
Not Predictable (“I don't know why it want to make it static.”)"
"<1,0,1,0,0>",ID8,"If you could preview the change.
I: Here you used the preview.
Probably a more powerful preview. I want to do the change, but I want to know what it changed. It's more like, highlight all the lines that you changed to purple and keep going until I say stop.","Reflection
Not Satisfaction 
 (“a more powerful preview.”)
 Not Predictable (“I want to know what it changed”)"
"<1,0,1,0,1>",ID9,"Yes because I could see that the method was right here. The two argument version.
I: So the refactoring did break the code but it was what you expected nonetheless.
Yes it was more helpful for the refactoring to result in code that did not compile than to say I can not do that.
I: how come?
It was more in line with the change I would have done manually. I would make the change, see that there was an in-collision and then resolve the collision. Asking me to modify unrelated code in order to delete the unrelated code feels like an extra step.","Reflection
Predictable
 Satisfaction 
 (“it was more helpful for the refactoring to result in code that did not compile than to say I can not do that. “)Reflection
Efficient (“Asking me to modify unrelated code in order to delete the unrelated code feels like an extra step.”)"
"<1,0,1,0,0>",ID10,"By going through the structure of the test.
And I see that there's still a whole bunch of orange sad marks here, but there's nothing red, so it still compiles. at the very least. Lest go to the top of the file and hit ctrl + shift + r to run the tests. It's compiling everything ... that's all fine and dandy. it's going to complain about - can be private, I'm sure that's fine, and stuff that's never used.
Ah, really? I would have expected it to say, I could remove all the unused things for you, but I don't see that there. No. Ok. Well, before I do that, I'm going to take a look at the StringUtilsEmptyTrimTest. Test one - let me not make the same mistake again. What kind of stuff do we have in here. [20:11] Type migration, make static. No. That's really frustrating.
I: Why is that frustrating?
The - again I don't really know what it means when it says candidate variables. Having the different types that aren't in the project, that doesn't mean too much to me. Like, I understand the thing about the type in theory, but what types are in the project. [21:14] Making it static and then moving it - like sure, let's try this. Sure. But I don't need it to be a static method. Okay, so, let me - before I make any changes there, let me be happy with my brand new file there. I know there are some trailing whitespaces they were already there. Ok.","Invocation
Not Satisfaction (“That's really frustrating.”)Invocation
Not Predictable (“I don't really know what it means”)"
"<1,0,1,0,0>",ID10,"So I inlined the method, and I said don't bother inlining it in these 9 occurrences. And the refactoring tool said fine, I'll leave you with this broken code base.
I: And that's not what you wanted?
That's not what I wanted. What should have done I guess, was to intentionally keep the original, then on the like, second completely different page, where the panel pop up at the bottom with the find results - not the find, whatever it is -
I: Usages?
Yeah, exactly. like then, say like, here are the nine occurrences I don't want you to change. But I had already committed to inline and remove by the time I got to the ones at the bottom, the preview panel at the bottom, and I was surprised by that. I was surprised by this inability to resolve this method. I wouldn't expect my refactoring tool to leave me in a state where my tool does not compile.
[58:00] Right, like the refactoring tool can do safe easy stuff where everything is fine, and being like, I'm not necessarily sure, like, at least the logic is the same, or like maybe the logic is the same but there may be some small semantic differences - and like I've seen ruby mind be like, hey this does have semantic differences. So I am particularly surprised that the refactoring tool leaves me in a state where my codebase does not compile.","Invocation
Not Satisfaction (“That's not what I wanted.”)Invocation
Not Predictable (“I was surprised by this inability to resolve this method.“)Invocation
Not Predictable (“ I am particularly surprised that the refactoring tool leaves me in a state where my codebase does not compile”)"
"<1,1,1,0,0>",ID10,"If I were to - I chose to delegate and I chose to preview here. I could show the conflicts in the view. I know where this is used in the method and I know that is this already defined in the class. If I click continue. What .. I wouldn't have considered clicking continue in that case.
I: Why?
It tells me that there are problems, which leads me to believe it is not able to do it.
So like, here, there is the method, with the signature that needs to be changed. And then there is the, uh, unclassified usage, sure, one usage in one file. But let me try it, let's se what the heck happens. Ok, this is an ambiguous call, of course. Why did it have .. Why does it have a forceAccess.. What.
I want to undo this and see what's going on here. Oh weird what. Why is it even. Ok.
So it changed the two methods in a way that I didn't expect, it feels bonkers. Right, cause you have a method that has getField with two parameters and one with three parameters. And when I say, I'm fine with the problems, deal with them for me. I still end up with two methods. But the three version is on top and the two version is on bottom.
I don't need this at all. This being a getField that takes a forceAccess. I don't need to delegate to getField, that's fine.
So this is a relatively simple manual cleanup that I could do. I just need to continue here. And there is another manual cleanup where this getField was taking. Oh wait, did I have three getFields? I ended up with three getFields. So the changing the signature ended up making a third method instead of changing my two, but the scroll position didn't change or give met any indication. Ok, that's delightfully bonkers. So now I have a getField-method.","Invocation
Not Effective (“leads me to believe it is not able to do it. “)Invocation
Not Predictable (“it changed the two methods in a way that I didn't expect”)Invocation
Not Effective (""I don't need this at all.”)Invocation
Not Predictable 
 Not Satisfaction (“bonkers”)"
"<1,0,1,0,0>",ID10,"Oh, I don't know. I wouldn't have wanted it to not compile. There was a 'learn more' option that I didn't choose which might have shown me like here are what's calling it with these particular variables. I forget if, in java, if you have a variable that is unused, whether it still actually compiles - I think it does. Compared to other languages.
Now I have lost the actual thing that I was working on. [1:37:01]
WriteField. So in this testWRiteField here forceAccess, this is still what did I end up changing then. Right, there were objects, not just - write, there are different variants of writeField, I had forgotten that. This is why, when there are many things, I like to write down each thing so I know what I am doing. So I have forceAccess here. If forceAccess and field is not accessible then set accessible else setAccessibleWorkaround. So I get to decide at this point, do I want to - I'm treating it as if forceAccess is always false, then this is always false. So false and, which simplifies to false, which lets me remove the if-statement. And then I guess I can safely delete this. Here is the already defined in - quick view usages at this time - but that doesn't tell me anything. [1:39:19]
So, delete anyway. Then it will complain, because I have two writeFields, so I'll delete this one. Great. WriteDeclaredField just has the one caller, which is this - that is false so let's do the same thing, how is this used, getDeclared field, mark that as false, this doesn't care [1:40:20]
keyboard access - delete anyway. Great, that's never used - let's go back to the structure, see what else we have. Reading a declared field, that's before the get, just itself with the false call, perfect, I don't know if in java I can notify my. Yeah, sure. I typed true and I really meant to type false. Sure, rather than needing to visually find it. I already saw that. Delete that anyways. And of course you get weirded out by this. That feels weird, I don't know if I want to do that. I don't think I need to safe delete this, I can just regular delete this.","Invocation
Not Predictable (""that doesn't tell me anything.”)Invocation
Not Satisfaction (“of course you get weirded out by this. That feels weird, I don't know if I want to do that. “)"
"<1,0,1,0,0>",ID10,"[1:59:20] When I know the keyboard shortcuts. Extraction and inlining are awesome because I have easy keyboard shortcuts for extracting a constant versus a field versus a method versus a variable, as far as the IntelliJ’s shortcuts have no mnemonics going for them, these are some of the few where it has so it's easily to reach for them. That aside, the refactoring tool isn't that far off. Some of it is knowing what the refactoring is going to do. Like, when it says push IDT in, I don't what that is. and like, I've spent five years as a consultant teaching people how to program better, so I'm used to knowing this particular tool well, and introducing people to like refactorings and the notion that a refactoring is a small change of layout without a change of behavior and if you say that you're spending three weeks refactoring the codebase you're probably rewriting the codebase, and you're using the word refactoring. So, When would I look at an automated tool versus doing it myself, is familiarity with the tool, I know what it's going to do, I know the situations in which I am going to use it well?
I: Can you say something about the difference for you between trust, correctness and predictability when it comes to using the tool.
Sure. Refactoring tools where I can undo the change is fine. That's very low cost to actually try. Very occasionally I'll do a refactoring that doesn't have an undo option and that is frustrating. I am comfortable using a tool that isn't necessarily 100% correct when it tells me. There are all sorts of nice clever automated code changes that I'll use that aren't safe. In rubymind for example, and in intellij, you can swap arguments. So if you have a method with two arguments, and you have them in the other order, but rubymind doesn't go and change callers when you do that.","Reflection
Not Satisfaction (""I'll do a refactoring that doesn't have an undo option and that is frustrating”)
 Predictable (“I am comfortable using a tool that isn't necessarily 100% correct when it tells me.”)"
"<1,0,1,0,1>",ID11,"It is a process. I understand the code when I am doing this. If I have a tool that just does it for me - do I really know that it found everything? I am not sure. [1:15:44]
I would probably still be checking. Maybe it would be helpful. This took like, what, half an hour, so that could be done instantly maybe. [1:15:57]
But then I just spend the rest of the time verifying. Maybe there are time savings? There probably are time savings. Part of being a developer is figuring out how things work. I actually enjoy this stuff so it would be kind of taking the joy out of my job if I do stuff like that. You will probably get different answers from anyone else I guess.","Reflection
Not Predictable 
 (“But then I just spend the rest of the time verifying. “)
 Efficient 
 (“There probably are time savings”)
 Not Satisfaction
 (“it would be kind of taking the joy out of my job”)"
"<1,0,1,0,0>",ID13,"can I delete this?
what.
Show conflicts .. ok so this looks less handy than what I thought it would do. I was hoping it'll give me a little editor where it would show me, like this is where it is being used. But I hate this view. Every time this comes up my eyes glaze over, and I say ok, I'll just do force refactor instead of this safe refacoring. This is unreadable. [1:14:50]
I mean, sure it's neatly organised, but when you have a bunch of different levels.. no.
I: what information were you hoping would be present there?
I'm about to delete a parameter. Where is that parameter being used, and it's just showing me the hierarchy of .. which file, which class, method, you know all the way down to the parameter itself. I don't find that very useful for me. If I delete something I get these red underlines. They show up here in the view I'm used to seeing. They show up along here, on the side, aother view I'm used to seeing. I can preview them easily. That view - no bueno, I'm not a fan. [1:15:46]","Invocation
Not SatisfactionInvocation
Not Predictable 
 (“I’m about to delete a parameter. Where is that parameter being used, and it's just showing me the hierarchy of ..”)"
"<1,0,1,1,0>",ID13,"I think that would have had the same result. I don't .. I think the context switch just throws me off. When I'm moving from here to here, it's like walking into a new room, and you're like, what I'm I doing here. That happens when I open up a new tab. I like to stay as compartmentalized as possible. [1:25:21]
I: You mentioned that you usually use some refactoring tools, for example rename.
Sometimes, but not always. I found cases, especially with IntelliJ 2018 and forward, it's too aggressive. It renames too much. Let's say I have a method name, the same as some end point name being stored in a string, which is the same as some documentation stored in a comment. When I click refactor, rename, if I'm not cognisent of the end point it is going to rename that. Unless I have a complete model of the entire program, it is very likely that it will rename such strings. Sometimes it comes up with the view we talked about before, saying this is where it's being used, this is where its being used. I don't like that view. [1:26:36]
It would be nicer if it almost brought up like a slideshow showing all the places it's being used, and I could click through them and go like, oh, that's an endpoint, I don't want it there. Although, if the project is sufficiently large, that could become really inconvenient, that could be worse. If I could just get a slideshow like, within this package, that would be nice.
So I do use it, but I wouldn't say I'm 100% confident with it. I don't always trust it. [1:27:12]
I: Why do you mean by that, not trusting it.
I'm afraid it's going to do that thing where it's going to rename something in a string and break my program, or rename something in the documentation in some way that I don't want it to. Luckily with version control I can see these things. But sometimes it's easier to look for the references because it's just where it's being called, and I can just .. like, use that global search. Sounds bad when I say it now, but I'll do something like this.. [1:28:10]
If I do this, I'm more confident because I can see that these are all the method calls, I can go in and just replace one at the time. And this has an equivalent, ctrl shift r. And I can put this in here, and just go through and replace replace replace. [1:28:45]
I: This is a textual replace, right.
Yes. This, to me, in many ways feels safer, because I get a preview of what's happening as I'm doing it. While the global rename happens everywhere and I just have to trust that it did the right thing. I guess this is the exact slideshow I am describing. This is how I want things to be replaced when I'm afraid. [1:29:07]","Reflection
Not Satisfaction (“renames too much”)
Reflection
Predictable (“a slideshow showing all the places it's being used, and I could click through them and go like, oh, that's an endpoint, I don't want it there.”)
Reflection
Trust
Reflection
Predictable (“I'm afraid it's going to do that thing where it's going to rename something in a string and break my program, or rename something in the documentation in some way that I don't want it to.”)
Reflection
Trust"
"<1,0,1,0,1>",ID14,"I definitely would have checked it. First time I would have checked it. But if the change they made is logically, or I go ""oh, well done!"" then I would use it again. I might glance over the second time, but once I get confidence I just hit the hot keys.
I: Is there anything that reduces that condfience rather than increases it?
Error messages. I almost said dialogues or prompts, but it really just slows down using it, which is a barrier to using it. It just takes an extra thought step, looking at a dialogue. If it starts modifying other files that I think should not be .. like if it search some obscure library and I find this other method that has the same name, and I renamed it for you, like noo you did the wrong thing and now I'm a little gun shy.","Reflection
Not Efficient (“it really just slows down using it, which is a barrier to using it.”)
 Not Predictable (“If it starts modifying other files that I think should not be”)
 Not Satisfaction"
"<1,1,1,0,0>",ID14,"testWriteField, testWriteFieldForceAccess, which I just removed.
If true and ifField is accessible and .. what is this test doing, it's different from the other ones.
Oh, I think it inlined it. Which is kind of what I asked for. [1:22:45]
I: What did you expect it to do here?
I kind of expected it - which now that I think about it was an incorrect expectation - I expected it to put in a ... method that .. err.
That was a learning step.
I was confused, because it's not actually calling writeField. I was looking at the code there and to modifying it a moment ago.
We don't actually need this entire test because we're getting rid of this functionality. I can just destroy this test. That's kind of what I was thinking when I started this. There is the test for writeField and there is the test for writeFieldForceAccess, and if we get rid of the forceAccess method we can get rid of the test. So it kind of did the wrong thing here, but I'm getting rid of the test here so it doesn't matter. [1:24:11]","Invocation
Effective (“kind of what I asked for”)
Invocation
Predictable
Invocation
Not Satisfaction (“kind of did the wrong thing”)
"
"<1,1,1,0,0>",ID16,"Rename, inline, extract method a lot. Occasionally push up or push down. There's also - like not really refactoring - but code generation, getters and setters, I use those a lot. Also eclipse has templates that you can use to quick insert code. I use them a lot.
I: For the refactoring tools, do you find that they are overall correct?
Not always. The biggest limitation are cases that don't work that ought to work. Like, it doesn't let you do that.
I: What are examples of that? [1:34:48]
Inline is probably the biggest one, saying that it can't do it when it should be able to. But sometimes there are mistakes too, like you do a refactoring and suddenly there are compilation errors. Occasionally you get just totally garbled code?
I: Do the tool usually warn you in those cases?
No, it just do it and then suddenly everything is messed up.","Reflection
Not Effective(“The biggest limitation are cases that don't work that ought to work”)
Reflection
Not Satisfaction (“Occasionally you get just totally garbled code“)
Reflection
Not Predictable (""it just do it and then suddenly everything is messed up.“)
"
"<1,0,1,0,0>",ID18,"One thing is how much I have used them in the past, another is if I can predict what the code is going to look like, clearly in my head, then I trust it more. If the tool follows what it is in my mind.
I: Do you have any examples of when that did happen or did not happen? [1:46:37]
Extract method is a good example, since I an just highlight a block of code, give it a name, and it is just going to pop here. But there are other weird ones, like if it has a loop in its body and I try to use extract method on that, and it kind of - either it does not work, or it gives me something, but the loop is not right.","Reflection
Predictable 

 Not Satisfaction"
"<1,1,1,0,0>",ID19,"I: Ok. Are you comfortable trying to finish the task? 
 

 Yeah. I'll just do the craziness.
I: So what happened now? [09:16]
I've no idea what happened now. It didn't do anything. So it seems the first time it just made it accessible as a public, and now it will actually move it. So it's actually a bad workflow that it doesn't go to the next stage.","Invocation
Not Predictable (“no idea what happened now”) 
 Not Effective (“It didn't do anything.“) 
 Not Satisfaction (“it's actually a bad workflow”)"
"<1,0,1,0,0>",ID19,"[13:14] In the end, for these ones, I would just copy-and paste and put them together just because I don't trust the move in what it actually does, and trying to figure out how it works.
I: so at this point you want to change your approach?
I want to change for this one, knowing what it did there. I will change my approach to better suit my expectations and then found out if there is something happening that I was not understanding properly. But, from history, I used to copy and paste a lot because I would also want to see those kinds of breakages. The refactoring tools may try to show it to you or may not have a great way of showing to you, what it actually is affecting in other classes. So you only end up seeing that as part of committing. Sometimes it's easier to break your code to see how it's coupled together, because it may change your approach.
I: How would you usually approach this?
From the test side it's a little more interesting, but when I used to do it I'd say, I want to move these specific fields and then just copy and paste. Understanding that they should be fully encompassing themselves you can find out what is broken and think about the architecture a little more. The more you use these refactoring tools, the more your architecture can start falling apart, because you start exposing things as static or public that should be isolated a bit more.","Reflection
Not Predictable (“I would also want to see those kinds of breakages. The refactoring tools may try to show it to you or may not have a great way of showing to you, what it actually is affecting in other classes”)
Reflection
Not Satisfaction (""The more you use these refactoring tools, the more your architecture can start falling apart”)"
"<1,1,1,1,0>",ID19,"Did the tests run before compile? 
 I: Yes.
It says the the variable can not be resolved. did I mess something up? 
 I did - I put the wrong class name which is why doing it manually is bad..
This is one of the benefits, if you have a refactoring tool you trust, is that it can make sure these are correct. But making sure it exposes the changes it is going to make, and why, is a pretty big deal. That's one thing I always have. 
 The idea of visibility and knowing that is going on, is very important for me, rather than seeing it after the fact.
I could always go and use the tool and use git to see what actually changed along the way..
I: Why don't you like that approach?
Sometimes inspecting changes after the fact can be hard. There is going to be code that is unrelated to your refactoring, since normally refactoring tasks is done as part of other tasks. When you're looking at it after the fact you may also not be able to undo it if something doesn't look right, so it's better to have the information up-front. [23:46]
As you see here, because the refactoring tool added static to my method, the first test that I actually moved it won't run.
Where is that one? 
 testIsAllBlank
so, as a part of this, you can see that using the refactoring tool actually does break the code functionally. If it wasn't on a test it could have had a different impact, but because it is a test it is a little different.
I: It prompted you about making it static though.
But when I said no, it didn't allow it. When I said no, it stopped the refactoring, so you either have to say yes, or not use it. If you say no it does not allow the refactoring, so therefore we had to go with it. But that's also why I reverted it, because I didn't like what it was doing.
I: Did you expect it to break the test?
I would not expect a refactoring to break a test especially for a move. That's bad.","Reflection
Trust 
 Predictable (“making sure it exposes the changes it is going to make, and why, is a pretty big deal”)
Reflection
Predictable (“When you're looking at it after the fact you may also not be able to undo it if something doesn't look right, so it's better to have the information up-front.“)
Reflection
Effective (“ If you say no it does not allow the refactoring, so therefore we had to go with it”)
 Not Satisfaction (“I didn’t like what it was doing”)
Reflection
Not Predictable (""I would not expect a refactoring to break a test especially for a move."")
 Not Satisfaction(""That's bad."")"