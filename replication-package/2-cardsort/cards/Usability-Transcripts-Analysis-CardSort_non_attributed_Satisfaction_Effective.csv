"<0,1,1,0,0>",ID2,"Now let me try then 
 Click this refactor Move

See this is where you give up I'm doing it by hand.
I: Why do you think it failed?
Because it gave me an error message. Let me try again.
It was a woops that's copy.
It's located in a read only container.
So at this point when you get an error like that it's like this is useless I don't know what to do with it. Am I actually going to go in there and start figuring out why JUnit-Assert-class is located... what. That's not helpful at all.","Invocation
Not Satisfaction
 (“this is where you give up”)Invocation
Not Effective
 (“this is useless”)
 Not Satisfaction 
 (“That’s not helpful at all”)"
"<1,1,1,0,1>",ID2,"It's located in a read only container.
So at this point when you get an error like that it's like this is useless I don't know what to do with it. Am I actually going to go in there and start figuring out why JUnit-Assert-class is located... what. That's not helpful at all.
So even if I .. maybe if I just do this. And this is the thing once you try this a few times .. Oh there that's better. Then now it's like .. what am I moving am I moving the entire class? That's not what I want. Extract? Oh that didn't work. Extract .. Method? Well that's not what I want either. 'Cause that implies you just got a small section of code
At this point I'm like well I've got four more methods why don't I just move them? So what's the point. Unless I've been trained specifically on how to use these things. Let's see if this is actually going to work. This may fail because again it's a different file I'm pulling it from. What that's not what I want this is what I want. Let's see what happens now. Interesting what's happening here. Uuh cannot resolve foo. Now this is challenging. Ok where is foo defined oh here is foo. Who wrote this code seriously. Should not be using foo as a variable name. Now the question is I'll put this a the top here even though it's actually not used by any of the top tests this should actually work. Looks like it work. Run it. Done. Ok so I need isNotEmpty and isNotBlank and isBlank. Blank and isNotBlank. I'm having mouse issues.","Invocation
Not Predictable
 (“what am I moving am I moving the entire class?”)
 Not Satisfaction
 (“Not what I want”)
 Not Effective
 (“that didn't work”)Invocation
Not Efficient
 (“I've got four more methods why don't I just move them”)"
"<1,1,1,0,1>",ID3,"I just did.
I: Yes manually. Did you consider checking the refactoring menu. [1:49:46] Why did you not consider using it?
So I would inline this into this.. How would I do this? I have never used this before. Here is the refactoring menu. So it says it has 20 occurrances. What do I even do here? This is like - this is not even the function it is usages of it? Will this change the invocation? This is not what I want. This is already discouraging me from pursuing it forward. Only if I discover that what I want to do is impossible or taking too long then I would research.","Invocation
Not Predictable
 (“What do I even do here”)
 Not Satisfaction 
 (“already discouraging me from pursuing it forward”)
 Not Effective 
 (“This is not what I want. “)
 Efficient 
 (“Only if I discover that what I want to do is..taking too long”)"
"<1,1,1,0,1>",ID4,"parameter forceaccess is used in methodbody. Oh it's saying it's used somewhere - wait - what's that trying to say? Oh it's saying it's used - but that's fine; I'm going to do this and it's going to complain and I'm ok with that. Because I realise that there's no way to do this without something complaining. I feel like it's not going to be able to automatically remove it; besides there are some logic changes too.
Continue.
Alright!
As I mentioned there's some red stuff here. That's fine. If forceaccess set accessible true else continue. It looks like we don't actually need this which means the else is always going to be true. so the question is what does the continue do? The continue will just go back to the beginning of the forloop. I was just looking to see if I actually needed to even have this if-statement up here but it sounds fine. I think that this should be ok because what's happening is if this boolean is false we want to just continue anyway otherwise we want to just return the field. Sure that should work. Ok so now I'm surprised - I'm kinda shocked that there's not more red in here because did I automatically remove it already?
I: What do you think the tool did?
Oh it probably already renamed everything that was using this. Ugh.
I've just realized that I think one of the reasons I'm hesitant to use tools is because I don't know the full impact. If I were to look at a source control diff right now I would assume that we have some usages. There's going to be some very redundant test cases right now because they've probably been automatically renamed to use the default parameter right now. So if I were to look for getField in here ...
what'll happen is that those test cases are probably going to break.
If I hadn't used a refactoring tool and I would have just seen the red lines and known that this is exactly what I need to remove. What I'll do now is that I guess there's like a git diff thing I can use in here.","Invocation
EffectiveInvocation
Not Predictable 
 (“surprised” ..”did I automatically remove it already?”)Invocation
Not SatisfactionInvocation
Not Predictable
 (“I don't know the full impact”)Invocation
Not Efficient
 (“If I hadn't used a refactoring tool and I would have just seen the red lines and known that this is exactly what I need to remove.”)"
"<0,1,1,0,1>",ID4,"testgetFieldforceAccess I'll just remove it
I: So in this case you used git instead of the compile errors?
Yeah so I guess my previous goto for this kind of thing would be to know that this is what I need to remove because the compiler is complaining but because this kind of tool automatically did a lot more for me it kind of disrupted my flow. This was because it was the first time I was doing this. But this time you know what .. I'm going to be frank and say the next thing I'll do is to go back to my old approach. Because this I guess because of the nature of the task - I guess it's all about control and I feel I am out of control when things happen automagically.","Invocation
Effective
 (“this kind of tool automatically did a lot more for me”)
 Not Efficient 
 (“disrupted my flow”)
 Not Satisfaction
 (“I feel I am out of control”)"
"<1,1,1,0,1>",ID4,"Of what?
I: Of this method.
No if it is as simple as I thought it wouldn't because it'll say return but then it will be the first like of the method. But I guess I don't know what intelliJ ..
Inline and remove the method inline all and keep the method inline this only and keep the method. So ah to me what happens is I feel like this .. I wonder maybe it's my personal experience but we're not really taught this particular terminology. Either that or I didn't pay attention in class. But to me it's like - for example when I was asked in the questionnaire about more formal refactoring I guess it's like when I was taught design patterns I was like what are these things and it sounded more daunting then I was shown it and I was like ah and now I can use design patterns because I've learned the vocabulary. But it's not something I would have done ahead of time. And I think these refactoring patterns because I'm sure people talk about them but I haven't learned them in a course in university and I'm sure that's probably why. But I'm not sure. When I'm seeing this I'm trying to infer what it means by inline all remove the method inline all keep the method inline this and keep the method. I'm assuming inline all remove the method means find everything that matches this type of inline and remove it inline all and remove the method it's straightforward it's going to remove the method that this is calling so it's going to remove readField and inline this means that I'm going to inline this particular occurrences. I have a feel that it's just going to replace everything and return the end of the same inline field but we'll see.
[1:36:20] What did I press? I just pressed undo by the way. Yeah inline keep the method there is no preview but.. Uh.. what did it call beforehand? field and target. Oh yeah looks like it worked quite well.
I: So now you just undid?
Yeah I just undid because I wanted to see what the difference was. This is literally just me playing around with it trying to see what it's doing.
I: So you wanted to go back in order to go back in order to compare this with the result of yor refactoring.
Yeah and obviously I want to see what this method does. yeah so it literally just replaced it. Huh. That is quite useful. That would have saved me a lot of time.
I: Do you think you would have used that?
Yes because I feel like inline now that I'm understanding it it looks simple enough that yeah I would have probably done that if I knew that this tool existed then yeah","Invocation
Predictable (describes what they each do)Invocation
Effective (“worked quite well”)Reflection
Efficient (“saved me a lot of time”)Reflection
Satisfaction"
"<0,1,1,0,0>",ID7,"I do know that IDEs often provide class extraction tooling and I've never really used them that much. Especially since I'm not that familiar with IntelliJ, I chose to forego the automated tools that may be present, but I guess there may be tools that could, like, I could probably select one of these methods, and there might be like, yeah there's a move, so that probably would do what I wanted,
but when the task is this simple, and I'm unfamiliar with the specifics of what this does, I don't want to do it, because it might do something that is kind of not what I want, and I might backtrack and copy it anyway. I know there is -- so I used Eclipse for like 8 years - and i used the more basic refactoring tools in eclipse a lot, so renaming, extracting variables and methods, changing method signatures, it has a bunch of nice little tools for that.
But there were some sort of extract class method functionality, and whenever I did it it would do something very strange, and it was never what I wanted, so I stopped using it.
I: Do you remember what it did?
Not really. It would create a class, and the class that I extracted it from.. they would be kind of cyclicly referencential in way that I didn't want, and I didn't really spend too much time figuring out why is it doing this, because it wasn't what I wanted ever, so I just kind of said I am not going to use this tool.
I: Did you ever try configuring it to not do that?
it was never worth it. The kind of operation - extract superclass maybe, I can't remember - something that create another class, and it never did it in the way I wanted.","Reflection
Not Effective (“would do something very strange”)Reflection
Not Satisfaction (“never did it the way I wanted”)"
"<0,1,1,0,1>",ID7,"So, we'll just Extract Variable, oh I want to extract the not negated value; I'll just call it result for now 'cause I'm not expecting I'll keep this.
I: So you're just doing this to kind of debug your process?
Ultimately I want to inline isAnyNotBLank. It didn't let me do that, so I figured if I changed the code to work in this way where it wasn't negating the returned value, it would let me inline it. So I'll inline it here, and then I'll see if I maybe want to get rid of this result. So inline that, no ok it doesn't like that.
Inline interrupts the execution flow. So now I'm going to have to go look, and I'm guessing the problem is in fact that there's multiple return statements here, so it can't inline this. But at this point, now that I'm in isAnyNotBLank, and i know that I'm just negating the return value, and it just has three return statements,
I could just copy this code and change the three return statements to be the opposite. So I've tried to use the tools, it didn't let me do it, I was wrong about why it didn't let me do it, but now I look at it, and I see that it can't inline multiple return statements, because that's, it makes sense, but I want to negate the functionality of this, so I can just negate the return statements.","Invocation
Not Satisfaction
 (“It doesn’t like that”)Invocation
Not Efficient (“I can just…”)
 Not Effective
 (“tried to use the tool and it did not let me do it”)"
"<0,1,1,0,0>",ID7,"I will find the base methods -- the methods that use it directly -- I am going to remove this from the method signature, so remove it from the parameter list, and then I am going to delete half of the if-statements, where I will presumably now have an error, because I deleted the thing it is using. Once all the direct things are done then it's just changing the signature of all the other methods and they won't have any real changes, they'll just pass this in.
Here's one of the direct usages. We'll go to change signature.
Thinking, that's fine, can I tell it to just do that? Yeah. So now I have compile error, which is fine. This is always false. Since it's always false, this if-statement will never be executed, so it will always just call -- if this was passed in as false -- it would always just call memberutils.setAccessibleworkaround so I'm just going to delete this. Alright, so move on to the next one. Not going to deal one yet, want to do all the direct accesses. Alright so here is one. Do the same thing. Change signature. Continue. So this is false, so it will always just continue once it finds an inaccessible fields. The same deal, ... documentation .. it's always false.. Why is this mad at me. Aah. Ok. I have made an error.","Invocation
Effective (“can I tell it to just do that? Yeah”)
 Satisfaction (“which is just fine”)"
"<1,1,1,0,0>",ID8,"Just making sure those are specifically the ones I want. I don't need to check for more? et's see if these can be moved in bulk. I don't know if I can highlight more than one. [12:44]
I: Would you usually go and check that, or is it because of the refactoring study?
I don't know if I can do multiple at a time, what I might do is move one and then cut and paste the others. Eclipse is pretty good at pulling junk out. Type is not in project make static and move - no, I don't want that. So I guess I can't move. [13:35]
I: Did you notice that it was called move instance method?
Hmm
I: Do you know what this means?
No. I know what an instance method is but I don't know why it want to make it static. There are no variables. Foo is static. Right. [14:22]","Invocation
Not Satisfaction (
 (“no, I don't want that.”)
 Not Effective 
 (“I guess I can't move.”)Invocation
Not Predictable (“I don't know why it want to make it static.”)"
"<0,1,1,0,0>",ID8,"Yes, if there are other callers.
I: you would rename to use this?
Yeah, like, moving to a different package is like a rename to me. For rename you definitely want to use something that changes it everywhere. You don't have to, but it makes your life easier. [22:16]","Reflection
Effective 
 (“For rename you definitely want to use something that changes it everywhere.”)
 Satisfaction (“it makes your life easier”)"
"<0,1,1,0,0>",ID9,"So isanynotblank is a bad name for like not is all blank which presumably is also in the same file.
Ah. I see. Which calls the bad one. So the easy thing to do here is to.. haah.
So this isn't strictly inlinable because the IDE sees that there are multiple return points which are ..dumb. Because the caller is equally simple.","Invocation
Not Effective 
 (“this isn't strictly inlinable”)
 Not Satisfaction 
 (“which are .. dumb”)"
"<0,1,1,0,0>",ID9,"I: What does that mean?
Maybe that's just expressing what I said further back. Which is good code looks like a human wrote it. It looks like it was written by a uniform author with a uniform style and is understandable to humans. Computers writing code typically don't feel the same constraints and so sometimes you can identify computer written code by awkward constructs or strange control flow or whatever. It looks like machine genereated code and it's not what I would like to call the output of my work. If the goal here is to clean up the api it should not have the side effect of ruining the implementation. [34:14]
I think that if - if intelliJ had been able to do the refactoring but given me a less beautiful result I would have been ok with it I would have just had to clean it up.","Reflection
Effective (“if IntelliJ had been able to do the refactoring”)
 Satisfaction (“I would have been ok with it”)"
"<0,1,1,1,0>",ID9,"And we throw again..
So it's just that one of the methods were missing the documentation for that.
So the refactoring there was magical - I assume it did the right thing but it's a little suspect. [40:50] So in the test
Some of these tests should be failing because they should be testing behavior that is no longer supported. So I should go through and look at the tests. Maybe I should have done this before deleting the parameter cause now it's going to be hard to look at the tests and know what they were doing before. Oops. [41:35]
I: Did you expect the refactoring you used to do this?
Yes. I just didn't think far enough ahead to think if this is what I wanted. Probably the right thing here is to undo. Except I can't. [41:51]","Invocation
Effective (“the refactoring there was magical”)
 Trust (“it's a little suspect”)Invocation
Not Satisfaction (“I just didn't think far enough ahead to think if this is what I wanted”)"
"<0,1,1,0,0>",ID9,"Yes.
I: Are there some cases you choose to not do that?
Yes definitely when I know the tool is going to pick up unrelated things. It most often come up when I want to rename a variable but I don't want to rename a bunch of strings that happen to be laying around nearby. And that's just the tool being too smart or not smart enough because sometimes that is what I want and sometimes it is not. [1:18:35]","Reflection
Satisfaction
 Effective"
"<1,1,1,0,0>",ID10,"If I were to - I chose to delegate and I chose to preview here. I could show the conflicts in the view. I know where this is used in the method and I know that is this already defined in the class. If I click continue. What .. I wouldn't have considered clicking continue in that case.
I: Why?
It tells me that there are problems, which leads me to believe it is not able to do it.
So like, here, there is the method, with the signature that needs to be changed. And then there is the, uh, unclassified usage, sure, one usage in one file. But let me try it, let's se what the heck happens. Ok, this is an ambiguous call, of course. Why did it have .. Why does it have a forceAccess.. What.
I want to undo this and see what's going on here. Oh weird what. Why is it even. Ok.
So it changed the two methods in a way that I didn't expect, it feels bonkers. Right, cause you have a method that has getField with two parameters and one with three parameters. And when I say, I'm fine with the problems, deal with them for me. I still end up with two methods. But the three version is on top and the two version is on bottom.
I don't need this at all. This being a getField that takes a forceAccess. I don't need to delegate to getField, that's fine.
So this is a relatively simple manual cleanup that I could do. I just need to continue here. And there is another manual cleanup where this getField was taking. Oh wait, did I have three getFields? I ended up with three getFields. So the changing the signature ended up making a third method instead of changing my two, but the scroll position didn't change or give met any indication. Ok, that's delightfully bonkers. So now I have a getField-method.","Invocation
Not Effective (“leads me to believe it is not able to do it. “)Invocation
Not Predictable (“it changed the two methods in a way that I didn't expect”)Invocation
Not Effective (""I don't need this at all.”)Invocation
Not Predictable 
 Not Satisfaction (“bonkers”)"
"<0,1,1,0,1>",ID14,"I found those test methods and created a new class for them to go into, and I just resort to copy-paste them in, I did not take advantage of the refactoring tools.
I: You tried though?
I did try them, in a lot of cases they help. There is a small set of refactoring tools that I often like renaming variables and method signatures, classes, changing visibility. That's nice, in that you can make a change in one place, and it will find all the other references to that in other places and update them. It is tedious to do that by hand. Things break and whatnot.
Whereas, in this case, with tests they're not referenced anywhere - like you can just remove it and no one will know the difference - the only difference would be in imports, if they were only used by certain tests, but that's just a file level change. But multifile can take some digging around.
I: How does that impact your choice to use refactoring tools?
In this case the tools weren't adequate for what I wanted. So I'll just avoid that in the future.","Reflection
Effective (“it will find all the other references to that in other places and update them”) 
 Efficient (”tedious to do that by hand”)
Reflection
Not Satisfaction (“the tools weren't adequate for what I wanted”)"
"<1,1,1,0,0>",ID14,"testWriteField, testWriteFieldForceAccess, which I just removed.
If true and ifField is accessible and .. what is this test doing, it's different from the other ones.
Oh, I think it inlined it. Which is kind of what I asked for. [1:22:45]
I: What did you expect it to do here?
I kind of expected it - which now that I think about it was an incorrect expectation - I expected it to put in a ... method that .. err.
That was a learning step.
I was confused, because it's not actually calling writeField. I was looking at the code there and to modifying it a moment ago.
We don't actually need this entire test because we're getting rid of this functionality. I can just destroy this test. That's kind of what I was thinking when I started this. There is the test for writeField and there is the test for writeFieldForceAccess, and if we get rid of the forceAccess method we can get rid of the test. So it kind of did the wrong thing here, but I'm getting rid of the test here so it doesn't matter. [1:24:11]","Invocation
Effective (“kind of what I asked for”)
Invocation
Predictable
Invocation
Not Satisfaction (“kind of did the wrong thing”)
"
"<1,1,1,0,0>",ID16,"Rename, inline, extract method a lot. Occasionally push up or push down. There's also - like not really refactoring - but code generation, getters and setters, I use those a lot. Also eclipse has templates that you can use to quick insert code. I use them a lot.
I: For the refactoring tools, do you find that they are overall correct?
Not always. The biggest limitation are cases that don't work that ought to work. Like, it doesn't let you do that.
I: What are examples of that? [1:34:48]
Inline is probably the biggest one, saying that it can't do it when it should be able to. But sometimes there are mistakes too, like you do a refactoring and suddenly there are compilation errors. Occasionally you get just totally garbled code?
I: Do the tool usually warn you in those cases?
No, it just do it and then suddenly everything is messed up.","Reflection
Not Effective(“The biggest limitation are cases that don't work that ought to work”)
Reflection
Not Satisfaction (“Occasionally you get just totally garbled code“)
Reflection
Not Predictable (""it just do it and then suddenly everything is messed up.“)
"
"<0,1,1,0,0>",ID16,"Usually. OCcasionally it gets confused and it doesn't work but mostly it's fine [1:35:57]
I: Have you used Move method?
Yes, but I don't find it so useful? I don't think it updates the callers. I think it's basically just a cut and paste. Maybe I'm just using it wrong but I find it doesn't really work for me. [1:36:28]","Reflection
Not Satisfaction (“I don't find it so useful”)
 Not Effective(“I don't think it updates the callers”)"
"<0,1,1,0,0>",ID18,"I thought move is going to give me the option to move it to a new class. That doesn't look like an option I can see.
Let's see if i can extract a superclass. [05:21]
Ah, and it looks like I can. I am not sure that is what I want to do, but let's try it anyway, because this won't be that expensive to undo. I am going to call this StringUtilsEmptyBlankTest. Here, great. Refactor. Yes. [05:51]
Great, it is not giving me anything. Ok, so I have created the class, so maybe this is going to help. Now maybe I can use move. Move ...","Invocation
Effective (“it looks like I can”)
Invocation
Not Satisfaction (“it is not giving me anything”)"
"<1,1,1,0,0>",ID19,"I: Ok. Are you comfortable trying to finish the task? 
 

 Yeah. I'll just do the craziness.
I: So what happened now? [09:16]
I've no idea what happened now. It didn't do anything. So it seems the first time it just made it accessible as a public, and now it will actually move it. So it's actually a bad workflow that it doesn't go to the next stage.","Invocation
Not Predictable (“no idea what happened now”) 
 Not Effective (“It didn't do anything.“) 
 Not Satisfaction (“it's actually a bad workflow”)"
"<1,1,1,1,0>",ID19,"Did the tests run before compile? 
 I: Yes.
It says the the variable can not be resolved. did I mess something up? 
 I did - I put the wrong class name which is why doing it manually is bad..
This is one of the benefits, if you have a refactoring tool you trust, is that it can make sure these are correct. But making sure it exposes the changes it is going to make, and why, is a pretty big deal. That's one thing I always have. 
 The idea of visibility and knowing that is going on, is very important for me, rather than seeing it after the fact.
I could always go and use the tool and use git to see what actually changed along the way..
I: Why don't you like that approach?
Sometimes inspecting changes after the fact can be hard. There is going to be code that is unrelated to your refactoring, since normally refactoring tasks is done as part of other tasks. When you're looking at it after the fact you may also not be able to undo it if something doesn't look right, so it's better to have the information up-front. [23:46]
As you see here, because the refactoring tool added static to my method, the first test that I actually moved it won't run.
Where is that one? 
 testIsAllBlank
so, as a part of this, you can see that using the refactoring tool actually does break the code functionally. If it wasn't on a test it could have had a different impact, but because it is a test it is a little different.
I: It prompted you about making it static though.
But when I said no, it didn't allow it. When I said no, it stopped the refactoring, so you either have to say yes, or not use it. If you say no it does not allow the refactoring, so therefore we had to go with it. But that's also why I reverted it, because I didn't like what it was doing.
I: Did you expect it to break the test?
I would not expect a refactoring to break a test especially for a move. That's bad.","Reflection
Trust 
 Predictable (“making sure it exposes the changes it is going to make, and why, is a pretty big deal”)
Reflection
Predictable (“When you're looking at it after the fact you may also not be able to undo it if something doesn't look right, so it's better to have the information up-front.“)
Reflection
Effective (“ If you say no it does not allow the refactoring, so therefore we had to go with it”)
 Not Satisfaction (“I didn’t like what it was doing”)
Reflection
Not Predictable (""I would not expect a refactoring to break a test especially for a move."")
 Not Satisfaction(""That's bad."")"